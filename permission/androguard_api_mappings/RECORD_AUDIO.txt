<android.net.sip.SipAudioCall: void startAudio()>
<android.speech.IRecognitionService$Stub$Proxy: void cancel(android.speech.IRecognitionListener)>
<android.speech.IRecognitionService$Stub$Proxy: void startListening(android.content.Intent,android.speech.IRecognitionListener)>
<android.speech.IRecognitionService$Stub$Proxy: void stopListening(android.speech.IRecognitionListener)>
<android.speech.IRecognitionService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>
<android.speech.IRecognitionService$Stub: void cancel(android.speech.IRecognitionListener)>
<android.speech.IRecognitionService$Stub: void startListening(android.content.Intent,android.speech.IRecognitionListener)>
<android.speech.IRecognitionService$Stub: void stopListening(android.speech.IRecognitionListener)>
<android.speech.IRecognitionService: void cancel(android.speech.IRecognitionListener)>
<android.speech.IRecognitionService: void startListening(android.content.Intent,android.speech.IRecognitionListener)>
<android.speech.IRecognitionService: void stopListening(android.speech.IRecognitionListener)>
<android.speech.RecognitionService$RecognitionServiceBinder: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>
<android.speech.RecognitionService$RecognitionServiceBinder: void cancel(android.speech.IRecognitionListener)>
<android.speech.RecognitionService$RecognitionServiceBinder: void startListening(android.content.Intent,android.speech.IRecognitionListener)>
<android.speech.RecognitionService$RecognitionServiceBinder: void stopListening(android.speech.IRecognitionListener)>
<android.speech.RecognitionService: boolean checkPermissions(android.speech.IRecognitionListener)>
<android.speech.SpeechRecognizer: android.speech.SpeechRecognizer createSpeechRecognizer(android.content.Context)>
<android.speech.SpeechRecognizer: android.speech.SpeechRecognizer createSpeechRecognizer(android.content.Context,android.content.ComponentName)>
<android.speech.SpeechRecognizer: void startListening(android.content.Intent)>
<android.speech.SpeechRecognizer: void stopListening()>
<com.android.camera.EffectsRecorder$4: void onRunnerDone(int)>
<com.android.camera.EffectsRecorder$EffectsListener: void onEffectsUpdate(int,int)>
<com.android.camera.EffectsRecorder: void setPreviewDisplay(android.view.SurfaceHolder,int,int)>
<com.android.camera.EffectsRecorder: void setPreviewSurfaceTexture(android.graphics.SurfaceTexture,int,int)>
<com.android.camera.EffectsRecorder: void startPreview()>
<com.android.camera.EffectsRecorder: void startRecording()>
<com.android.inputmethod.deprecated.VoiceProxy$6: void onPostExecute(java.lang.Boolean)>
<com.android.inputmethod.deprecated.VoiceProxy$6: void onPostExecute(java.lang.Object)>
<com.android.inputmethod.deprecated.voice.VoiceInput: void startListening(com.android.inputmethod.deprecated.voice.FieldContext,boolean)>
<com.android.inputmethod.deprecated.voice.VoiceInput: void startListeningAfterInitialization(com.android.inputmethod.deprecated.voice.FieldContext)>
<com.android.soundrecorder.Recorder: void startRecording(int,java.lang.String,android.content.Context)>
<com.android.soundrecorder.SoundRecorder: void onClick(android.view.View)>
