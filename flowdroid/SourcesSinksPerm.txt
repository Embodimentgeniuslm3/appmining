% <android.telephony.PhoneNumberUtils: byte[] numberToCalledPartyBCD(java.lang.String)> -> _SOURCE_
% <android.telephony.PhoneNumberUtils: java.lang.String getNumberFromIntent(android.content.Intent,android.content.Context)> -> _SOURCE_
% <android.telephony.PhoneNumberUtils: java.lang.String getStrippedReversed(java.lang.String)> -> _SOURCE_
% <android.telephony.PhoneNumberUtils: java.lang.String getUsernameFromUriNumber(java.lang.String)> -> _SOURCE_

CALL_PRIVILEGED <android.telephony.TelephonyManager: java.lang.String getCompleteVoiceMailNumber()> -> _SOURCE_
READ_PHONE_STATE <android.telephony.TelephonyManager: java.lang.String getDeviceId()> -> _SOURCE_
READ_PHONE_STATE <android.telephony.TelephonyManager: java.lang.String getDeviceSoftwareVersion()> -> _SOURCE_
% NOP <android.telephony.TelephonyManager: java.lang.String getIsimDomain()> -> _SOURCE_
% NOP <android.telephony.TelephonyManager: java.lang.String getIsimImpi()> -> _SOURCE_
READ_PHONE_STATE <android.telephony.TelephonyManager: java.lang.String getLine1AlphaTag()> -> _SOURCE_
READ_PHONE_STATE <android.telephony.TelephonyManager: java.lang.String getLine1Number()> -> _SOURCE_
READ_PHONE_STATE <android.telephony.TelephonyManager: java.lang.String getMsisdn()> -> _SOURCE_
READ_PHONE_STATE <android.telephony.TelephonyManager: java.lang.String getSimSerialNumber()> -> _SOURCE_
READ_PHONE_STATE <android.telephony.TelephonyManager: java.lang.String getSubscriberId()> -> _SOURCE_
READ_PHONE_STATE <android.telephony.TelephonyManager: java.lang.String getVoiceMailAlphaTag()> -> _SOURCE_
READ_PHONE_STATE <android.telephony.TelephonyManager: java.lang.String getVoiceMailNumber()> -> _SOURCE_

RECEIVE_SMS? <android.provider.Telephony$Mms: android.database.Cursor query(android.content.ContentResolver,java.lang.String[])> -> _SOURCE_
RECEIVE_SMS? <android.provider.Telephony$Mms: android.database.Cursor query(android.content.ContentResolver,java.lang.String[],java.lang.String,java.lang.String)> -> _SOURCE_
RECEIVE_SMS <android.provider.Telephony$Sms$Intents: android.telephony.SmsMessage[] getMessagesFromIntent(android.content.Intent)> -> _SOURCE_
RECEIVE_SMS? <android.provider.Telephony$Sms: android.database.Cursor query(android.content.ContentResolver,java.lang.String[])> -> _SOURCE_
RECEIVE_SMS? <android.provider.Telephony$Sms: android.database.Cursor query(android.content.ContentResolver,java.lang.String[],java.lang.String,java.lang.String)> -> _SOURCE_

% <android.telephony.SmsMessage: byte[] getPdu()> -> _SOURCE_
% <android.telephony.SmsMessage: byte[] getUserData()> -> _SOURCE_
% <android.telephony.SmsMessage: int getIndexOnIcc()> -> _SOURCE_
% <android.telephony.SmsMessage: int getIndexOnSim()> -> _SOURCE_
% <android.telephony.SmsMessage: int getProtocolIdentifier()> -> _SOURCE_
% <android.telephony.SmsMessage: int getStatus()> -> _SOURCE_
% <android.telephony.SmsMessage: int getStatusOnIcc()> -> _SOURCE_
% <android.telephony.SmsMessage: int getStatusOnSim()> -> _SOURCE_
% <android.telephony.SmsMessage: int getTPLayerLengthForPDU(java.lang.String)> -> _SOURCE_
% <android.telephony.SmsMessage: java.lang.String getDisplayMessageBody()> -> _SOURCE_
% <android.telephony.SmsMessage: java.lang.String getDisplayOriginatingAddress()> -> _SOURCE_
% <android.telephony.SmsMessage: java.lang.String getEmailBody()> -> _SOURCE_
% <android.telephony.SmsMessage: java.lang.String getEmailFrom()> -> _SOURCE_
% <android.telephony.SmsMessage: java.lang.String getMessageBody()> -> _SOURCE_
% <android.telephony.SmsMessage: java.lang.String getOriginatingAddress()> -> _SOURCE_
% <android.telephony.SmsMessage: java.lang.String getPseudoSubject()> -> _SOURCE_
% <android.telephony.SmsMessage: java.lang.String getServiceCenterAddress()> -> _SOURCE_
% <android.telephony.SmsMessage: long getTimestampMillis()> -> _SOURCE_
% <android.telephony.SmsManager: java.util.ArrayList getAllMessagesFromIcc()> -> _SOURCE_

% <android.location.Address: double getLatitude()> -> _SOURCE_
% <android.location.Address: double getLongitude()> -> _SOURCE_
% <android.location.Address: java.lang.String getAddressLine(int)> -> _SOURCE_
% <android.location.Address: java.lang.String getAdminArea()> -> _SOURCE_
% <android.location.Address: java.lang.String getCountryCode()> -> _SOURCE_
% <android.location.Address: java.lang.String getCountryName()> -> _SOURCE_
% <android.location.Address: java.lang.String getFeatureName()> -> _SOURCE_
% <android.location.Address: java.lang.String getLocality()> -> _SOURCE_
% <android.location.Address: java.lang.String getPhone()> -> _SOURCE_
% <android.location.Address: java.lang.String getPostalCode()> -> _SOURCE_
% <android.location.Address: java.lang.String getPremises()> -> _SOURCE_
% <android.location.Address: java.lang.String getSubAdminArea()> -> _SOURCE_
% <android.location.Address: java.lang.String getSubLocality()> -> _SOURCE_
% <android.location.Address: java.lang.String getSubThoroughfare()> -> _SOURCE_
% <android.location.Address: java.lang.String getThoroughfare()> -> _SOURCE_
% <android.location.Address: java.lang.String getUrl()> -> _SOURCE_
% <android.location.Address: java.util.Locale getLocale()> -> _SOURCE_

<android.location.Location: android.os.Bundle getExtras()> -> _SOURCE_
% <android.location.Location: double getAltitude()> -> _SOURCE_
<android.location.Location: double getLatitude()> -> _SOURCE_
<android.location.Location: double getLongitude()> -> _SOURCE_
% <android.location.Location: float getBearing()> -> _SOURCE_
% <android.location.Location: float getSpeed()> -> _SOURCE_
% <android.location.Location: java.lang.String getProvider()> -> _SOURCE_
% <android.location.Location: long getTime()> -> _SOURCE_

% <android.location.LocationManager: android.location.GpsStatus getGpsStatus(android.location.GpsStatus)> -> _SOURCE_
ACCESS_LOCATION <android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)> -> _SOURCE_
ACCESS_LOCATION <android.location.LocationManager: android.location.Location getLocation(java.lang.String)> -> _SOURCE_
ACCESS_LOCATION <android.location.LocationManager: android.location.LocationProvider getProvider(java.lang.String)> -> _SOURCE_
ACCESS_LOCATION <android.location.LocationManager: java.lang.String getBestProvider(android.location.Criteria,boolean)> -> _SOURCE_
% <android.location.LocationManager: java.util.List getAllProviders()> -> _SOURCE_

ACCESS_LOCATION <android.telephony.TelephonyManager: android.telephony.CellLocation getCellLocation()> -> _SOURCE_

% <android.telephony.cdma.CdmaCellLocation: int getBaseStationId()> -> _SOURCE_
% <android.telephony.cdma.CdmaCellLocation: int getBaseStationLatitude()> -> _SOURCE_
% <android.telephony.cdma.CdmaCellLocation: int getBaseStationLongitude()> -> _SOURCE_
% <android.telephony.cdma.CdmaCellLocation: int getNetworkId()> -> _SOURCE_
% <android.telephony.cdma.CdmaCellLocation: int getSystemId()> -> _SOURCE_
% <android.telephony.gsm.GsmCellLocation: int getCid()> -> _SOURCE_
% <android.telephony.gsm.GsmCellLocation: int getLac()> -> _SOURCE_
% <android.telephony.gsm.GsmCellLocation: int getPsc()> -> _SOURCE_


READ_EXTERNAL_STORAGE <android.media.ExifInterface: boolean getLatLong(float[])> -> _SOURCE_
READ_EXTERNAL_STORAGE <android.media.ExifInterface: byte[] getThumbnail()> -> _SOURCE_

% <android.app.ActivityManagerProxy: android.os.ParcelFileDescriptor openContentUri(android.net.Uri)> -> _SOURCE_
% deprecated API
% <android.provider.Contacts$ContactMethods: java.lang.CharSequence getDisplayLabel(android.content.Context,int,int,java.lang.CharSequence)> -> _SOURCE_
% <android.provider.Contacts$Organizations: java.lang.CharSequence getDisplayLabel(android.content.Context,int,java.lang.CharSequence)> -> _SOURCE_
<android.provider.Contacts$People: android.database.Cursor queryGroups(android.content.ContentResolver,long)> -> _SOURCE_
<android.provider.Contacts$People: android.net.Uri addToGroup(android.content.ContentResolver,long,java.lang.String)> -> _SOURCE_
<android.provider.Contacts$People: long tryGetMyContactsGroupId(android.content.ContentResolver)> -> _SOURCE_
% <android.provider.Contacts$Phones: java.lang.CharSequence getDisplayLabel(android.content.Context,int,java.lang.CharSequence)> -> _SOURCE_
% <android.provider.Contacts$Phones: java.lang.CharSequence getDisplayLabel(android.content.Context,int,java.lang.CharSequence,java.lang.CharSequence[])> -> _SOURCE_
<android.provider.Contacts$Settings: java.lang.String getSetting(android.content.ContentResolver,java.lang.String,java.lang.String)> -> _SOURCE_
% new API
% <android.provider.ContactsContract$CommonDataKinds$Phone: java.lang.CharSequence getDisplayLabel(android.content.Context,int,java.lang.CharSequence)> -> _SOURCE_
% <android.provider.ContactsContract$CommonDataKinds$Phone: java.lang.CharSequence getDisplayLabel(android.content.Context,int,java.lang.CharSequence,java.lang.CharSequence[])> -> _SOURCE_
% <android.provider.ContactsContract$Contacts: android.net.Uri getLookupUri(android.content.ContentResolver,android.net.Uri)> -> _SOURCE_
% <android.provider.ContactsContract$Contacts: android.net.Uri getLookupUri(long,java.lang.String)> -> _SOURCE_
% <android.provider.ContactsContract$Contacts: android.net.Uri lookupContact(android.content.ContentResolver,android.net.Uri)> -> _SOURCE_
? <android.provider.ContactsContract$Contacts: java.io.InputStream openContactPhotoInputStream(android.content.ContentResolver,android.net.Uri,boolean)> -> _SOURCE_
% <android.provider.ContactsContract$Data: android.net.Uri getContactLookupUri(android.content.ContentResolver,android.net.Uri)> -> _SOURCE_
<android.provider.ContactsContract$Groups$EntityIteratorImpl: android.content.Entity getEntityAndIncrementCursor(android.database.Cursor)> -> _SOURCE_
% <android.provider.ContactsContract$ProfileSyncState: android.util.Pair getWithUri(android.content.ContentProviderClient,android.accounts.Account)> -> _SOURCE_
% <android.provider.ContactsContract$ProfileSyncState: byte[] get(android.content.ContentProviderClient,android.accounts.Account)> -> _SOURCE_
<android.provider.ContactsContract$RawContacts$EntityIteratorImpl: android.content.Entity getEntityAndIncrementCursor(android.database.Cursor)> -> _SOURCE_
% <android.provider.ContactsContract$RawContacts: android.net.Uri getContactLookupUri(android.content.ContentResolver,android.net.Uri)> -> _SOURCE_
% <android.provider.ContactsContract$SyncState: android.util.Pair getWithUri(android.content.ContentProviderClient,android.accounts.Account)> -> _SOURCE_
% <android.provider.ContactsContract$SyncState: byte[] get(android.content.ContentProviderClient,android.accounts.Account)> -> _SOURCE_

GET_ACCOUNTS <android.accounts.AccountManager: android.accounts.AccountManager get(android.content.Context)> -> _SOURCE_
GET_ACCOUNTS <android.accounts.AccountManager: android.accounts.Account[] getAccounts()> -> _SOURCE_
GET_ACCOUNTS <android.accounts.AccountManager: android.accounts.Account[] getAccountsByType(java.lang.String)> -> _SOURCE_
% <android.accounts.Account: java.lang.String toString()> -> _SOURCE_

% <android.accounts.IAccountManager$Stub$Proxy: android.accounts.Account[] getAccounts(java.lang.String)> -> _SOURCE_
% <android.accounts.IAccountManager$Stub$Proxy: java.lang.String getPassword(android.accounts.Account)> -> _SOURCE_
% <android.accounts.IAccountManager$Stub$Proxy: java.lang.String getUserData(android.accounts.Account,java.lang.String)> -> _SOURCE_

READ_HISTORY_BOOKMARKS <android.provider.Browser: android.database.Cursor getAllVisitedUrls(android.content.ContentResolver)> -> _SOURCE_
READ_HISTORY_BOOKMARKS <android.provider.Browser: java.lang.String[] getVisitedHistory(android.content.ContentResolver)> -> _SOURCE_

% <android.webkit.BrowserFrame: android.webkit.CallbackProxy getCallbackProxy()> -> _SOURCE_
% <android.webkit.BrowserFrame: java.lang.String getUserAgentString()> -> _SOURCE_

ACCESS_NETWORK_STATE <android.net.ConnectivityManager: android.net.LinkProperties getActiveLinkProperties()> -> _SOURCE_
ACCESS_NETWORK_STATE <android.net.ConnectivityManager: android.net.LinkProperties getLinkProperties(int)> -> _SOURCE_
ACCESS_NETWORK_STATE <android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()> -> _SOURCE_
ACCESS_NETWORK_STATE <android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfoForUid(int)> -> _SOURCE_
ACCESS_NETWORK_STATE <android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)> -> _SOURCE_
ACCESS_NETWORK_STATE <android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()> -> _SOURCE_
ACCESS_NETWORK_STATE <android.net.ConnectivityManager: android.net.NetworkQuotaInfo getActiveNetworkQuotaInfo()> -> _SOURCE_
% <android.net.ConnectivityManager: android.net.ProxyProperties getGlobalProxy()> -> _SOURCE_
% <android.net.ConnectivityManager: android.net.ProxyProperties getProxy()> -> _SOURCE_
% <android.net.ConnectivityManager: java.lang.String getNetworkTypeName(int)> -> _SOURCE_

% <android.net.LinkProperties: android.net.ProxyProperties getHttpProxy()> -> _SOURCE_
% <android.net.LinkProperties: java.lang.String getInterfaceName()> -> _SOURCE_
% <android.net.LinkProperties: java.util.Collection getAddresses()> -> _SOURCE_
% <android.net.LinkProperties: java.util.Collection getDnses()> -> _SOURCE_
% <android.net.LinkProperties: java.util.Collection getLinkAddresses()> -> _SOURCE_
% <android.net.LinkProperties: java.util.Collection getRoutes()> -> _SOURCE_

% <android.net.LocalServerSocket: android.net.LocalSocketAddress getLocalSocketAddress()> -> _SOURCE_
% <android.net.LocalServerSocket: java.io.FileDescriptor getFileDescriptor()> -> _SOURCE_

% <android.net.TrafficStats: int getThreadStatsTag()> -> _SOURCE_
% <android.net.TrafficStats: long getMobileRxBytes()> -> _SOURCE_
% <android.net.TrafficStats: long getMobileRxPackets()> -> _SOURCE_
% <android.net.TrafficStats: long getMobileTxBytes()> -> _SOURCE_
% <android.net.TrafficStats: long getMobileTxPackets()> -> _SOURCE_
% <android.net.TrafficStats: long getRxBytes(java.lang.String)> -> _SOURCE_
% <android.net.TrafficStats: long getRxPackets(java.lang.String)> -> _SOURCE_
% <android.net.TrafficStats: long getTotalRxBytes()> -> _SOURCE_
% <android.net.TrafficStats: long getTotalRxPackets()> -> _SOURCE_
% <android.net.TrafficStats: long getTotalTxBytes()> -> _SOURCE_
% <android.net.TrafficStats: long getTotalTxPackets()> -> _SOURCE_
% <android.net.TrafficStats: long getTxBytes(java.lang.String)> -> _SOURCE_
% <android.net.TrafficStats: long getTxPackets(java.lang.String)> -> _SOURCE_

% <android.net.wifi.WifiInfo: boolean getHiddenSSID()> -> _SOURCE_
% <android.net.wifi.WifiInfo: int getIpAddress()> -> _SOURCE_
% <android.net.wifi.WifiInfo: int getLinkSpeed()> -> _SOURCE_
% <android.net.wifi.WifiInfo: int getNetworkId()> -> _SOURCE_
% <android.net.wifi.WifiInfo: int getRssi()> -> _SOURCE_
% <android.net.wifi.WifiInfo: java.lang.String getBSSID()> -> _SOURCE_
% <android.net.wifi.WifiInfo: java.lang.String getMacAddress()> -> _SOURCE_
% <android.net.wifi.WifiInfo: java.lang.String getSSID()> -> _SOURCE_

% <android.net.wifi.WifiManager: android.net.DhcpInfo getDhcpInfo()> -> _SOURCE_
% <android.net.wifi.WifiManager: android.net.wifi.WifiConfiguration getWifiApConfiguration()> -> _SOURCE_
% <android.net.wifi.WifiManager: android.net.wifi.WifiInfo getConnectionInfo()> -> _SOURCE_
% <android.net.wifi.WifiManager: int getFrequencyBand()> -> _SOURCE_
% <android.net.wifi.WifiManager: int getWifiApState()> -> _SOURCE_
% <android.net.wifi.WifiManager: int getWifiState()> -> _SOURCE_
% <android.net.wifi.WifiManager: java.lang.String getConfigFile()> -> _SOURCE_
% <android.net.wifi.WifiManager: java.util.List getConfiguredNetworks()> -> _SOURCE_
% <android.net.wifi.WifiManager: java.util.List getScanResults()> -> _SOURCE_

% <android.telephony.NeighboringCellInfo: int getCid()> -> _SOURCE_
% <android.telephony.NeighboringCellInfo: int getLac()> -> _SOURCE_
% <android.telephony.NeighboringCellInfo: int getNetworkType()> -> _SOURCE_
% <android.telephony.NeighboringCellInfo: int getPsc()> -> _SOURCE_
% <android.telephony.NeighboringCellInfo: int getRssi()> -> _SOURCE_
% <android.telephony.NeighboringCellInfo: java.lang.String toString()> -> _SOURCE_

% <android.telephony.ServiceState: java.lang.String getOperatorAlphaLong()> -> _SOURCE_
% <android.telephony.ServiceState: java.lang.String getOperatorAlphaShort()> -> _SOURCE_
% <android.telephony.ServiceState: java.lang.String getOperatorNumeric()> -> _SOURCE_
% <android.telephony.ServiceState: java.lang.String toString()> -> _SOURCE_

<android.telephony.TelephonyManager: int getCallState()> -> _SOURCE_
<android.telephony.TelephonyManager: int getCdmaEriIconIndex()> -> _SOURCE_
<android.telephony.TelephonyManager: int getCdmaEriIconMode()> -> _SOURCE_
<android.telephony.TelephonyManager: int getCurrentPhoneType()> -> _SOURCE_
<android.telephony.TelephonyManager: int getDataActivity()> -> _SOURCE_
<android.telephony.TelephonyManager: int getDataState()> -> _SOURCE_
<android.telephony.TelephonyManager: int getLteOnCdmaMode()> -> _SOURCE_
<android.telephony.TelephonyManager: int getNetworkClass(int)> -> _SOURCE_
<android.telephony.TelephonyManager: int getNetworkType()> -> _SOURCE_
<android.telephony.TelephonyManager: int getPhoneType()> -> _SOURCE_
<android.telephony.TelephonyManager: int getSimState()> -> _SOURCE_
<android.telephony.TelephonyManager: int getVoiceMessageCount()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getCdmaEriText()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getNetworkCountryIso()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getNetworkOperator()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getNetworkOperatorName()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getNetworkTypeName()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getNetworkTypeName(int)> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getSimCountryIso()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getSimOperator()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getSimOperatorName()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String[] getIsimImpu()> -> _SOURCE_
<android.telephony.TelephonyManager: java.util.List getNeighboringCellInfo()> -> _SOURCE_
<android.content.pm.PackageManager: java.util.List getInstalledApplications(int)> -> _SOURCE_

NP <android.content.pm.PackageManager: java.util.List getInstalledPackages(int)> -> _SOURCE_
NP <android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)> -> _SOURCE_
NP <android.content.pm.PackageManager: java.util.List queryContentProviders(java.lang.String,int,int)> -> _SOURCE_
NP <android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)> -> _SOURCE_
NP <android.content.pm.PackageManager: java.util.List queryIntentServices(android.content.Intent,int)> -> _SOURCE_

RECORD_AUDIO <android.media.AudioRecord: int read(byte[],int,int)> -> _SOURCE_
RECORD_AUDIO <android.media.AudioRecord: int read(java.nio.ByteBuffer,int)> -> _SOURCE_
RECORD_AUDIO <android.media.AudioRecord: int read(short[],int,int)> -> _SOURCE_

<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()> -> _SOURCE_
<java.io.FileOutputStream: java.nio.channels.FileChannel  getChannel()> -> _SOURCE_
<java.io.RandomAccessFile: java.nio.channels.FileChannel getChannel()> -> _SOURCE_
<android.content.ContentResolver: java.io.InputStream openInputStream(Uri)> -> _SOURCE_
<java.io.File: void <init>(java.net.URI)> -> _SOURCE_
<java.io.FileInputStream: void <init>(java.io.FileDescriptor)> -> _SOURCE_
<android.os.FileUtils: java.lang.String readTextFile(java.io.File,int,java.lang.String)> -> _SOURCE_

NP <android.hardware.SensorManager: float getAltitude(float,float)> -> _SOURCE_
NP <android.hardware.SensorManager: float getInclination(float[])> -> _SOURCE_
NP <android.hardware.SensorManager: float[] getOrientation(float[],float[])> -> _SOURCE_
NP <android.hardware.usb.UsbDevice: int getDeviceId()> -> _SOURCE_

% INTERNET <android.webkit.CookieManager: java.lang.String getCookie(android.net.WebAddress)> -> _SOURCE_
% INTERNET <android.webkit.CookieManager: java.lang.String getCookie(java.lang.String)> -> _SOURCE_
% INTERNET <android.webkit.CookieManager: java.lang.String getCookie(java.lang.String,boolean)> -> _SOURCE_

<android.content.ContentResolver: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SOURCE_
<android.content.ContentResolver: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,android.os.CancellationSignal)> -> _SOURCE_
<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SOURCE_
<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,android.os.CancellationSignal)> -> _SOURCE_

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

<android.telephony.SmsManager: void sendDataMessage(java.lang.String,java.lang.String,short,byte[],android.app.PendingIntent,android.app.PendingIntent)> -> _SINK_
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)> -> _SINK_

% <android.util.Log: int d(java.lang.String,java.lang.String)> -> _SINK_
% <android.util.Log: int d(java.lang.String,java.lang.String,java.lang.Throwable)> -> _SINK_
% <android.util.Log: int e(java.lang.String,java.lang.String)> -> _SINK_
% <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)> -> _SINK_
% <android.util.Log: int i(java.lang.String,java.lang.String)> -> _SINK_
% <android.util.Log: int i(java.lang.String,java.lang.String,java.lang.Throwable)> -> _SINK_
% <android.util.Log: int println(int,java.lang.String,java.lang.String)> -> _SINK_
% <android.util.Log: int v(java.lang.String,java.lang.String)> -> _SINK_
% <android.util.Log: int v(java.lang.String,java.lang.String,java.lang.Throwable)> -> _SINK_
% <android.util.Log: int w(java.lang.String,java.lang.String)> -> _SINK_
% <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)> -> _SINK_
% <android.util.Log: int w(java.lang.String,java.lang.Throwable)> -> _SINK_
% <android.util.Log: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)> -> _SINK_
% <android.util.Slog: int d(java.lang.String,java.lang.String)> -> _SINK_
% <android.util.Slog: int d(java.lang.String,java.lang.String,java.lang.Throwable)> -> _SINK_
% <android.util.Slog: int e(java.lang.String,java.lang.String)> -> _SINK_
% <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)> -> _SINK_
% <android.util.Slog: int i(java.lang.String,java.lang.String)> -> _SINK_
% <android.util.Slog: int i(java.lang.String,java.lang.String,java.lang.Throwable)> -> _SINK_
% <android.util.Slog: int println(int,java.lang.String,java.lang.String)> -> _SINK_
% <android.util.Slog: int v(java.lang.String,java.lang.String)> -> _SINK_
% <android.util.Slog: int v(java.lang.String,java.lang.String,java.lang.Throwable)> -> _SINK_
% <android.util.Slog: int w(java.lang.String,java.lang.String)> -> _SINK_
% <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)> -> _SINK_
% <android.util.Slog: int w(java.lang.String,java.lang.Throwable)> -> _SINK_
<android.accounts.AccountManager: boolean addAccountExplicitly(android.accounts.Account,java.lang.String,android.os.Bundle)> -> _SINK_
<android.accounts.IAccountManager$Stub$Proxy: boolean addAccount(android.accounts.Account,java.lang.String,android.os.Bundle)> -> _SINK_
<android.accounts.IAccountManager$Stub$Proxy: void addAcount(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String,java.lang.String[],boolean,android.os.Bundle)> -> _SINK_
<android.content.ContentProviderProxy: android.os.ParcelFileDescriptor openFile(android.net.Uri,java.lang.String)> -> _SINK_

<android.os.FileUtils: boolean copyToFile(java.io.InputStream,java.io.File)> -> _SINK_
<android.os.FileUtils: void stringToFile(java.lang.String,java.lang.String)> -> _SINK_
<java.io.FileOutputStream: void write(byte[],int,int)> -> _SINK_
<java.io.FileOutputStream: void write(int)> -> _SINK_
<java.io.RandomAccessFile: void write(byte[],int,int)> -> _SINK_

<java.lang.ProcessManager: java.lang.Process exec(java.lang.String[],java.lang.String[],java.io.File,boolean)> -> _SINK_

<android.net.ConnectivityManager: void setGlobalProxy(android.net.ProxyProperties)> -> _SINK_

<android.net.http.Headers: void setAcceptRanges(java.lang.String)> -> _SINK_
<android.net.http.Headers: void setCacheControl(java.lang.String)> -> _SINK_
<android.net.http.Headers: void setContentDisposition(java.lang.String)> -> _SINK_
<android.net.http.Headers: void setContentEncoding(java.lang.String)> -> _SINK_
<android.net.http.Headers: void setContentType(java.lang.String)> -> _SINK_
<android.net.http.Headers: void setEtag(java.lang.String)> -> _SINK_
<android.net.http.Headers: void setExpires(java.lang.String)> -> _SINK_
<android.net.http.Headers: void setLastModified(java.lang.String)> -> _SINK_
<android.net.http.Headers: void setLocation(java.lang.String)> -> _SINK_
<android.net.http.Headers: void setProxyAuthenticate(java.lang.String)> -> _SINK_
<android.net.http.Headers: void setWwwAuthenticate(java.lang.String)> -> _SINK_
<android.net.http.Headers: void setXPermittedCrossDomainPolicies(java.lang.String)> -> _SINK_
<android.net.LocalSocketImpl$SocketOutputStream: void write(byte[])> -> _SINK_

<android.net.http.HttpsConnection: android.net.http.AndroidHttpClientConnection openConnection(android.net.http.Request)> -> _SINK_
<android.net.http.RequestQueue: void queueRequest(android.net.http.Request,boolean)> -> _SINK_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest)> -> _SINK_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)> -> _SINK_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SINK_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.protocol.HttpContext)> -> _SINK_
<java.net.URL: java.io.InputStream openStream()> -> _SINK_
<java.net.URL: java.net.URLConnection openConnection()> -> _SINK_
<android.app.ContextImpl: FileOutputStream openFileOutput(java.lang.String,int)> -> _SINK_
<android.content.ContextWrapper: java.io.FileOutputStream openFileOutput(java.lang.String,int)> -> _SINK_
<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor open(java.io.File,int)> -> _SINK_
<java.io.FilterOutputStream: void write(byte[],int,int)> -> _SINK_
<java.io.FilterOutputStream: void write(int)> -> _SINK_
<android.telephony.SmsManager: void sendMultipartTextMessage(java.lang.String,java.lang.String,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList)> -> _SINK_
<android.telephony.SmsManager: void sendMultimediaMessage(android.content.Context,android.net.Uri,java.lang.String,android.os.Bundle,android.app.PendingIntent)> -> _SINK_
<java.io.PrintStream: java.io.PrintStream append(java.lang.CharSequence)> -> _SINK_
<java.io.CharArrayWriter: java.io.CharArrayWriter append(char)> -> _SINK_
<java.io.PrintWriter: java.io.Writer append(java.lang.CharSequence,int,int)> -> _SINK_
<java.io.FileWriter: java.io.Writer append(java.lang.CharSequence,int,int)> -> _SINK_
<java.io.OutputStreamWriter: java.io.Writer append(java.lang.CharSequence,int,int)> -> _SINK_
<java.io.BufferedWriter: java.io.Writer append(java.lang.CharSequence,int,int)> -> _SINK_
<android.util.LogWriter: java.io.Writer append(java.lang.CharSequence,int,int)> -> _SINK_
<java.io.StringWriter: java.io.Writer append(java.lang.CharSequence,int,int)> -> _SINK_
<java.io.FileOutputStream: void write(byte[])> -> _SINK_
<java.io.Writer: void write(char[])> -> _SINK_
<java.io.Writer: void write(java.lang.String)> -> _SINK_
<java.io.OutputStreamWriter: java.io.Writer append(java.lang.CharSequence)> -> _SINK_
<java.io.Writer: java.io.Writer append(java.lang.CharSequence)> -> _SINK_
<java.io.Writer: void write(char[],int,int)> -> _SINK_
<java.io.Writer: void write(int)> -> _SINK_
<java.io.Writer: void write(java.lang.String,int,int)> -> _SINK_
<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SINK_
<java.net.URLConnection: void setRequestProperty(java.lang.String,java.lang.String)> -> _SINK_
