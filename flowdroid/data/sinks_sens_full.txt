cat,api
ACCOUNT_SETTINGS,<android.accounts.AccountManager$AmsTask$Response: void onError(int,java.lang.String)>
ACCOUNT_SETTINGS,<android.accounts.AccountManager$AmsTask$Response: void onResult(android.os.Bundle)>
ACCOUNT_SETTINGS,<android.accounts.AccountManager$AmsTask: void set(android.os.Bundle)>
ACCOUNT_SETTINGS,<android.accounts.AccountManager$GetAuthTokenByTypeAndFeaturesTask$1: void run(android.accounts.AccountManagerFuture)>
ACCOUNT_SETTINGS,<android.accounts.AccountManager: android.content.Intent newChooseAccountIntent(android.accounts.Account,java.util.ArrayList,java.lang.String[],boolean,java.lang.String,java.lang.String,java.lang.String[],android.os.Bundle)>
ACCOUNT_SETTINGS,<android.accounts.AccountManager: boolean addAccountExplicitly(android.accounts.Account,java.lang.String,android.os.Bundle)>
ACCOUNT_SETTINGS,<android.accounts.IAccountManager$Stub$Proxy: boolean addAccount(android.accounts.Account,java.lang.String,android.os.Bundle)>
ACCOUNT_SETTINGS,<android.accounts.IAccountManager$Stub$Proxy: java.lang.String peekAuthToken(android.accounts.Account,java.lang.String)>
ACCOUNT_SETTINGS,<android.accounts.IAccountManager$Stub$Proxy: void addAcount(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String,java.lang.String[],boolean,android.os.Bundle)>
ACCOUNT_SETTINGS,<android.accounts.IAccountManager$Stub$Proxy: void editProperties(android.accounts.IAccountManagerResponse,java.lang.String,boolean)>
ACCOUNT_SETTINGS,<android.accounts.IAccountManager$Stub$Proxy: void getAccountsByFeatures(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String[])>
ACCOUNT_SETTINGS,<android.accounts.IAccountManager$Stub$Proxy: void getAuthToken(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String,boolean,boolean,android.os.Bundle)>
ACCOUNT_SETTINGS,<android.accounts.IAccountManager$Stub$Proxy: void hasFeatures(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String[])>
ACCOUNT_SETTINGS,<android.accounts.IAccountManager$Stub$Proxy: void invalidateAuthToken(java.lang.String,java.lang.String)>
ACCOUNT_SETTINGS,<android.accounts.IAccountManager$Stub$Proxy: void removeAccount(android.accounts.IAccountManagerResponse,android.accounts.Account)>
ACCOUNT_SETTINGS,<android.accounts.IAccountManager$Stub$Proxy: void setAuthToken(android.accounts.Account,java.lang.String,java.lang.String)>
ACCOUNT_SETTINGS,<android.accounts.IAccountManager$Stub$Proxy: void setPassword(android.accounts.Account,java.lang.String)>
ACCOUNT_SETTINGS,<android.accounts.IAccountManager$Stub$Proxy: void setUserData(android.accounts.Account,java.lang.String,java.lang.String)>
ACCOUNT_SETTINGS,<android.accounts.IAccountManager$Stub$Proxy: void updateCredentials(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String,boolean,android.os.Bundle)>
ACCOUNT_SETTINGS,<android.accounts.IAccountManagerResponse$Stub$Proxy: void onError(int,java.lang.String)>
ACCOUNT_SETTINGS,<android.content.ContextWrapper: void setWallpaper(java.io.InputStream)>
CONTACT_INFORMATION,<android.provider.Contacts$ContactMethods: void addPostalLocation(android.content.Context,long,double,double)>
CONTACT_INFORMATION,<android.provider.Contacts$People: void setPhotoData(android.content.ContentResolver,android.net.Uri,byte[])>
CONTACT_INFORMATION,<android.provider.Contacts$Settings: void setSetting(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String)>
CONTACT_INFORMATION,<android.provider.ContactsContract$ProfileSyncState: void set(android.content.ContentProviderClient,android.accounts.Account,byte[])>
CONTACT_INFORMATION,<android.provider.ContactsContract$SyncState: void set(android.content.ContentProviderClient,android.accounts.Account,byte[])>
CONTACT_INFORMATION,<android.widget.QuickContactBadge: void setMode(int)>
CONTACT_INFORMATION,<gov.nist.javax.sip.header.Contact: void setExpires(int)>
CONTACT_INFORMATION,<gov.nist.javax.sip.header.Contact: void setParameter(java.lang.String,java.lang.String)>
CONTACT_INFORMATION,<gov.nist.javax.sip.header.Contact: void setPubGruuParam(java.lang.String)>
CONTACT_INFORMATION,<gov.nist.javax.sip.header.Contact: void setQValue(float)>
CONTACT_INFORMATION,<gov.nist.javax.sip.header.Contact: void setSipInstanceParam(java.lang.String)>
CONTACT_INFORMATION,<gov.nist.javax.sip.header.Contact: void setTempGruuParam(java.lang.String)>
CONTACT_INFORMATION,<gov.nist.javax.sip.header.Contact: void setWildCardFlag(boolean)>
FILE,<android.app.ActivityThread$ApplicationThread: void dumpActivity(java.io.FileDescriptor,android.os.IBinder,java.lang.String,java.lang.String[])>
FILE,<android.app.ActivityThread$ApplicationThread: void dumpGfxInfo(java.io.FileDescriptor,java.lang.String[])>
FILE,<android.app.ActivityThread$ApplicationThread: void dumpService(java.io.FileDescriptor,android.os.IBinder,java.lang.String[])>
FILE,<android.app.ApplicationThreadProxy: void dumpActivity(java.io.FileDescriptor,android.os.IBinder,java.lang.String,java.lang.String[])>
FILE,<android.app.ApplicationThreadProxy: void dumpGfxInfo(java.io.FileDescriptor,java.lang.String[])>
FILE,<android.app.ApplicationThreadProxy: void dumpService(java.io.FileDescriptor,android.os.IBinder,java.lang.String[])>
FILE,<android.app.BackStackRecord: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
FILE,<android.app.DialogFragment: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
FILE,<android.app.DownloadManager: android.os.ParcelFileDescriptor openDownloadedFile(long)>
FILE,<android.app.Fragment: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
FILE,<android.app.FragmentManagerImpl: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
FILE,<android.app.LoaderManagerImpl$LoaderInfo: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
FILE,<android.app.LoaderManagerImpl: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
FILE,<android.app.Service: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
FILE,<android.app.backup.BackupAgent: void onRestoreFile(android.os.ParcelFileDescriptor,long,java.io.File,int,long,long)>
FILE,<android.app.backup.FullBackup: void restoreFile(android.os.ParcelFileDescriptor,long,int,long,long,java.io.File)>
FILE,<android.content.AsyncTaskLoader: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
FILE,<android.content.ContentProviderProxy: android.content.res.AssetFileDescriptor openAssetFile(android.net.Uri,java.lang.String)>
FILE,<android.content.ContentProviderProxy: android.content.res.AssetFileDescriptor openTypedAssetFile(android.net.Uri,java.lang.String,android.os.Bundle)>
FILE,<android.content.ContentProviderProxy: android.os.ParcelFileDescriptor openFile(android.net.Uri,java.lang.String)>
FILE,<android.content.Loader: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
FILE,<android.content.SyncManager: void dump(java.io.FileDescriptor,java.io.PrintWriter)>
FILE,<android.inputmethodservice.AbstractInputMethodService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
FILE,<android.inputmethodservice.IInputMethodWrapper: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
FILE,<android.inputmethodservice.IInputMethodWrapper: void executeMessage(android.os.Message)>
FILE,<android.inputmethodservice.InputMethodService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
FILE,<android.media.MediaMetadataRetriever: void setDataSource(java.io.FileDescriptor)>
FILE,<android.media.MediaRecorder: void setAuxiliaryOutputFile(java.io.FileDescriptor)>
FILE,<android.media.MediaRecorder: void setOutputFile(java.io.FileDescriptor)>
FILE,<android.net.LocalSocket: void setFileDescriptorsForSend(java.io.FileDescriptor[])>
FILE,<android.net.LocalSocketImpl: void bind(android.net.LocalSocketAddress)>
FILE,<android.net.LocalSocketImpl: void setFileDescriptorsForSend(java.io.FileDescriptor[])>
FILE,<android.net.LocalSocketImpl: void setOption(int,java.lang.Object)>
FILE,<android.os.Binder: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
FILE,<android.os.Binder: void dump(java.io.FileDescriptor,java.lang.String[])>
FILE,<android.os.Debug: boolean dumpService(java.lang.String,java.io.FileDescriptor,java.lang.String[])>
FILE,<android.os.Debug: void dumpHprofData(java.lang.String,java.io.FileDescriptor)>
FILE,<android.os.Debug: void startMethodTracing(java.lang.String,java.io.FileDescriptor,int,int)>
FILE,<android.os.DropBoxManager: void addFile(java.lang.String,java.io.File,int)>
FILE,<android.os.FileUtils: boolean copyToFile(java.io.InputStream,java.io.File)>
FILE,<android.os.FileUtils: java.lang.String readTextFile(java.io.File,int,java.lang.String)>
FILE,<android.os.FileUtils: void stringToFile(java.lang.String,java.lang.String)>
FILE,<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor fromData(byte[],java.lang.String)>
FILE,<android.os.storage.StorageVolume: void writeToParcel(android.os.Parcel,int)>
FILE,<android.view.inputmethod.InputMethodManager: void doDump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
FILE,<dalvik.system.VMDebug: void startMethodTracing(java.lang.String,int,int)>
FILE,<dalvik.system.VMDebug: void startMethodTracing(java.lang.String,java.io.FileDescriptor,int,int)>
FILE,<java.io.FileOutputStream: void write(byte[],int,int)>
FILE,<java.io.FileOutputStream: void write(int)>
FILE,<java.io.RandomAccessFile: void write(byte[],int,int)>
FILE,<java.lang.ProcessManager: java.lang.Process exec(java.lang.String[],java.lang.String[],java.io.File,boolean)>
FILE,<java.lang.SecurityManager: void checkRead(java.io.FileDescriptor)>
FILE,<java.lang.SecurityManager: void checkWrite(java.io.FileDescriptor)>
FILE,<java.net.DatagramSocket: void setNetworkInterface(java.net.NetworkInterface)>
FILE,<java.net.PlainDatagramSocketImpl: void bind(int,java.net.InetAddress)>
FILE,<java.net.PlainDatagramSocketImpl: void send(java.net.DatagramPacket)>
FILE,<java.net.PlainDatagramSocketImpl: void setOption(int,java.lang.Object)>
FILE,<java.net.PlainSocketImpl: void bind(java.net.InetAddress,int)>
FILE,<java.net.PlainSocketImpl: void setOption(int,java.lang.Object)>
FILE,<java.nio.DatagramChannelImpl: int send(java.nio.ByteBuffer,java.net.SocketAddress)>
FILE,<java.nio.IoVec: int doTransfer(java.io.FileDescriptor)>
FILE,<java.util.zip.Inflater: int setFileInput(java.io.FileDescriptor,long,int)>
FILE,<libcore.io.BlockGuardOs: int sendto(java.io.FileDescriptor,byte[],int,int,int,java.net.InetAddress,int)>
FILE,<libcore.io.BlockGuardOs: int sendto(java.io.FileDescriptor,java.nio.ByteBuffer,int,java.net.InetAddress,int)>
FILE,<libcore.io.BlockGuardOs: int write(java.io.FileDescriptor,byte[],int,int)>
FILE,<libcore.io.BlockGuardOs: int write(java.io.FileDescriptor,java.nio.ByteBuffer)>
FILE,<libcore.io.BlockGuardOs: int writev(java.io.FileDescriptor,java.lang.Object[],int[],int[])>
FILE,<libcore.io.BlockGuardOs: java.io.FileDescriptor open(java.lang.String,int,int)>
FILE,<libcore.io.ForwardingOs: int sendto(java.io.FileDescriptor,byte[],int,int,int,java.net.InetAddress,int)>
FILE,<libcore.io.ForwardingOs: int sendto(java.io.FileDescriptor,java.nio.ByteBuffer,int,java.net.InetAddress,int)>
FILE,<libcore.io.ForwardingOs: int write(java.io.FileDescriptor,byte[],int,int)>
FILE,<libcore.io.ForwardingOs: int write(java.io.FileDescriptor,java.nio.ByteBuffer)>
FILE,<libcore.io.ForwardingOs: int writev(java.io.FileDescriptor,java.lang.Object[],int[],int[])>
FILE,<libcore.io.ForwardingOs: java.io.FileDescriptor open(java.lang.String,int,int)>
FILE,<libcore.io.ForwardingOs: long sendfile(java.io.FileDescriptor,java.io.FileDescriptor,libcore.util.MutableLong,long)>
FILE,<libcore.io.ForwardingOs: void bind(java.io.FileDescriptor,java.net.InetAddress,int)>
FILE,<libcore.io.ForwardingOs: void setsockoptByte(java.io.FileDescriptor,int,int,int)>
FILE,<libcore.io.ForwardingOs: void setsockoptGroupReq(java.io.FileDescriptor,int,int,libcore.io.StructGroupReq)>
FILE,<libcore.io.ForwardingOs: void setsockoptIfreq(java.io.FileDescriptor,int,int,java.lang.String)>
FILE,<libcore.io.ForwardingOs: void setsockoptInt(java.io.FileDescriptor,int,int,int)>
FILE,<libcore.io.ForwardingOs: void setsockoptIpMreqn(java.io.FileDescriptor,int,int,int)>
FILE,<libcore.io.ForwardingOs: void setsockoptLinger(java.io.FileDescriptor,int,int,libcore.io.StructLinger)>
FILE,<libcore.io.ForwardingOs: void setsockoptTimeval(java.io.FileDescriptor,int,int,libcore.io.StructTimeval)>
FILE,<libcore.io.IoBridge: int sendto(java.io.FileDescriptor,byte[],int,int,int,java.net.InetAddress,int)>
FILE,<libcore.io.IoBridge: int sendto(java.io.FileDescriptor,java.nio.ByteBuffer,int,java.net.InetAddress,int)>
FILE,<libcore.io.IoBridge: void bind(java.io.FileDescriptor,java.net.InetAddress,int)>
FILE,<libcore.io.IoBridge: void setSocketOption(java.io.FileDescriptor,int,java.lang.Object)>
FILE,<libcore.io.IoBridge: void write(java.io.FileDescriptor,byte[],int,int)>
FILE,<libcore.io.IoUtils: void setBlocking(java.io.FileDescriptor,boolean)>
FILE,<libcore.io.Posix: int sendto(java.io.FileDescriptor,byte[],int,int,int,java.net.InetAddress,int)>
FILE,<libcore.io.Posix: int sendto(java.io.FileDescriptor,java.nio.ByteBuffer,int,java.net.InetAddress,int)>
FILE,<libcore.io.Posix: int write(java.io.FileDescriptor,byte[],int,int)>
FILE,<libcore.io.Posix: int write(java.io.FileDescriptor,java.nio.ByteBuffer)>
LOCATION_INFORMATION,<android.location.ILocationManager$Stub$Proxy: boolean addGpsStatusListener(android.location.IGpsStatusListener)>
LOCATION_INFORMATION,<android.location.ILocationManager$Stub$Proxy: boolean isProviderEnabled(java.lang.String)>
LOCATION_INFORMATION,<android.location.ILocationManager$Stub$Proxy: boolean providerMeetsCriteria(java.lang.String,android.location.Criteria)>
LOCATION_INFORMATION,<android.location.ILocationManager$Stub$Proxy: boolean sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)>
LOCATION_INFORMATION,<android.location.ILocationManager$Stub$Proxy: boolean sendNiResponse(int,int)>
LOCATION_INFORMATION,<android.location.ILocationManager$Stub$Proxy: void clearTestProviderEnabled(java.lang.String)>
LOCATION_INFORMATION,<android.location.ILocationManager$Stub$Proxy: void clearTestProviderLocation(java.lang.String)>
LOCATION_INFORMATION,<android.location.ILocationManager$Stub$Proxy: void clearTestProviderStatus(java.lang.String)>
LOCATION_INFORMATION,<android.location.ILocationManager$Stub$Proxy: void locationCallbackFinished(android.location.ILocationListener)>
LOCATION_INFORMATION,<android.location.ILocationManager$Stub$Proxy: void removeGpsStatusListener(android.location.IGpsStatusListener)>
LOCATION_INFORMATION,<android.location.ILocationManager$Stub$Proxy: void removeTestProvider(java.lang.String)>
LOCATION_INFORMATION,<android.location.ILocationManager$Stub$Proxy: void setTestProviderEnabled(java.lang.String,boolean)>
LOCATION_INFORMATION,<android.location.ILocationManager$Stub$Proxy: void setTestProviderLocation(java.lang.String,android.location.Location)>
LOCATION_INFORMATION,<android.location.ILocationManager$Stub$Proxy: void setTestProviderStatus(java.lang.String,int,android.os.Bundle,long)>
LOCATION_INFORMATION,<android.location.LocationManager: boolean sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)>
LOCATION_INFORMATION,<android.location.LocationManager: boolean sendNiResponse(int,int)>
LOCATION_INFORMATION,<android.location.LocationManager: void setTestProviderEnabled(java.lang.String,boolean)>
LOCATION_INFORMATION,<android.location.LocationManager: void setTestProviderLocation(java.lang.String,android.location.Location)>
LOCATION_INFORMATION,<android.location.LocationManager: void setTestProviderStatus(java.lang.String,int,android.os.Bundle,long)>
LOG,<android.animation.PropertyValuesHolder$FloatPropertyValuesHolder: void setAnimatedValue(java.lang.Object)>
LOG,<android.animation.PropertyValuesHolder$IntPropertyValuesHolder: void setAnimatedValue(java.lang.Object)>
LOG,<android.animation.PropertyValuesHolder: void setAnimatedValue(java.lang.Object)>
LOG,<android.animation.PropertyValuesHolder: void setupSetterAndGetter(java.lang.Object)>
LOG,<android.app.FragmentManagerImpl: void setBackStackIndex(int,android.app.BackStackRecord)>
LOG,<android.app.LocalActivityManager: void dispatchCreate(android.os.Bundle)>
LOG,<android.app.SearchManager: void startGlobalSearch(java.lang.String,boolean,android.os.Bundle,android.graphics.Rect)>
LOG,<android.app.Service: void setForeground(boolean)>
LOG,<android.app.UiModeManager: void enableCarMode(int)>
LOG,<android.app.UiModeManager: void setNightMode(int)>
LOG,<android.app.WallpaperManager: void setBitmap(android.graphics.Bitmap)>
LOG,<android.app.WallpaperManager: void setResource(int)>
LOG,<android.app.WallpaperManager: void setStream(java.io.InputStream)>
LOG,<android.app.admin.DevicePolicyManager: int setStorageEncryption(android.content.ComponentName,boolean)>
LOG,<android.app.admin.DevicePolicyManager: void setActiveAdmin(android.content.ComponentName,boolean)>
LOG,<android.app.admin.DevicePolicyManager: void setCameraDisabled(android.content.ComponentName,boolean)>
LOG,<android.app.admin.DevicePolicyManager: void setMaximumFailedPasswordsForWipe(android.content.ComponentName,int)>
LOG,<android.app.admin.DevicePolicyManager: void setMaximumTimeToLock(android.content.ComponentName,long)>
LOG,<android.app.admin.DevicePolicyManager: void setPasswordExpirationTimeout(android.content.ComponentName,long)>
LOG,<android.app.admin.DevicePolicyManager: void setPasswordHistoryLength(android.content.ComponentName,int)>
LOG,<android.app.admin.DevicePolicyManager: void setPasswordMinimumLength(android.content.ComponentName,int)>
LOG,<android.app.admin.DevicePolicyManager: void setPasswordMinimumLetters(android.content.ComponentName,int)>
LOG,<android.app.admin.DevicePolicyManager: void setPasswordMinimumLowerCase(android.content.ComponentName,int)>
LOG,<android.app.admin.DevicePolicyManager: void setPasswordMinimumNonLetter(android.content.ComponentName,int)>
LOG,<android.app.admin.DevicePolicyManager: void setPasswordMinimumNumeric(android.content.ComponentName,int)>
LOG,<android.app.admin.DevicePolicyManager: void setPasswordMinimumSymbols(android.content.ComponentName,int)>
LOG,<android.app.admin.DevicePolicyManager: void setPasswordMinimumUpperCase(android.content.ComponentName,int)>
LOG,<android.app.admin.DevicePolicyManager: void setPasswordQuality(android.content.ComponentName,int)>
LOG,<android.app.backup.BackupHelperDispatcher: void performRestore(android.app.backup.BackupDataInput,int,android.os.ParcelFileDescriptor)>
LOG,<android.app.backup.RestoreSession: int restorePackage(java.lang.String,android.app.backup.RestoreObserver)>
LOG,<android.app.backup.RestoreSession: int restoreSome(long,android.app.backup.RestoreObserver,java.lang.String[])>
LOG,<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>
LOG,<android.hardware.usb.UsbManager: void setCurrentFunction(java.lang.String,boolean)>
LOG,<android.hardware.usb.UsbManager: void setMassStorageBackingFile(java.lang.String)>
LOG,<android.media.MediaPlayer: void setSurface(android.view.Surface)>
LOG,<android.media.MediaRecorder: void setAuxiliaryOutputFile(java.lang.String)>
LOG,<android.media.MiniThumbFile: void saveMiniThumbToFile(byte[],long,long)>
LOG,<android.net.sip.SipAudioCall: void sendDtmf(int,android.os.Message)>
LOG,<android.os.StrictMode: void onVmPolicyViolation(java.lang.String,java.lang.Throwable)>
LOG,<android.provider.Browser: void updateVisitedHistory(android.content.ContentResolver,java.lang.String,boolean)>
LOG,<android.provider.DrmStore: android.content.Intent addDrmFile(android.content.ContentResolver,java.io.FileInputStream,java.lang.String)>
LOG,<android.security.Credentials: void install(android.content.Context,java.lang.String,byte[])>
LOG,<android.security.Credentials: void install(android.content.Context,java.security.KeyPair)>
LOG,<android.support.v4.content.LocalBroadcastManager: boolean sendBroadcast(android.content.Intent)>
LOG,<android.test.InstrumentationTestCase: void sendKeys(java.lang.String)>
LOG,<android.util.Log: int d(java.lang.String,java.lang.String)>
LOG,<android.util.Log: int d(java.lang.String,java.lang.String,java.lang.Throwable)>
LOG,<android.util.Log: int e(java.lang.String,java.lang.String)>
LOG,<android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>
LOG,<android.util.Log: int i(java.lang.String,java.lang.String)>
LOG,<android.util.Log: int i(java.lang.String,java.lang.String,java.lang.Throwable)>
LOG,<android.util.Log: int println(int,java.lang.String,java.lang.String)>
LOG,<android.util.Log: int v(java.lang.String,java.lang.String)>
LOG,<android.util.Log: int v(java.lang.String,java.lang.String,java.lang.Throwable)>
LOG,<android.util.Log: int w(java.lang.String,java.lang.String)>
LOG,<android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>
LOG,<android.util.Log: int w(java.lang.String,java.lang.Throwable)>
LOG,<android.util.Log: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>
LOG,<android.util.Slog: int d(java.lang.String,java.lang.String)>
LOG,<android.util.Slog: int d(java.lang.String,java.lang.String,java.lang.Throwable)>
LOG,<android.util.Slog: int e(java.lang.String,java.lang.String)>
LOG,<android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>
LOG,<android.util.Slog: int i(java.lang.String,java.lang.String)>
LOG,<android.util.Slog: int i(java.lang.String,java.lang.String,java.lang.Throwable)>
LOG,<android.util.Slog: int println(int,java.lang.String,java.lang.String)>
LOG,<android.util.Slog: int v(java.lang.String,java.lang.String)>
LOG,<android.util.Slog: int v(java.lang.String,java.lang.String,java.lang.Throwable)>
LOG,<android.util.Slog: int w(java.lang.String,java.lang.String)>
LOG,<android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>
LOG,<android.util.Slog: int w(java.lang.String,java.lang.Throwable)>
LOG,<android.view.accessibility.AccessibilityManager: void sendAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>
LOG,<android.view.inputmethod.InputMethodManager: boolean setCurrentInputMethodSubtype(android.view.inputmethod.InputMethodSubtype)>
LOG,<android.view.inputmethod.InputMethodManager: void sendAppPrivateCommand(android.view.View,java.lang.String,android.os.Bundle)>
LOG,<android.view.inputmethod.InputMethodManager: void setAdditionalInputMethodSubtypes(java.lang.String,android.view.inputmethod.InputMethodSubtype[])>
LOG,<android.view.inputmethod.InputMethodManager: void updateCursor(android.view.View,int,int,int,int)>
LOG,<android.view.inputmethod.InputMethodManager: void updateSelection(android.view.View,int,int,int,int)>
LOG,<android.widget.RemoteViewsAdapter$RemoteViewsAdapterServiceConnection: void bind(android.content.Context,int,android.content.Intent)>
NETWORK,<android.net.ConnectivityManager: boolean setRadio(int,boolean)>
NETWORK,<android.net.ConnectivityManager: boolean setRadios(boolean)>
NETWORK,<android.net.ConnectivityManager: int setUsbTethering(boolean)>
NETWORK,<android.net.ConnectivityManager: int startUsingNetworkFeature(int,java.lang.String)>
NETWORK,<android.net.ConnectivityManager: void setBackgroundDataSetting(boolean)>
NETWORK,<android.net.ConnectivityManager: void setDataDependency(int,boolean)>
NETWORK,<android.net.ConnectivityManager: void setGlobalProxy(android.net.ProxyProperties)>
NETWORK,<android.net.ConnectivityManager: void setMobileDataEnabled(boolean)>
NETWORK,<android.net.ConnectivityManager: void setNetworkPreference(int)>
NETWORK,<android.net.IConnectivityManager$Stub$Proxy: boolean prepareVpn(java.lang.String,java.lang.String)>
NETWORK,<android.net.IConnectivityManager$Stub$Proxy: boolean requestRouteToHost(int,int)>
NETWORK,<android.net.IConnectivityManager$Stub$Proxy: boolean requestRouteToHostAddress(int,byte[])>
NETWORK,<android.net.IConnectivityManager$Stub$Proxy: boolean setRadio(int,boolean)>
NETWORK,<android.net.IConnectivityManager$Stub$Proxy: boolean setRadios(boolean)>
NETWORK,<android.net.IConnectivityManager$Stub$Proxy: int setUsbTethering(boolean)>
NETWORK,<android.net.IConnectivityManager$Stub$Proxy: int startUsingNetworkFeature(int,java.lang.String,android.os.IBinder)>
NETWORK,<android.net.IConnectivityManager$Stub$Proxy: int stopUsingNetworkFeature(int,java.lang.String)>
NETWORK,<android.net.IConnectivityManager$Stub$Proxy: int tether(java.lang.String)>
NETWORK,<android.net.IConnectivityManager$Stub$Proxy: int untether(java.lang.String)>
NETWORK,<android.net.IConnectivityManager$Stub$Proxy: void reportInetCondition(int,int)>
NETWORK,<android.net.IConnectivityManager$Stub$Proxy: void requestNetworkTransitionWakelock(java.lang.String)>
NETWORK,<android.net.IConnectivityManager$Stub$Proxy: void setDataDependency(int,boolean)>
NETWORK,<android.net.IConnectivityManager$Stub$Proxy: void setGlobalProxy(android.net.ProxyProperties)>
NETWORK,<android.net.IConnectivityManager$Stub$Proxy: void setMobileDataEnabled(boolean)>
NETWORK,<android.net.IConnectivityManager$Stub$Proxy: void setNetworkPreference(int)>
NETWORK,<android.net.IConnectivityManager$Stub$Proxy: void setPolicyDataEnable(int,boolean)>
NETWORK,<android.net.INetworkPolicyListener$Stub$Proxy: void onMeteredIfacesChanged(java.lang.String[])>
NETWORK,<android.net.INetworkPolicyListener$Stub$Proxy: void onUidRulesChanged(int,int)>
NETWORK,<android.net.INetworkPolicyManager$Stub$Proxy: void registerListener(android.net.INetworkPolicyListener)>
NETWORK,<android.net.INetworkPolicyManager$Stub$Proxy: void setNetworkPolicies(android.net.NetworkPolicy[])>
NETWORK,<android.net.INetworkPolicyManager$Stub$Proxy: void setRestrictBackground(boolean)>
NETWORK,<android.net.INetworkPolicyManager$Stub$Proxy: void setUidPolicy(int,int)>
NETWORK,<android.net.INetworkPolicyManager$Stub$Proxy: void unregisterListener(android.net.INetworkPolicyListener)>
NETWORK,<android.net.INetworkStatsService$Stub$Proxy: void incrementOperationCount(int,int,int)>
NETWORK,<android.net.INetworkStatsService$Stub$Proxy: void setUidForeground(int,boolean)>
NETWORK,<android.net.LinkCapabilities: void put(int,java.lang.String)>
NETWORK,<android.net.LinkProperties: void writeToParcel(android.os.Parcel,int)>
NETWORK,<android.net.LocalSocket: void setReceiveBufferSize(int)>
NETWORK,<android.net.LocalSocket: void setSendBufferSize(int)>
NETWORK,<android.net.LocalSocket: void setSoTimeout(int)>
NETWORK,<android.net.LocalSocketImpl$SocketOutputStream: void write(byte[])>
NETWORK,<android.net.NetworkPolicy: void writeToParcel(android.os.Parcel,int)>
NETWORK,<android.net.NetworkPolicyManager: void setNetworkPolicies(android.net.NetworkPolicy[])>
NETWORK,<android.net.NetworkPolicyManager: void setUidPolicy(int,int)>
NETWORK,<android.net.NetworkState: void writeToParcel(android.os.Parcel,int)>
NETWORK,<android.net.NetworkStats: void dump(java.lang.String,java.io.PrintWriter)>
NETWORK,<android.net.NetworkStatsHistory$DataStreamUtils: void writeVarLong(java.io.DataOutputStream,long)>
NETWORK,<android.net.NetworkStatsHistory$DataStreamUtils: void writeVarLongArray(java.io.DataOutputStream,long[],int)>
NETWORK,<android.net.NetworkStatsHistory$ParcelUtils: void writeLongArray(android.os.Parcel,long[],int)>
NETWORK,<android.net.NetworkStatsHistory: void writeToParcel(android.os.Parcel,int)>
NETWORK,<android.net.NetworkStatsHistory: void writeToStream(java.io.DataOutputStream)>
NETWORK,<android.net.Proxy: void setHttpProxySystemProperty(java.lang.String,java.lang.String,java.lang.String)>
NETWORK,<android.net.TrafficStats: void setThreadStatsUid(int)>
NETWORK,<android.net.Uri$HierarchicalUri: void writeToParcel(android.os.Parcel,int)>
NETWORK,<android.net.Uri$OpaqueUri: void writeToParcel(android.os.Parcel,int)>
NETWORK,<android.net.http.AndroidHttpClientConnection: void setSocketTimeout(int)>
NETWORK,<android.net.http.Headers: void setAcceptRanges(java.lang.String)>
NETWORK,<android.net.http.Headers: void setCacheControl(java.lang.String)>
NETWORK,<android.net.http.Headers: void setContentDisposition(java.lang.String)>
NETWORK,<android.net.http.Headers: void setContentEncoding(java.lang.String)>
NETWORK,<android.net.http.Headers: void setContentType(java.lang.String)>
NETWORK,<android.net.http.Headers: void setEtag(java.lang.String)>
NETWORK,<android.net.http.Headers: void setExpires(java.lang.String)>
NETWORK,<android.net.http.Headers: void setLastModified(java.lang.String)>
NETWORK,<android.net.http.Headers: void setLocation(java.lang.String)>
NETWORK,<android.net.http.Headers: void setProxyAuthenticate(java.lang.String)>
NETWORK,<android.net.http.Headers: void setWwwAuthenticate(java.lang.String)>
NETWORK,<android.net.http.Headers: void setXPermittedCrossDomainPolicies(java.lang.String)>
NETWORK,<android.net.http.HttpsConnection: android.net.http.AndroidHttpClientConnection openConnection(android.net.http.Request)>
NETWORK,<android.net.http.RequestHandle: boolean setupRedirect(java.lang.String,int,java.util.Map)>
NETWORK,<android.net.http.RequestHandle: void setupBasicAuthResponse(boolean,java.lang.String,java.lang.String)>
NETWORK,<android.net.http.RequestHandle: void setupDigestAuthResponse(boolean,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
NETWORK,<android.net.http.RequestQueue: void queueRequest(android.net.http.Request,boolean)>
NETWORK,<android.net.http.SslCertificate: android.os.Bundle saveState(android.net.http.SslCertificate)>
NETWORK,<android.net.rtp.AudioGroup: void sendDtmf(int)>
NETWORK,<android.net.sip.ISipService$Stub$Proxy: boolean isRegistered(java.lang.String)>
NETWORK,<android.net.sip.ISipService$Stub$Proxy: void close(java.lang.String)>
NETWORK,<android.net.sip.ISipSession$Stub$Proxy: void answerCall(java.lang.String,int)>
NETWORK,<android.net.sip.ISipSession$Stub$Proxy: void changeCall(java.lang.String,int)>
NETWORK,<android.net.sip.ISipSession$Stub$Proxy: void register(int)>
NETWORK,<android.net.sip.SimpleSessionDescription$Fields: void setAddress(java.lang.String)>
NETWORK,<android.net.sip.SimpleSessionDescription$Fields: void setAttribute(java.lang.String,java.lang.String)>
NETWORK,<android.net.sip.SimpleSessionDescription$Fields: void setBandwidth(java.lang.String,int)>
NETWORK,<android.net.sip.SimpleSessionDescription$Fields: void setEncryption(java.lang.String,java.lang.String)>
NETWORK,<android.net.sip.SimpleSessionDescription$Media: void setFormat(java.lang.String,java.lang.String)>
NETWORK,<android.net.sip.SimpleSessionDescription$Media: void setRtpPayload(int,java.lang.String,java.lang.String)>
NETWORK,<android.net.sip.SimpleSessionDescription: void setAddress(java.lang.String)>
NETWORK,<android.net.sip.SimpleSessionDescription: void setAttribute(java.lang.String,java.lang.String)>
NETWORK,<android.net.sip.SimpleSessionDescription: void setBandwidth(java.lang.String,int)>
NETWORK,<android.net.sip.SimpleSessionDescription: void setEncryption(java.lang.String,java.lang.String)>
NETWORK,<android.net.sip.SipAudioCall: void sendDtmf(int)>
NETWORK,<android.net.sip.SipAudioCall: void setSpeakerMode(boolean)>
NETWORK,<android.net.sip.SipManager: android.content.Intent createIncomingCallBroadcast(java.lang.String,java.lang.String)>
NETWORK,<android.net.wifi.IWifiManager$Stub$Proxy: boolean acquireWifiLock(android.os.IBinder,int,java.lang.String,android.os.WorkSource)>
NETWORK,<android.net.wifi.IWifiManager$Stub$Proxy: boolean disableNetwork(int)>
NETWORK,<android.net.wifi.IWifiManager$Stub$Proxy: boolean enableNetwork(int,boolean)>
NETWORK,<android.net.wifi.IWifiManager$Stub$Proxy: boolean releaseWifiLock(android.os.IBinder)>
NETWORK,<android.net.wifi.IWifiManager$Stub$Proxy: boolean removeNetwork(int)>
NETWORK,<android.net.wifi.IWifiManager$Stub$Proxy: boolean setWifiEnabled(boolean)>
NETWORK,<android.net.wifi.IWifiManager$Stub$Proxy: void acquireMulticastLock(android.os.IBinder,java.lang.String)>
NETWORK,<android.net.wifi.IWifiManager$Stub$Proxy: void addToBlacklist(java.lang.String)>
NETWORK,<android.net.wifi.IWifiManager$Stub$Proxy: void setCountryCode(java.lang.String,boolean)>
NETWORK,<android.net.wifi.IWifiManager$Stub$Proxy: void setFrequencyBand(int,boolean)>
NETWORK,<android.net.wifi.IWifiManager$Stub$Proxy: void setWifiApConfiguration(android.net.wifi.WifiConfiguration)>
NETWORK,<android.net.wifi.IWifiManager$Stub$Proxy: void setWifiApEnabled(android.net.wifi.WifiConfiguration,boolean)>
NETWORK,<android.net.wifi.IWifiManager$Stub$Proxy: void updateWifiLockWorkSource(android.os.IBinder,android.os.WorkSource)>
NETWORK,<android.net.wifi.ScanResult: void writeToParcel(android.os.Parcel,int)>
NETWORK,<android.net.wifi.WifiConfiguration: void writeToParcel(android.os.Parcel,int)>
NETWORK,<android.net.wifi.WifiInfo: void setSupplicantState(java.lang.String)>
NETWORK,<android.net.wifi.WifiInfo: void writeToParcel(android.os.Parcel,int)>
NETWORK,<android.net.wifi.WifiManager$WifiLock: void setWorkSource(android.os.WorkSource)>
NETWORK,<android.net.wifi.WifiManager: boolean setWifiApConfiguration(android.net.wifi.WifiConfiguration)>
NETWORK,<android.net.wifi.WifiManager: boolean setWifiApEnabled(android.net.wifi.WifiConfiguration,boolean)>
NETWORK,<android.net.wifi.WifiManager: boolean setWifiEnabled(boolean)>
NETWORK,<android.net.wifi.WifiManager: void setCountryCode(java.lang.String,boolean)>
NETWORK,<android.net.wifi.WifiManager: void setFrequencyBand(int,boolean)>
NETWORK,<android.net.wifi.p2p.WifiP2pDevice: void writeToParcel(android.os.Parcel,int)>
NETWORK,<android.net.wifi.p2p.WifiP2pDeviceList: void writeToParcel(android.os.Parcel,int)>
NETWORK,<android.net.wifi.p2p.WifiP2pGroup: void writeToParcel(android.os.Parcel,int)>
NETWORK,<java.net.URL: java.io.InputStream openStream()>
NETWORK,<java.net.URL: java.net.URLConnection openConnection()>
NETWORK,<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest)>
NETWORK,<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>
NETWORK,<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)>
NETWORK,<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.protocol.HttpContext)>
SMS_MMS,<android.provider.Telephony$Sms: boolean moveMessageToFolder(android.content.Context,android.net.Uri,int,int)>
SMS_MMS,<android.telephony.SmsManager: boolean copyMessageToIcc(byte[],byte[],int)>
SMS_MMS,<android.telephony.SmsManager: boolean deleteMessageFromIcc(int)>
SMS_MMS,<android.telephony.SmsManager: boolean disableCellBroadcast(int)>
SMS_MMS,<android.telephony.SmsManager: boolean disableCellBroadcastRange(int,int)>
SMS_MMS,<android.telephony.SmsManager: boolean enableCellBroadcast(int)>
SMS_MMS,<android.telephony.SmsManager: boolean enableCellBroadcastRange(int,int)>
SMS_MMS,<android.telephony.SmsManager: boolean updateMessageOnIcc(int,int,byte[])>
SMS_MMS,<android.telephony.SmsManager: void sendDataMessage(java.lang.String,java.lang.String,short,byte[],android.app.PendingIntent,android.app.PendingIntent)>
SMS_MMS,<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>
