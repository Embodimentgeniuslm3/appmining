api;cat;type
<android.accounts.AccountAuthenticatorActivity: android.content.ComponentName startService(android.content.Intent)>;ACCOUNT_SETTINGS;SINK
<android.accounts.AccountAuthenticatorActivity: void sendBroadcast(android.content.Intent,java.lang.String)>;ACCOUNT_SETTINGS;SINK
<android.accounts.AccountAuthenticatorActivity: void sendOrderedBroadcast(android.content.Intent,java.lang.String,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>;ACCOUNT_SETTINGS;SINK
<android.accounts.AccountAuthenticatorActivity: void setRequestedOrientation(int)>;ACCOUNT_SETTINGS;SINK
<android.accounts.AccountAuthenticatorActivity: void setWallpaper(java.io.InputStream)>;ACCOUNT_SETTINGS;SINK
<android.accounts.AccountManager$AmsTask$Response: void onError(int,java.lang.String)>;ACCOUNT_SETTINGS;SINK
<android.accounts.AccountManager$AmsTask$Response: void onResult(android.os.Bundle)>;ACCOUNT_SETTINGS;SINK
<android.accounts.AccountManager$AmsTask: void set(android.os.Bundle)>;ACCOUNT_SETTINGS;SINK
<android.accounts.AccountManager$GetAuthTokenByTypeAndFeaturesTask$1: void run(android.accounts.AccountManagerFuture)>;ACCOUNT_SETTINGS;SINK
<android.accounts.AccountManager: android.content.Intent newChooseAccountIntent(android.accounts.Account,java.util.ArrayList,java.lang.String[],boolean,java.lang.String,java.lang.String,java.lang.String[],android.os.Bundle)>;ACCOUNT_SETTINGS;SINK
<android.accounts.AccountManager: boolean addAccountExplicitly(android.accounts.Account,java.lang.String,android.os.Bundle)>;ACCOUNT_SETTINGS;SINK
<android.accounts.IAccountManager$Stub$Proxy: boolean addAccount(android.accounts.Account,java.lang.String,android.os.Bundle)>;ACCOUNT_SETTINGS;SINK
<android.accounts.IAccountManager$Stub$Proxy: java.lang.String peekAuthToken(android.accounts.Account,java.lang.String)>;ACCOUNT_SETTINGS;SINK
<android.accounts.IAccountManager$Stub$Proxy: void addAcount(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String,java.lang.String[],boolean,android.os.Bundle)>;ACCOUNT_SETTINGS;SINK
<android.accounts.IAccountManager$Stub$Proxy: void editProperties(android.accounts.IAccountManagerResponse,java.lang.String,boolean)>;ACCOUNT_SETTINGS;SINK
<android.accounts.IAccountManager$Stub$Proxy: void getAccountsByFeatures(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String[])>;ACCOUNT_SETTINGS;SINK
<android.accounts.IAccountManager$Stub$Proxy: void getAuthToken(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String,boolean,boolean,android.os.Bundle)>;ACCOUNT_SETTINGS;SINK
<android.accounts.IAccountManager$Stub$Proxy: void hasFeatures(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String[])>;ACCOUNT_SETTINGS;SINK
<android.accounts.IAccountManager$Stub$Proxy: void invalidateAuthToken(java.lang.String,java.lang.String)>;ACCOUNT_SETTINGS;SINK
<android.accounts.IAccountManager$Stub$Proxy: void removeAccount(android.accounts.IAccountManagerResponse,android.accounts.Account)>;ACCOUNT_SETTINGS;SINK
<android.accounts.IAccountManager$Stub$Proxy: void setAuthToken(android.accounts.Account,java.lang.String,java.lang.String)>;ACCOUNT_SETTINGS;SINK
<android.accounts.IAccountManager$Stub$Proxy: void setPassword(android.accounts.Account,java.lang.String)>;ACCOUNT_SETTINGS;SINK
<android.accounts.IAccountManager$Stub$Proxy: void setUserData(android.accounts.Account,java.lang.String,java.lang.String)>;ACCOUNT_SETTINGS;SINK
<android.accounts.IAccountManager$Stub$Proxy: void updateCredentials(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String,boolean,android.os.Bundle)>;ACCOUNT_SETTINGS;SINK
<android.accounts.IAccountManagerResponse$Stub$Proxy: void onError(int,java.lang.String)>;ACCOUNT_SETTINGS;SINK
<android.animation.PropertyValuesHolder$FloatPropertyValuesHolder: void setAnimatedValue(java.lang.Object)>;LOG;SINK
<android.animation.PropertyValuesHolder$IntPropertyValuesHolder: void setAnimatedValue(java.lang.Object)>;LOG;SINK
<android.animation.PropertyValuesHolder: void setAnimatedValue(java.lang.Object)>;LOG;SINK
<android.animation.PropertyValuesHolder: void setupSetterAndGetter(java.lang.Object)>;LOG;SINK
<android.app.Activity: android.content.ComponentName startService(android.content.Intent)>;INTENT;SINK
<android.app.Activity: void sendBroadcast(android.content.Intent)>;INTENT;SINK
<android.app.Activity: void sendBroadcast(android.content.Intent,java.lang.String)>;INTENT;SINK
<android.app.Activity: void sendOrderedBroadcast(android.content.Intent,java.lang.String)>;INTENT;SINK
<android.app.Activity: void sendOrderedBroadcast(android.content.Intent,java.lang.String,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>;INTENT;SINK
<android.app.Activity: void sendStickyBroadcast(android.content.Intent)>;INTENT;SINK
<android.app.Activity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>;INTENT;SINK
<android.app.Activity: void setResult(int,android.content.Intent)>;INTENT;SINK
<android.app.Activity: void startActivities(android.content.Intent[])>;INTENT;SINK
<android.app.Activity: void startActivity(android.content.Intent)>;INTENT;SINK
<android.app.Activity: void startActivityForResult(android.content.Intent,int)>;INTENT;SINK
<android.app.Activity: void startActivityFromChild(android.app.Activity,android.content.Intent,int)>;INTENT;SINK
<android.app.ActivityThread$ApplicationThread: void dumpActivity(java.io.FileDescriptor,android.os.IBinder,java.lang.String,java.lang.String[])>;FILE;SINK
<android.app.ActivityThread$ApplicationThread: void dumpGfxInfo(java.io.FileDescriptor,java.lang.String[])>;FILE;SINK
<android.app.ActivityThread$ApplicationThread: void dumpService(java.io.FileDescriptor,android.os.IBinder,java.lang.String[])>;FILE;SINK
<android.app.ActivityThread$ApplicationThread: void scheduleConfigurationChanged(android.content.res.Configuration)>;SYSTEM_SETTINGS;SINK
<android.app.ApplicationPackageManager: boolean addPermissionAsync(android.content.pm.PermissionInfo)>;SYNCHRONIZATION_DATA;SINK
<android.app.ApplicationThreadProxy: void dumpActivity(java.io.FileDescriptor,android.os.IBinder,java.lang.String,java.lang.String[])>;FILE;SINK
<android.app.ApplicationThreadProxy: void dumpGfxInfo(java.io.FileDescriptor,java.lang.String[])>;FILE;SINK
<android.app.ApplicationThreadProxy: void dumpService(java.io.FileDescriptor,android.os.IBinder,java.lang.String[])>;FILE;SINK
<android.app.BackStackRecord: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>;FILE;SINK
<android.app.DialogFragment: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>;FILE;SINK
<android.app.DownloadManager: android.os.ParcelFileDescriptor openDownloadedFile(long)>;FILE;SINK
<android.app.Fragment: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>;FILE;SINK
<android.app.FragmentManagerImpl: void dispatchConfigurationChanged(android.content.res.Configuration)>;SYSTEM_SETTINGS;SINK
<android.app.FragmentManagerImpl: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>;FILE;SINK
<android.app.FragmentManagerImpl: void setBackStackIndex(int,android.app.BackStackRecord)>;LOG;SINK
<android.app.Instrumentation: android.app.Activity startActivitySync(android.content.Intent)>;SYNCHRONIZATION_DATA;SINK
<android.app.Instrumentation: void sendCharacterSync(int)>;SYNCHRONIZATION_DATA;SINK
<android.app.Instrumentation: void sendKeyDownUpSync(int)>;SYNCHRONIZATION_DATA;SINK
<android.app.Instrumentation: void sendStringSync(java.lang.String)>;SYNCHRONIZATION_DATA;SINK
<android.app.LoaderManagerImpl$LoaderInfo: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>;FILE;SINK
<android.app.LoaderManagerImpl: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>;FILE;SINK
<android.app.LocalActivityManager: void dispatchCreate(android.os.Bundle)>;LOG;SINK
<android.app.SearchManager: void startGlobalSearch(java.lang.String,boolean,android.os.Bundle,android.graphics.Rect)>;LOG;SINK
<android.app.Service: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>;FILE;SINK
<android.app.Service: void setForeground(boolean)>;LOG;SINK
<android.app.UiModeManager: void enableCarMode(int)>;LOG;SINK
<android.app.UiModeManager: void setNightMode(int)>;LOG;SINK
<android.app.WallpaperManager: void setBitmap(android.graphics.Bitmap)>;LOG;SINK
<android.app.WallpaperManager: void setResource(int)>;LOG;SINK
<android.app.WallpaperManager: void setStream(java.io.InputStream)>;LOG;SINK
<android.app.admin.DevicePolicyManager: int setStorageEncryption(android.content.ComponentName,boolean)>;LOG;SINK
<android.app.admin.DevicePolicyManager: void setActiveAdmin(android.content.ComponentName,boolean)>;LOG;SINK
<android.app.admin.DevicePolicyManager: void setCameraDisabled(android.content.ComponentName,boolean)>;LOG;SINK
<android.app.admin.DevicePolicyManager: void setMaximumFailedPasswordsForWipe(android.content.ComponentName,int)>;LOG;SINK
<android.app.admin.DevicePolicyManager: void setMaximumTimeToLock(android.content.ComponentName,long)>;LOG;SINK
<android.app.admin.DevicePolicyManager: void setPasswordExpirationTimeout(android.content.ComponentName,long)>;LOG;SINK
<android.app.admin.DevicePolicyManager: void setPasswordHistoryLength(android.content.ComponentName,int)>;LOG;SINK
<android.app.admin.DevicePolicyManager: void setPasswordMinimumLength(android.content.ComponentName,int)>;LOG;SINK
<android.app.admin.DevicePolicyManager: void setPasswordMinimumLetters(android.content.ComponentName,int)>;LOG;SINK
<android.app.admin.DevicePolicyManager: void setPasswordMinimumLowerCase(android.content.ComponentName,int)>;LOG;SINK
<android.app.admin.DevicePolicyManager: void setPasswordMinimumNonLetter(android.content.ComponentName,int)>;LOG;SINK
<android.app.admin.DevicePolicyManager: void setPasswordMinimumNumeric(android.content.ComponentName,int)>;LOG;SINK
<android.app.admin.DevicePolicyManager: void setPasswordMinimumSymbols(android.content.ComponentName,int)>;LOG;SINK
<android.app.admin.DevicePolicyManager: void setPasswordMinimumUpperCase(android.content.ComponentName,int)>;LOG;SINK
<android.app.admin.DevicePolicyManager: void setPasswordQuality(android.content.ComponentName,int)>;LOG;SINK
<android.app.backup.BackupAgent: void onRestoreFile(android.os.ParcelFileDescriptor,long,java.io.File,int,long,long)>;FILE;SINK
<android.app.backup.BackupHelperDispatcher: void performRestore(android.app.backup.BackupDataInput,int,android.os.ParcelFileDescriptor)>;LOG;SINK
<android.app.backup.FullBackup: void restoreFile(android.os.ParcelFileDescriptor,long,int,long,long,java.io.File)>;FILE;SINK
<android.app.backup.RestoreSession: int restorePackage(java.lang.String,android.app.backup.RestoreObserver)>;LOG;SINK
<android.app.backup.RestoreSession: int restoreSome(long,android.app.backup.RestoreObserver,java.lang.String[])>;LOG;SINK
<android.bluetooth.BluetoothA2dp: boolean setPriority(android.bluetooth.BluetoothDevice,int)>;BLUETOOTH;SINK
<android.bluetooth.BluetoothAdapter: boolean setScanMode(int)>;BLUETOOTH;SINK
<android.bluetooth.BluetoothAdapter: boolean setScanMode(int,int)>;BLUETOOTH;SINK
<android.bluetooth.BluetoothAdapter: void setDiscoverableTimeout(int)>;BLUETOOTH;SINK
<android.bluetooth.BluetoothDevice: boolean setAlias(java.lang.String)>;BLUETOOTH;SINK
<android.bluetooth.BluetoothDevice: boolean setDeviceOutOfBandData(byte[],byte[])>;BLUETOOTH;SINK
<android.bluetooth.BluetoothDevice: boolean setPairingConfirmation(boolean)>;BLUETOOTH;SINK
<android.bluetooth.BluetoothDevice: boolean setPasskey(int)>;BLUETOOTH;SINK
<android.bluetooth.BluetoothDevice: boolean setPin(byte[])>;BLUETOOTH;SINK
<android.bluetooth.BluetoothDevice: boolean setTrust(boolean)>;BLUETOOTH;SINK
<android.bluetooth.BluetoothHeadset: boolean setPriority(android.bluetooth.BluetoothDevice,int)>;BLUETOOTH;SINK
<android.bluetooth.BluetoothHeadset: boolean startScoUsingVirtualVoiceCall(android.bluetooth.BluetoothDevice)>;BLUETOOTH;SINK
<android.bluetooth.BluetoothHeadset: boolean startVoiceRecognition(android.bluetooth.BluetoothDevice)>;BLUETOOTH;SINK
<android.bluetooth.BluetoothInputDevice: boolean setPriority(android.bluetooth.BluetoothDevice,int)>;BLUETOOTH;SINK
<android.bluetooth.BluetoothOutputStream: void write(byte[],int,int)>;BLUETOOTH;SINK
<android.bluetooth.BluetoothPan: void setBluetoothTethering(boolean)>;BLUETOOTH;SINK
<android.bluetooth.IBluetooth$Stub$Proxy: boolean setDiscoverableTimeout(int)>;BLUETOOTH;SINK
<android.bluetooth.IBluetooth$Stub$Proxy: boolean setName(java.lang.String)>;BLUETOOTH;SINK
<android.bluetooth.IBluetooth$Stub$Proxy: boolean setScanMode(int,int)>;BLUETOOTH;SINK
<android.bluetooth.IBluetooth$Stub$Proxy: void sendConnectionStateChange(android.bluetooth.BluetoothDevice,int,int,int)>;BLUETOOTH;SINK
<android.bluetooth.IBluetoothA2dp$Stub$Proxy: boolean setPriority(android.bluetooth.BluetoothDevice,int)>;BLUETOOTH;SINK
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: boolean setPriority(android.bluetooth.BluetoothDevice,int)>;BLUETOOTH;SINK
<android.bluetooth.IBluetoothHealthCallback$Stub$Proxy: void onHealthAppConfigurationStatusChange(android.bluetooth.BluetoothHealthAppConfiguration,int)>;BLUETOOTH;SINK
<android.bluetooth.IBluetoothHealthCallback$Stub$Proxy: void onHealthChannelStateChange(android.bluetooth.BluetoothHealthAppConfiguration,android.bluetooth.BluetoothDevice,int,int,android.os.ParcelFileDescriptor,int)>;BLUETOOTH;SINK
<android.content.AsyncTaskLoader: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>;FILE;SINK
<android.content.ContentProviderProxy: android.content.res.AssetFileDescriptor openAssetFile(android.net.Uri,java.lang.String)>;FILE;SINK
<android.content.ContentProviderProxy: android.content.res.AssetFileDescriptor openTypedAssetFile(android.net.Uri,java.lang.String,android.os.Bundle)>;FILE;SINK
<android.content.ContentProviderProxy: android.os.ParcelFileDescriptor openFile(android.net.Uri,java.lang.String)>;FILE;SINK
<android.content.ContentResolver: void setIsSyncable(android.accounts.Account,java.lang.String,int)>;SYNCHRONIZATION_DATA;SINK
<android.content.ContentResolver: void setSyncAutomatically(android.accounts.Account,java.lang.String,boolean)>;SYNCHRONIZATION_DATA;SINK
<android.content.ContextWrapper: void setWallpaper(java.io.InputStream)>;ACCOUNT_SETTINGS;SINK
<android.content.CursorLoader: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>;FILE;SINK
<android.content.IContentService$Stub$Proxy: boolean isSyncActive(android.accounts.Account,java.lang.String)>;SYNCHRONIZATION_DATA;SINK
<android.content.IContentService$Stub$Proxy: boolean isSyncPending(android.accounts.Account,java.lang.String)>;SYNCHRONIZATION_DATA;SINK
<android.content.IContentService$Stub$Proxy: void addPeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle,long)>;SYNCHRONIZATION_DATA;SINK
<android.content.IContentService$Stub$Proxy: void cancelSync(android.accounts.Account,java.lang.String)>;SYNCHRONIZATION_DATA;SINK
<android.content.IContentService$Stub$Proxy: void removePeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle)>;SYNCHRONIZATION_DATA;SINK
<android.content.IContentService$Stub$Proxy: void requestSync(android.accounts.Account,java.lang.String,android.os.Bundle)>;SYNCHRONIZATION_DATA;SINK
<android.content.IContentService$Stub$Proxy: void setIsSyncable(android.accounts.Account,java.lang.String,int)>;SYNCHRONIZATION_DATA;SINK
<android.content.IContentService$Stub$Proxy: void setMasterSyncAutomatically(boolean)>;SYNCHRONIZATION_DATA;SINK
<android.content.IContentService$Stub$Proxy: void setSyncAutomatically(android.accounts.Account,java.lang.String,boolean)>;SYNCHRONIZATION_DATA;SINK
<android.content.ISyncAdapter$Stub$Proxy: void cancelSync(android.content.ISyncContext)>;SYNCHRONIZATION_DATA;SINK
<android.content.ISyncAdapter$Stub$Proxy: void startSync(android.content.ISyncContext,java.lang.String,android.accounts.Account,android.os.Bundle)>;SYNCHRONIZATION_DATA;SINK
<android.content.Loader: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>;FILE;SINK
<android.content.SyncManager$ActiveSyncContext: void onServiceConnected(android.content.ComponentName,android.os.IBinder)>;SYNCHRONIZATION_DATA;SINK
<android.content.SyncManager: void dump(java.io.FileDescriptor,java.io.PrintWriter)>;FILE;SINK
<android.content.SyncManager: void dumpSyncHistory(java.io.PrintWriter)>;SYNCHRONIZATION_DATA;SINK
<android.content.SyncManager: void dumpSyncState(java.io.PrintWriter)>;SYNCHRONIZATION_DATA;SINK
<android.content.SyncStatusInfo: void setPeriodicSyncTime(int,long)>;SYNCHRONIZATION_DATA;SINK
<android.content.res.Resources: void updateConfiguration(android.content.res.Configuration,android.util.DisplayMetrics)>;SYSTEM_SETTINGS;SINK
<android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQuery(java.lang.String,java.lang.String[])>;DATABASE_INFORMATION;SINK
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>;LOG;SINK
<android.hardware.usb.UsbManager: void setCurrentFunction(java.lang.String,boolean)>;LOG;SINK
<android.hardware.usb.UsbManager: void setMassStorageBackingFile(java.lang.String)>;LOG;SINK
<android.inputmethodservice.AbstractInputMethodService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>;FILE;SINK
<android.inputmethodservice.IInputMethodWrapper: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>;FILE;SINK
<android.inputmethodservice.IInputMethodWrapper: void executeMessage(android.os.Message)>;FILE;SINK
<android.inputmethodservice.InputMethodService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>;FILE;SINK
<android.location.ILocationManager$Stub$Proxy: boolean addGpsStatusListener(android.location.IGpsStatusListener)>;LOCATION_INFORMATION;SINK
<android.location.ILocationManager$Stub$Proxy: boolean isProviderEnabled(java.lang.String)>;LOCATION_INFORMATION;SINK
<android.location.ILocationManager$Stub$Proxy: boolean providerMeetsCriteria(java.lang.String,android.location.Criteria)>;LOCATION_INFORMATION;SINK
<android.location.ILocationManager$Stub$Proxy: boolean sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)>;LOCATION_INFORMATION;SINK
<android.location.ILocationManager$Stub$Proxy: boolean sendNiResponse(int,int)>;LOCATION_INFORMATION;SINK
<android.location.ILocationManager$Stub$Proxy: void clearTestProviderEnabled(java.lang.String)>;LOCATION_INFORMATION;SINK
<android.location.ILocationManager$Stub$Proxy: void clearTestProviderLocation(java.lang.String)>;LOCATION_INFORMATION;SINK
<android.location.ILocationManager$Stub$Proxy: void clearTestProviderStatus(java.lang.String)>;LOCATION_INFORMATION;SINK
<android.location.ILocationManager$Stub$Proxy: void locationCallbackFinished(android.location.ILocationListener)>;LOCATION_INFORMATION;SINK
<android.location.ILocationManager$Stub$Proxy: void removeGpsStatusListener(android.location.IGpsStatusListener)>;LOCATION_INFORMATION;SINK
<android.location.ILocationManager$Stub$Proxy: void removeTestProvider(java.lang.String)>;LOCATION_INFORMATION;SINK
<android.location.ILocationManager$Stub$Proxy: void setTestProviderEnabled(java.lang.String,boolean)>;LOCATION_INFORMATION;SINK
<android.location.ILocationManager$Stub$Proxy: void setTestProviderLocation(java.lang.String,android.location.Location)>;LOCATION_INFORMATION;SINK
<android.location.ILocationManager$Stub$Proxy: void setTestProviderStatus(java.lang.String,int,android.os.Bundle,long)>;LOCATION_INFORMATION;SINK
<android.location.LocationManager: boolean sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)>;LOCATION_INFORMATION;SINK
<android.location.LocationManager: boolean sendNiResponse(int,int)>;LOCATION_INFORMATION;SINK
<android.location.LocationManager: void setTestProviderEnabled(java.lang.String,boolean)>;LOCATION_INFORMATION;SINK
<android.location.LocationManager: void setTestProviderLocation(java.lang.String,android.location.Location)>;LOCATION_INFORMATION;SINK
<android.location.LocationManager: void setTestProviderStatus(java.lang.String,int,android.os.Bundle,long)>;LOCATION_INFORMATION;SINK
<android.media.AudioManager: void setBluetoothA2dpOn(boolean)>;AUDIO;SINK
<android.media.AudioManager: void setBluetoothScoOn(boolean)>;AUDIO;SINK
<android.media.AudioManager: void setMicrophoneMute(boolean)>;AUDIO;SINK
<android.media.AudioManager: void setMode(int)>;AUDIO;SINK
<android.media.AudioManager: void setParameter(java.lang.String,java.lang.String)>;AUDIO;SINK
<android.media.AudioManager: void setParameters(java.lang.String)>;AUDIO;SINK
<android.media.AudioManager: void setRingerMode(int)>;AUDIO;SINK
<android.media.AudioManager: void setRouting(int,int,int)>;AUDIO;SINK
<android.media.AudioManager: void setSpeakerphoneOn(boolean)>;AUDIO;SINK
<android.media.AudioManager: void setStreamMute(int,boolean)>;AUDIO;SINK
<android.media.AudioManager: void setStreamSolo(int,boolean)>;AUDIO;SINK
<android.media.AudioManager: void setStreamVolume(int,int,int)>;AUDIO;SINK
<android.media.AudioManager: void setVibrateSetting(int,int)>;AUDIO;SINK
<android.media.AudioManager: void setWiredHeadsetOn(boolean)>;AUDIO;SINK
<android.media.IAudioFocusDispatcher$Stub$Proxy: void dispatchAudioFocusChange(int,java.lang.String)>;AUDIO;SINK
<android.media.IAudioService$Stub$Proxy: boolean shouldVibrate(int)>;AUDIO;SINK
<android.media.IAudioService$Stub$Proxy: int abandonAudioFocus(android.media.IAudioFocusDispatcher,java.lang.String)>;AUDIO;SINK
<android.media.IAudioService$Stub$Proxy: int requestAudioFocus(int,int,android.os.IBinder,android.media.IAudioFocusDispatcher,java.lang.String,java.lang.String)>;AUDIO;SINK
<android.media.IAudioService$Stub$Proxy: void adjustStreamVolume(int,int,int)>;AUDIO;SINK
<android.media.IAudioService$Stub$Proxy: void adjustSuggestedStreamVolume(int,int,int)>;AUDIO;SINK
<android.media.IAudioService$Stub$Proxy: void adjustVolume(int,int)>;AUDIO;SINK
<android.media.IAudioService$Stub$Proxy: void playSoundEffect(int)>;AUDIO;SINK
<android.media.IAudioService$Stub$Proxy: void playSoundEffectVolume(int,float)>;AUDIO;SINK
<android.media.IAudioService$Stub$Proxy: void registerRemoteControlDisplay(android.media.IRemoteControlDisplay)>;AUDIO;SINK
<android.media.IAudioService$Stub$Proxy: void remoteControlDisplayUsesBitmapSize(android.media.IRemoteControlDisplay,int,int)>;AUDIO;SINK
<android.media.IAudioService$Stub$Proxy: void setBluetoothScoOn(boolean)>;AUDIO;SINK
<android.media.IAudioService$Stub$Proxy: void setMode(int,android.os.IBinder)>;AUDIO;SINK
<android.media.IAudioService$Stub$Proxy: void setRingerMode(int)>;AUDIO;SINK
<android.media.IAudioService$Stub$Proxy: void setSpeakerphoneOn(boolean)>;AUDIO;SINK
<android.media.IAudioService$Stub$Proxy: void setStreamMute(int,boolean,android.os.IBinder)>;AUDIO;SINK
<android.media.IAudioService$Stub$Proxy: void setStreamSolo(int,boolean,android.os.IBinder)>;AUDIO;SINK
<android.media.IAudioService$Stub$Proxy: void setStreamVolume(int,int,int)>;AUDIO;SINK
<android.media.IAudioService$Stub$Proxy: void setVibrateSetting(int,int)>;AUDIO;SINK
<android.media.IAudioService$Stub$Proxy: void startBluetoothSco(android.os.IBinder)>;AUDIO;SINK
<android.media.IAudioService$Stub$Proxy: void stopBluetoothSco(android.os.IBinder)>;AUDIO;SINK
<android.media.IAudioService$Stub$Proxy: void unregisterAudioFocusClient(java.lang.String)>;AUDIO;SINK
<android.media.IAudioService$Stub$Proxy: void unregisterRemoteControlClient(android.app.PendingIntent,android.media.IRemoteControlClient)>;AUDIO;SINK
<android.media.IAudioService$Stub$Proxy: void unregisterRemoteControlDisplay(android.media.IRemoteControlDisplay)>;AUDIO;SINK
<android.media.MediaMetadataRetriever: void setDataSource(java.io.FileDescriptor)>;FILE;SINK
<android.media.MediaPlayer: void setSurface(android.view.Surface)>;LOG;SINK
<android.media.MediaRecorder: void setAuxiliaryOutputFile(java.io.FileDescriptor)>;FILE;SINK
<android.media.MediaRecorder: void setAuxiliaryOutputFile(java.lang.String)>;LOG;SINK
<android.media.MediaRecorder: void setOutputFile(java.io.FileDescriptor)>;FILE;SINK
<android.media.MiniThumbFile: void saveMiniThumbToFile(byte[],long,long)>;LOG;SINK
<android.net.ConnectivityManager: boolean setRadio(int,boolean)>;NETWORK;SINK
<android.net.ConnectivityManager: boolean setRadios(boolean)>;NETWORK;SINK
<android.net.ConnectivityManager: int setUsbTethering(boolean)>;NETWORK;SINK
<android.net.ConnectivityManager: int startUsingNetworkFeature(int,java.lang.String)>;NETWORK;SINK
<android.net.ConnectivityManager: void setBackgroundDataSetting(boolean)>;NETWORK;SINK
<android.net.ConnectivityManager: void setDataDependency(int,boolean)>;NETWORK;SINK
<android.net.ConnectivityManager: void setGlobalProxy(android.net.ProxyProperties)>;NETWORK;SINK
<android.net.ConnectivityManager: void setMobileDataEnabled(boolean)>;NETWORK;SINK
<android.net.ConnectivityManager: void setNetworkPreference(int)>;NETWORK;SINK
<android.net.IConnectivityManager$Stub$Proxy: boolean prepareVpn(java.lang.String,java.lang.String)>;NETWORK;SINK
<android.net.IConnectivityManager$Stub$Proxy: boolean requestRouteToHost(int,int)>;NETWORK;SINK
<android.net.IConnectivityManager$Stub$Proxy: boolean requestRouteToHostAddress(int,byte[])>;NETWORK;SINK
<android.net.IConnectivityManager$Stub$Proxy: boolean setRadio(int,boolean)>;NETWORK;SINK
<android.net.IConnectivityManager$Stub$Proxy: boolean setRadios(boolean)>;NETWORK;SINK
<android.net.IConnectivityManager$Stub$Proxy: int setUsbTethering(boolean)>;NETWORK;SINK
<android.net.IConnectivityManager$Stub$Proxy: int startUsingNetworkFeature(int,java.lang.String,android.os.IBinder)>;NETWORK;SINK
<android.net.IConnectivityManager$Stub$Proxy: int stopUsingNetworkFeature(int,java.lang.String)>;NETWORK;SINK
<android.net.IConnectivityManager$Stub$Proxy: int tether(java.lang.String)>;NETWORK;SINK
<android.net.IConnectivityManager$Stub$Proxy: int untether(java.lang.String)>;NETWORK;SINK
<android.net.IConnectivityManager$Stub$Proxy: void reportInetCondition(int,int)>;NETWORK;SINK
<android.net.IConnectivityManager$Stub$Proxy: void requestNetworkTransitionWakelock(java.lang.String)>;NETWORK;SINK
<android.net.IConnectivityManager$Stub$Proxy: void setDataDependency(int,boolean)>;NETWORK;SINK
<android.net.IConnectivityManager$Stub$Proxy: void setGlobalProxy(android.net.ProxyProperties)>;NETWORK;SINK
<android.net.IConnectivityManager$Stub$Proxy: void setMobileDataEnabled(boolean)>;NETWORK;SINK
<android.net.IConnectivityManager$Stub$Proxy: void setNetworkPreference(int)>;NETWORK;SINK
<android.net.IConnectivityManager$Stub$Proxy: void setPolicyDataEnable(int,boolean)>;NETWORK;SINK
<android.net.INetworkPolicyListener$Stub$Proxy: void onMeteredIfacesChanged(java.lang.String[])>;NETWORK;SINK
<android.net.INetworkPolicyListener$Stub$Proxy: void onUidRulesChanged(int,int)>;NETWORK;SINK
<android.net.INetworkPolicyManager$Stub$Proxy: void registerListener(android.net.INetworkPolicyListener)>;NETWORK;SINK
<android.net.INetworkPolicyManager$Stub$Proxy: void setNetworkPolicies(android.net.NetworkPolicy[])>;NETWORK;SINK
<android.net.INetworkPolicyManager$Stub$Proxy: void setRestrictBackground(boolean)>;NETWORK;SINK
<android.net.INetworkPolicyManager$Stub$Proxy: void setUidPolicy(int,int)>;NETWORK;SINK
<android.net.INetworkPolicyManager$Stub$Proxy: void unregisterListener(android.net.INetworkPolicyListener)>;NETWORK;SINK
<android.net.INetworkStatsService$Stub$Proxy: void incrementOperationCount(int,int,int)>;NETWORK;SINK
<android.net.INetworkStatsService$Stub$Proxy: void setUidForeground(int,boolean)>;NETWORK;SINK
<android.net.LinkCapabilities: void put(int,java.lang.String)>;NETWORK;SINK
<android.net.LinkProperties: void writeToParcel(android.os.Parcel,int)>;NETWORK;SINK
<android.net.LocalSocket: void setFileDescriptorsForSend(java.io.FileDescriptor[])>;FILE;SINK
<android.net.LocalSocket: void setReceiveBufferSize(int)>;NETWORK;SINK
<android.net.LocalSocket: void setSendBufferSize(int)>;NETWORK;SINK
<android.net.LocalSocket: void setSoTimeout(int)>;NETWORK;SINK
<android.net.LocalSocketImpl$SocketOutputStream: void write(byte[])>;NETWORK;SINK
<android.net.LocalSocketImpl: void bind(android.net.LocalSocketAddress)>;FILE;SINK
<android.net.LocalSocketImpl: void setFileDescriptorsForSend(java.io.FileDescriptor[])>;FILE;SINK
<android.net.LocalSocketImpl: void setOption(int,java.lang.Object)>;FILE;SINK
<android.net.NetworkPolicy: void writeToParcel(android.os.Parcel,int)>;NETWORK;SINK
<android.net.NetworkPolicyManager: void setNetworkPolicies(android.net.NetworkPolicy[])>;NETWORK;SINK
<android.net.NetworkPolicyManager: void setUidPolicy(int,int)>;NETWORK;SINK
<android.net.NetworkState: void writeToParcel(android.os.Parcel,int)>;NETWORK;SINK
<android.net.NetworkStats: void dump(java.lang.String,java.io.PrintWriter)>;NETWORK;SINK
<android.net.NetworkStatsHistory$DataStreamUtils: void writeVarLong(java.io.DataOutputStream,long)>;NETWORK;SINK
<android.net.NetworkStatsHistory$DataStreamUtils: void writeVarLongArray(java.io.DataOutputStream,long[],int)>;NETWORK;SINK
<android.net.NetworkStatsHistory$ParcelUtils: void writeLongArray(android.os.Parcel,long[],int)>;NETWORK;SINK
<android.net.NetworkStatsHistory: void writeToParcel(android.os.Parcel,int)>;NETWORK;SINK
<android.net.NetworkStatsHistory: void writeToStream(java.io.DataOutputStream)>;NETWORK;SINK
<android.net.Proxy: void setHttpProxySystemProperty(java.lang.String,java.lang.String,java.lang.String)>;NETWORK;SINK
<android.net.TrafficStats: void setThreadStatsUid(int)>;NETWORK;SINK
<android.net.Uri$HierarchicalUri: void writeToParcel(android.os.Parcel,int)>;NETWORK;SINK
<android.net.Uri$OpaqueUri: void writeToParcel(android.os.Parcel,int)>;NETWORK;SINK
<android.net.http.AndroidHttpClientConnection: void setSocketTimeout(int)>;NETWORK;SINK
<android.net.http.Headers: void setAcceptRanges(java.lang.String)>;NETWORK;SINK
<android.net.http.Headers: void setCacheControl(java.lang.String)>;NETWORK;SINK
<android.net.http.Headers: void setContentDisposition(java.lang.String)>;NETWORK;SINK
<android.net.http.Headers: void setContentEncoding(java.lang.String)>;NETWORK;SINK
<android.net.http.Headers: void setContentType(java.lang.String)>;NETWORK;SINK
<android.net.http.Headers: void setEtag(java.lang.String)>;NETWORK;SINK
<android.net.http.Headers: void setExpires(java.lang.String)>;NETWORK;SINK
<android.net.http.Headers: void setLastModified(java.lang.String)>;NETWORK;SINK
<android.net.http.Headers: void setLocation(java.lang.String)>;NETWORK;SINK
<android.net.http.Headers: void setProxyAuthenticate(java.lang.String)>;NETWORK;SINK
<android.net.http.Headers: void setWwwAuthenticate(java.lang.String)>;NETWORK;SINK
<android.net.http.Headers: void setXPermittedCrossDomainPolicies(java.lang.String)>;NETWORK;SINK
<android.net.http.HttpsConnection: android.net.http.AndroidHttpClientConnection openConnection(android.net.http.Request)>;NETWORK;SINK
<android.net.http.RequestHandle: boolean setupRedirect(java.lang.String,int,java.util.Map)>;NETWORK;SINK
<android.net.http.RequestHandle: void setupBasicAuthResponse(boolean,java.lang.String,java.lang.String)>;NETWORK;SINK
<android.net.http.RequestHandle: void setupDigestAuthResponse(boolean,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>;NETWORK;SINK
<android.net.http.RequestQueue: void queueRequest(android.net.http.Request,boolean)>;NETWORK;SINK
<android.net.http.SslCertificate: android.os.Bundle saveState(android.net.http.SslCertificate)>;NETWORK;SINK
<android.net.rtp.AudioGroup: void sendDtmf(int)>;NETWORK;SINK
<android.net.sip.ISipService$Stub$Proxy: boolean isOpened(java.lang.String)>;VOIP;SINK
<android.net.sip.ISipService$Stub$Proxy: boolean isRegistered(java.lang.String)>;NETWORK;SINK
<android.net.sip.ISipService$Stub$Proxy: void close(java.lang.String)>;NETWORK;SINK
<android.net.sip.ISipService$Stub$Proxy: void open3(android.net.sip.SipProfile,android.app.PendingIntent,android.net.sip.ISipSessionListener)>;VOIP;SINK
<android.net.sip.ISipService$Stub$Proxy: void setRegistrationListener(java.lang.String,android.net.sip.ISipSessionListener)>;VOIP;SINK
<android.net.sip.ISipSession$Stub$Proxy: void answerCall(java.lang.String,int)>;NETWORK;SINK
<android.net.sip.ISipSession$Stub$Proxy: void changeCall(java.lang.String,int)>;NETWORK;SINK
<android.net.sip.ISipSession$Stub$Proxy: void makeCall(android.net.sip.SipProfile,java.lang.String,int)>;VOIP;SINK
<android.net.sip.ISipSession$Stub$Proxy: void register(int)>;NETWORK;SINK
<android.net.sip.ISipSession$Stub$Proxy: void setListener(android.net.sip.ISipSessionListener)>;VOIP;SINK
<android.net.sip.ISipSessionListener$Stub$Proxy: void onCallBusy(android.net.sip.ISipSession)>;VOIP;SINK
<android.net.sip.ISipSessionListener$Stub$Proxy: void onCallChangeFailed(android.net.sip.ISipSession,int,java.lang.String)>;VOIP;SINK
<android.net.sip.ISipSessionListener$Stub$Proxy: void onCallEnded(android.net.sip.ISipSession)>;VOIP;SINK
<android.net.sip.ISipSessionListener$Stub$Proxy: void onCallEstablished(android.net.sip.ISipSession,java.lang.String)>;VOIP;SINK
<android.net.sip.ISipSessionListener$Stub$Proxy: void onCallTransferring(android.net.sip.ISipSession,java.lang.String)>;VOIP;SINK
<android.net.sip.ISipSessionListener$Stub$Proxy: void onCalling(android.net.sip.ISipSession)>;VOIP;SINK
<android.net.sip.ISipSessionListener$Stub$Proxy: void onError(android.net.sip.ISipSession,int,java.lang.String)>;VOIP;SINK
<android.net.sip.ISipSessionListener$Stub$Proxy: void onRegistering(android.net.sip.ISipSession)>;VOIP;SINK
<android.net.sip.ISipSessionListener$Stub$Proxy: void onRegistrationDone(android.net.sip.ISipSession,int)>;VOIP;SINK
<android.net.sip.ISipSessionListener$Stub$Proxy: void onRegistrationFailed(android.net.sip.ISipSession,int,java.lang.String)>;VOIP;SINK
<android.net.sip.ISipSessionListener$Stub$Proxy: void onRegistrationTimeout(android.net.sip.ISipSession)>;VOIP;SINK
<android.net.sip.ISipSessionListener$Stub$Proxy: void onRinging(android.net.sip.ISipSession,android.net.sip.SipProfile,java.lang.String)>;VOIP;SINK
<android.net.sip.ISipSessionListener$Stub$Proxy: void onRingingBack(android.net.sip.ISipSession)>;VOIP;SINK
<android.net.sip.SimpleSessionDescription$Fields: void setAddress(java.lang.String)>;NETWORK;SINK
<android.net.sip.SimpleSessionDescription$Fields: void setAttribute(java.lang.String,java.lang.String)>;NETWORK;SINK
<android.net.sip.SimpleSessionDescription$Fields: void setBandwidth(java.lang.String,int)>;NETWORK;SINK
<android.net.sip.SimpleSessionDescription$Fields: void setEncryption(java.lang.String,java.lang.String)>;NETWORK;SINK
<android.net.sip.SimpleSessionDescription$Media: void setAddress(java.lang.String)>;NETWORK;SINK
<android.net.sip.SimpleSessionDescription$Media: void setAttribute(java.lang.String,java.lang.String)>;NETWORK;SINK
<android.net.sip.SimpleSessionDescription$Media: void setBandwidth(java.lang.String,int)>;NETWORK;SINK
<android.net.sip.SimpleSessionDescription$Media: void setEncryption(java.lang.String,java.lang.String)>;NETWORK;SINK
<android.net.sip.SimpleSessionDescription$Media: void setFormat(java.lang.String,java.lang.String)>;NETWORK;SINK
<android.net.sip.SimpleSessionDescription$Media: void setRtpPayload(int,java.lang.String,java.lang.String)>;NETWORK;SINK
<android.net.sip.SimpleSessionDescription: void setAddress(java.lang.String)>;NETWORK;SINK
<android.net.sip.SimpleSessionDescription: void setAttribute(java.lang.String,java.lang.String)>;NETWORK;SINK
<android.net.sip.SimpleSessionDescription: void setBandwidth(java.lang.String,int)>;NETWORK;SINK
<android.net.sip.SimpleSessionDescription: void setEncryption(java.lang.String,java.lang.String)>;NETWORK;SINK
<android.net.sip.SipAudioCall: void sendDtmf(int)>;NETWORK;SINK
<android.net.sip.SipAudioCall: void sendDtmf(int,android.os.Message)>;LOG;SINK
<android.net.sip.SipAudioCall: void setSpeakerMode(boolean)>;NETWORK;SINK
<android.net.sip.SipManager: android.content.Intent createIncomingCallBroadcast(java.lang.String,java.lang.String)>;NETWORK;SINK
<android.net.sip.SipManager: void open(android.net.sip.SipProfile)>;VOIP;SINK
<android.net.sip.SipManager: void open(android.net.sip.SipProfile,android.app.PendingIntent,android.net.sip.SipRegistrationListener)>;VOIP;SINK
<android.net.sip.SipManager: void setRegistrationListener(java.lang.String,android.net.sip.SipRegistrationListener)>;VOIP;SINK
<android.net.wifi.IWifiManager$Stub$Proxy: boolean acquireWifiLock(android.os.IBinder,int,java.lang.String,android.os.WorkSource)>;NETWORK;SINK
<android.net.wifi.IWifiManager$Stub$Proxy: boolean disableNetwork(int)>;NETWORK;SINK
<android.net.wifi.IWifiManager$Stub$Proxy: boolean enableNetwork(int,boolean)>;NETWORK;SINK
<android.net.wifi.IWifiManager$Stub$Proxy: boolean releaseWifiLock(android.os.IBinder)>;NETWORK;SINK
<android.net.wifi.IWifiManager$Stub$Proxy: boolean removeNetwork(int)>;NETWORK;SINK
<android.net.wifi.IWifiManager$Stub$Proxy: boolean setWifiEnabled(boolean)>;NETWORK;SINK
<android.net.wifi.IWifiManager$Stub$Proxy: void acquireMulticastLock(android.os.IBinder,java.lang.String)>;NETWORK;SINK
<android.net.wifi.IWifiManager$Stub$Proxy: void addToBlacklist(java.lang.String)>;NETWORK;SINK
<android.net.wifi.IWifiManager$Stub$Proxy: void setCountryCode(java.lang.String,boolean)>;NETWORK;SINK
<android.net.wifi.IWifiManager$Stub$Proxy: void setFrequencyBand(int,boolean)>;NETWORK;SINK
<android.net.wifi.IWifiManager$Stub$Proxy: void setWifiApConfiguration(android.net.wifi.WifiConfiguration)>;NETWORK;SINK
<android.net.wifi.IWifiManager$Stub$Proxy: void setWifiApEnabled(android.net.wifi.WifiConfiguration,boolean)>;NETWORK;SINK
<android.net.wifi.IWifiManager$Stub$Proxy: void updateWifiLockWorkSource(android.os.IBinder,android.os.WorkSource)>;NETWORK;SINK
<android.net.wifi.ScanResult: void writeToParcel(android.os.Parcel,int)>;NETWORK;SINK
<android.net.wifi.WifiConfiguration: void writeToParcel(android.os.Parcel,int)>;NETWORK;SINK
<android.net.wifi.WifiInfo: void setSupplicantState(java.lang.String)>;NETWORK;SINK
<android.net.wifi.WifiInfo: void writeToParcel(android.os.Parcel,int)>;NETWORK;SINK
<android.net.wifi.WifiManager$WifiLock: void setWorkSource(android.os.WorkSource)>;NETWORK;SINK
<android.net.wifi.WifiManager: boolean setWifiApConfiguration(android.net.wifi.WifiConfiguration)>;NETWORK;SINK
<android.net.wifi.WifiManager: boolean setWifiApEnabled(android.net.wifi.WifiConfiguration,boolean)>;NETWORK;SINK
<android.net.wifi.WifiManager: boolean setWifiEnabled(boolean)>;NETWORK;SINK
<android.net.wifi.WifiManager: void setCountryCode(java.lang.String,boolean)>;NETWORK;SINK
<android.net.wifi.WifiManager: void setFrequencyBand(int,boolean)>;NETWORK;SINK
<android.net.wifi.p2p.WifiP2pDevice: void writeToParcel(android.os.Parcel,int)>;NETWORK;SINK
<android.net.wifi.p2p.WifiP2pDeviceList: void update(android.net.wifi.p2p.WifiP2pDevice)>;NETWORK;SINK
<android.net.wifi.p2p.WifiP2pDeviceList: void writeToParcel(android.os.Parcel,int)>;NETWORK;SINK
<android.net.wifi.p2p.WifiP2pGroup: void writeToParcel(android.os.Parcel,int)>;NETWORK;SINK
<android.nfc.INfcAdapter$Stub$Proxy: void setForegroundDispatch(android.app.PendingIntent,android.content.IntentFilter[],android.nfc.TechListParcel)>;NFC;SINK
<android.nfc.INfcAdapterExtras$Stub$Proxy: android.os.Bundle open(java.lang.String,android.os.IBinder)>;NFC;SINK
<android.nfc.INfcAdapterExtras$Stub$Proxy: void authenticate(java.lang.String,byte[])>;NFC;SINK
<android.nfc.INfcAdapterExtras$Stub$Proxy: void setCardEmulationRoute(java.lang.String,int)>;NFC;SINK
<android.nfc.INfcTag$Stub$Proxy: boolean canMakeReadOnly(int)>;NFC;SINK
<android.nfc.INfcTag$Stub$Proxy: boolean ndefIsWritable(int)>;NFC;SINK
<android.nfc.INfcTag$Stub$Proxy: int close(int)>;NFC;SINK
<android.nfc.INfcTag$Stub$Proxy: int connect(int,int)>;NFC;SINK
<android.nfc.INfcTag$Stub$Proxy: int formatNdef(int,byte[])>;NFC;SINK
<android.nfc.INfcTag$Stub$Proxy: int ndefMakeReadOnly(int)>;NFC;SINK
<android.nfc.INfcTag$Stub$Proxy: int ndefWrite(int,android.nfc.NdefMessage)>;NFC;SINK
<android.nfc.INfcTag$Stub$Proxy: int reconnect(int)>;NFC;SINK
<android.nfc.INfcTag$Stub$Proxy: int setTimeout(int,int)>;NFC;SINK
<android.nfc.NdefMessage: void writeToParcel(android.os.Parcel,int)>;NFC;SINK
<android.nfc.NfcActivityManager: void setNdefPushMessage(android.app.Activity,android.nfc.NdefMessage)>;NFC;SINK
<android.nfc.NfcAdapter: void enableForegroundDispatch(android.app.Activity,android.app.PendingIntent,android.content.IntentFilter[],java.lang.String[][])>;NFC;SINK
<android.nfc.NfcAdapter: void setNdefPushMessage(android.nfc.NdefMessage,android.app.Activity,android.app.Activity[])>;NFC;SINK
<android.nfc.Tag: void writeToParcel(android.os.Parcel,int)>;NFC;SINK
<android.nfc.tech.IsoDep: void setTimeout(int)>;NFC;SINK
<android.nfc.tech.MifareClassic: void decrement(int,int)>;NFC;SINK
<android.nfc.tech.MifareClassic: void increment(int,int)>;NFC;SINK
<android.nfc.tech.MifareClassic: void setTimeout(int)>;NFC;SINK
<android.nfc.tech.MifareUltralight: void setTimeout(int)>;NFC;SINK
<android.nfc.tech.NfcA: void setTimeout(int)>;NFC;SINK
<android.nfc.tech.NfcF: void setTimeout(int)>;NFC;SINK
<android.os.Binder: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>;FILE;SINK
<android.os.Binder: void dump(java.io.FileDescriptor,java.lang.String[])>;FILE;SINK
<android.os.Debug: boolean dumpService(java.lang.String,java.io.FileDescriptor,java.lang.String[])>;FILE;SINK
<android.os.Debug: void dumpHprofData(java.lang.String,java.io.FileDescriptor)>;FILE;SINK
<android.os.Debug: void startMethodTracing(java.lang.String,java.io.FileDescriptor,int,int)>;FILE;SINK
<android.os.DropBoxManager: void addFile(java.lang.String,java.io.File,int)>;FILE;SINK
<android.os.FileUtils: boolean copyToFile(java.io.InputStream,java.io.File)>;FILE;SINK
<android.os.FileUtils: java.lang.String readTextFile(java.io.File,int,java.lang.String)>;FILE;SINK
<android.os.FileUtils: void stringToFile(java.lang.String,java.lang.String)>;FILE;SINK
<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor fromData(byte[],java.lang.String)>;FILE;SINK
<android.os.StrictMode: void onVmPolicyViolation(java.lang.String,java.lang.Throwable)>;LOG;SINK
<android.os.storage.StorageVolume: void writeToParcel(android.os.Parcel,int)>;FILE;SINK
<android.provider.Browser: void updateVisitedHistory(android.content.ContentResolver,java.lang.String,boolean)>;LOG;SINK
<android.provider.Contacts$ContactMethods: void addPostalLocation(android.content.Context,long,double,double)>;CONTACT_INFORMATION;SINK
<android.provider.Contacts$People: void setPhotoData(android.content.ContentResolver,android.net.Uri,byte[])>;CONTACT_INFORMATION;SINK
<android.provider.Contacts$Settings: void setSetting(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String)>;CONTACT_INFORMATION;SINK
<android.provider.ContactsContract$ProfileSyncState: void set(android.content.ContentProviderClient,android.accounts.Account,byte[])>;CONTACT_INFORMATION;SINK
<android.provider.ContactsContract$SyncState: void set(android.content.ContentProviderClient,android.accounts.Account,byte[])>;CONTACT_INFORMATION;SINK
<android.provider.DrmStore: android.content.Intent addDrmFile(android.content.ContentResolver,java.io.FileInputStream,java.lang.String)>;LOG;SINK
<android.provider.Telephony$Sms: boolean moveMessageToFolder(android.content.Context,android.net.Uri,int,int)>;SMS_MMS;SINK
<android.security.Credentials: void install(android.content.Context,java.lang.String,byte[])>;LOG;SINK
<android.security.Credentials: void install(android.content.Context,java.security.KeyPair)>;LOG;SINK
<android.server.search.SearchManagerService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>;FILE;SINK
<android.service.wallpaper.WallpaperService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>;FILE;SINK
<android.support.v4.content.LocalBroadcastManager: boolean sendBroadcast(android.content.Intent)>;LOG;SINK
<android.telephony.ServiceState: void setCssIndicator(int)>;SYSTEM_SETTINGS;SINK
<android.telephony.ServiceState: void setStateOff()>;SYSTEM_SETTINGS;SINK
<android.telephony.ServiceState: void setStateOutOfService()>;SYSTEM_SETTINGS;SINK
<android.telephony.SmsManager: boolean copyMessageToIcc(byte[],byte[],int)>;SMS_MMS;SINK
<android.telephony.SmsManager: boolean deleteMessageFromIcc(int)>;SMS_MMS;SINK
<android.telephony.SmsManager: boolean disableCellBroadcast(int)>;SMS_MMS;SINK
<android.telephony.SmsManager: boolean disableCellBroadcastRange(int,int)>;SMS_MMS;SINK
<android.telephony.SmsManager: boolean enableCellBroadcast(int)>;SMS_MMS;SINK
<android.telephony.SmsManager: boolean enableCellBroadcastRange(int,int)>;SMS_MMS;SINK
<android.telephony.SmsManager: boolean updateMessageOnIcc(int,int,byte[])>;SMS_MMS;SINK
<android.telephony.SmsManager: void sendDataMessage(java.lang.String,java.lang.String,short,byte[],android.app.PendingIntent,android.app.PendingIntent)>;SMS_MMS;SINK
<android.telephony.SmsManager: void sendMultipartTextMessage(java.lang.String,java.lang.String,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList)>;SMS_MMS;SINK
<android.telephony.SmsManager: void sendMultipartTextMessage(java.lang.String,java.lang.String,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList)>;SMS_MMS;SINK
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>;SMS_MMS;SINK
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>;SMS_MMS;SINK
<android.test.InstrumentationTestCase: void sendKeys(java.lang.String)>;LOG;SINK
<android.util.Log: int d(java.lang.String,java.lang.String)>;LOG;SINK
<android.util.Log: int d(java.lang.String,java.lang.String,java.lang.Throwable)>;LOG;SINK
<android.util.Log: int e(java.lang.String,java.lang.String)>;LOG;SINK
<android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>;LOG;SINK
<android.util.Log: int i(java.lang.String,java.lang.String)>;LOG;SINK
<android.util.Log: int i(java.lang.String,java.lang.String,java.lang.Throwable)>;LOG;SINK
<android.util.Log: int println(int,java.lang.String,java.lang.String)>;LOG;SINK
<android.util.Log: int v(java.lang.String,java.lang.String)>;LOG;SINK
<android.util.Log: int v(java.lang.String,java.lang.String,java.lang.Throwable)>;LOG;SINK
<android.util.Log: int w(java.lang.String,java.lang.String)>;LOG;SINK
<android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>;LOG;SINK
<android.util.Log: int w(java.lang.String,java.lang.Throwable)>;LOG;SINK
<android.util.Log: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>;LOG;SINK
<android.util.Slog: int d(java.lang.String,java.lang.String)>;LOG;SINK
<android.util.Slog: int d(java.lang.String,java.lang.String,java.lang.Throwable)>;LOG;SINK
<android.util.Slog: int e(java.lang.String,java.lang.String)>;LOG;SINK
<android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>;LOG;SINK
<android.util.Slog: int i(java.lang.String,java.lang.String)>;LOG;SINK
<android.util.Slog: int i(java.lang.String,java.lang.String,java.lang.Throwable)>;LOG;SINK
<android.util.Slog: int println(int,java.lang.String,java.lang.String)>;LOG;SINK
<android.util.Slog: int v(java.lang.String,java.lang.String)>;LOG;SINK
<android.util.Slog: int v(java.lang.String,java.lang.String,java.lang.Throwable)>;LOG;SINK
<android.util.Slog: int w(java.lang.String,java.lang.String)>;LOG;SINK
<android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>;LOG;SINK
<android.util.Slog: int w(java.lang.String,java.lang.Throwable)>;LOG;SINK
<android.view.IWindowManager$Stub$Proxy: void setNewConfiguration(android.content.res.Configuration)>;SYSTEM_SETTINGS;SINK
<android.view.accessibility.AccessibilityManager: void sendAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>;LOG;SINK
<android.view.inputmethod.InputMethodManager: boolean setCurrentInputMethodSubtype(android.view.inputmethod.InputMethodSubtype)>;LOG;SINK
<android.view.inputmethod.InputMethodManager: void doDump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>;FILE;SINK
<android.view.inputmethod.InputMethodManager: void sendAppPrivateCommand(android.view.View,java.lang.String,android.os.Bundle)>;LOG;SINK
<android.view.inputmethod.InputMethodManager: void setAdditionalInputMethodSubtypes(java.lang.String,android.view.inputmethod.InputMethodSubtype[])>;LOG;SINK
<android.view.inputmethod.InputMethodManager: void updateCursor(android.view.View,int,int,int,int)>;LOG;SINK
<android.view.inputmethod.InputMethodManager: void updateSelection(android.view.View,int,int,int,int)>;LOG;SINK
<android.webkit.DeviceMotionAndOrientationManager: void setMockOrientation(boolean,double,boolean,double,boolean,double)>;SYSTEM_SETTINGS;SINK
<android.widget.QuickContactBadge: void setMode(int)>;CONTACT_INFORMATION;SINK
<android.widget.RemoteViewsAdapter$RemoteViewsAdapterServiceConnection: void bind(android.content.Context,int,android.content.Intent)>;LOG;SINK
<com.android.internal.logging.AndroidHandler: void publish(java.util.logging.LogRecord)>;LOG;SINK
<com.android.internal.logging.AndroidHandler: void publish(java.util.logging.Logger,java.lang.String,java.util.logging.Level,java.lang.String)>;LOG;SINK
<com.android.internal.os.AndroidPrintStream: void log(java.lang.String)>;LOG;SINK
<com.android.internal.telephony.AdnRecordCache: void requestLoadAllAdnLike(int,int,android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.AdnRecordCache: void updateAdnByIndex(int,com.android.internal.telephony.AdnRecord,int,java.lang.String,android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.AdnRecordCache: void updateAdnBySearch(int,com.android.internal.telephony.AdnRecord,com.android.internal.telephony.AdnRecord,java.lang.String,android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.ApnContext: void setApnSetting(com.android.internal.telephony.ApnSetting)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.ApnContext: void setDataConnection(com.android.internal.telephony.DataConnection)>;PHONE_STATE;SINK
<com.android.internal.telephony.ApnContext: void setDataConnectionAc(com.android.internal.telephony.DataConnectionAc)>;PHONE_STATE;SINK
<com.android.internal.telephony.ApnContext: void setDependencyMet(boolean)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.ApnContext: void setEnabled(boolean)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.ApnContext: void setReason(java.lang.String)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.ApnContext: void setWaitingApns(java.util.ArrayList)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.BaseCommands: void setEmergencyCallbackMode(android.os.Handler,int,java.lang.Object)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.BaseCommands: void setOnCallRing(android.os.Handler,int,java.lang.Object)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.BaseCommands: void setOnCatCallSetUp(android.os.Handler,int,java.lang.Object)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.BaseCommands: void setOnCatEvent(android.os.Handler,int,java.lang.Object)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.BaseCommands: void setOnCatProactiveCmd(android.os.Handler,int,java.lang.Object)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.BaseCommands: void setOnCatSessionEnd(android.os.Handler,int,java.lang.Object)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.BaseCommands: void setOnIccRefresh(android.os.Handler,int,java.lang.Object)>;PHONE_STATE;SINK
<com.android.internal.telephony.BaseCommands: void setOnIccSmsFull(android.os.Handler,int,java.lang.Object)>;PHONE_STATE;SINK
<com.android.internal.telephony.BaseCommands: void setOnNITZTime(android.os.Handler,int,java.lang.Object)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.BaseCommands: void setOnNewCdmaSms(android.os.Handler,int,java.lang.Object)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.BaseCommands: void setOnNewGsmBroadcastSms(android.os.Handler,int,java.lang.Object)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.BaseCommands: void setOnNewGsmSms(android.os.Handler,int,java.lang.Object)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.BaseCommands: void setOnRestrictedStateChanged(android.os.Handler,int,java.lang.Object)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.BaseCommands: void setOnSignalStrengthUpdate(android.os.Handler,int,java.lang.Object)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.BaseCommands: void setOnSmsOnSim(android.os.Handler,int,java.lang.Object)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.BaseCommands: void setOnSmsStatus(android.os.Handler,int,java.lang.Object)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.BaseCommands: void setOnSuppServiceNotification(android.os.Handler,int,java.lang.Object)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.BaseCommands: void setOnUSSD(android.os.Handler,int,java.lang.Object)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.BaseCommands: void setOnUnsolOemHookRaw(android.os.Handler,int,java.lang.Object)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.DataConnection$DcActivatingState: boolean processMessage(android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.DataConnection$DcActiveState: boolean processMessage(android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.DataConnection$DcDefaultState: boolean processMessage(android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.DataConnection$DcDisconnectingState: boolean processMessage(android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.DataConnection$DcDisconnectionErrorCreatingConnection: boolean processMessage(android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.DataConnection$DcInactiveState: boolean processMessage(android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.DataConnectionAc: void addApnContextSync(com.android.internal.telephony.ApnContext)>;PHONE_CONNECTION;SINK
<com.android.internal.telephony.DataConnectionAc: void removeApnContextSync(com.android.internal.telephony.ApnContext)>;PHONE_CONNECTION;SINK
<com.android.internal.telephony.DataConnectionAc: void reqAddApnContext(com.android.internal.telephony.ApnContext)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.DataConnectionAc: void reqRemomveApnContext(com.android.internal.telephony.ApnContext)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.DataConnectionAc: void reqSetLinkPropertiesHttpProxy(android.net.ProxyProperties)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.DataConnectionAc: void reqSetReconnectIntent(android.app.PendingIntent)>;PHONE_CONNECTION;SINK
<com.android.internal.telephony.DataConnectionAc: void reqUpdateLinkPropertiesDataCallState(com.android.internal.telephony.DataCallState)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.DataConnectionAc: void setLinkPropertiesHttpProxySync(android.net.ProxyProperties)>;PHONE_CONNECTION;SINK
<com.android.internal.telephony.DataConnectionAc: void setReconnectIntentSync(android.app.PendingIntent)>;PHONE_CONNECTION;SINK
<com.android.internal.telephony.DataConnectionTracker: boolean setInternalDataEnabled(boolean)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.DataConnectionTracker: void notifyDataConnection(java.lang.String)>;PHONE_STATE;SINK
<com.android.internal.telephony.DataConnectionTracker: void notifyOffApnsOfAvailability(java.lang.String)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.DataConnectionTracker: void setDataOnRoamingEnabled(boolean)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.DefaultPhoneNotifier: void notifyCallForwardingChanged(com.android.internal.telephony.Phone)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.DefaultPhoneNotifier: void notifyDataActivity(com.android.internal.telephony.Phone)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.DefaultPhoneNotifier: void notifyDataConnectionFailed(com.android.internal.telephony.Phone,java.lang.String,java.lang.String)>;PHONE_STATE;SINK
<com.android.internal.telephony.DefaultPhoneNotifier: void notifyMessageWaitingChanged(com.android.internal.telephony.Phone)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.DefaultPhoneNotifier: void notifyOtaspChanged(com.android.internal.telephony.Phone,int)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.DefaultPhoneNotifier: void notifyPhoneState(com.android.internal.telephony.Phone)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.DefaultPhoneNotifier: void notifyServiceState(com.android.internal.telephony.Phone)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.DefaultPhoneNotifier: void notifySignalStrength(com.android.internal.telephony.Phone)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.GsmAlphabet: java.lang.String gsm8BitUnpackedToString(byte[],int,int,java.lang.String)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.IIccPhoneBook$Stub$Proxy: boolean updateAdnRecordsInEfByIndex(int,java.lang.String,java.lang.String,int,java.lang.String)>;CONTACT_INFORMATION;SINK
<com.android.internal.telephony.IIccPhoneBook$Stub$Proxy: boolean updateAdnRecordsInEfBySearch(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>;CONTACT_INFORMATION;SINK
<com.android.internal.telephony.IPhoneStateListener$Stub$Proxy: void onCallStateChanged(int,java.lang.String)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.IPhoneStateListener$Stub$Proxy: void onDataActivity(int)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.IPhoneStateListener$Stub$Proxy: void onDataConnectionStateChanged(int,int)>;PHONE_STATE;SINK
<com.android.internal.telephony.IPhoneStateListener$Stub$Proxy: void onOtaspChanged(int)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.IPhoneStateListener$Stub$Proxy: void onSignalStrengthChanged(int)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.ISms$Stub$Proxy: boolean copyMessageToIccEf(int,byte[],byte[])>;SMS_MMS;SINK
<com.android.internal.telephony.ISms$Stub$Proxy: boolean disableCellBroadcast(int)>;SMS_MMS;SINK
<com.android.internal.telephony.ISms$Stub$Proxy: boolean disableCellBroadcastRange(int,int)>;SMS_MMS;SINK
<com.android.internal.telephony.ISms$Stub$Proxy: boolean enableCellBroadcast(int)>;SMS_MMS;SINK
<com.android.internal.telephony.ISms$Stub$Proxy: boolean enableCellBroadcastRange(int,int)>;SMS_MMS;SINK
<com.android.internal.telephony.ISms$Stub$Proxy: boolean updateMessageOnIccEf(int,int,byte[])>;SMS_MMS;SINK
<com.android.internal.telephony.ISms$Stub$Proxy: void sendData(java.lang.String,java.lang.String,int,byte[],android.app.PendingIntent,android.app.PendingIntent)>;SMS_MMS;SINK
<com.android.internal.telephony.ISms$Stub$Proxy: void sendText(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>;SMS_MMS;SINK
<com.android.internal.telephony.ITelephony$Stub$Proxy: boolean handlePinMmi(java.lang.String)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.ITelephony$Stub$Proxy: boolean setRadio(boolean)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.ITelephony$Stub$Proxy: boolean supplyPin(java.lang.String)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.ITelephony$Stub$Proxy: boolean supplyPuk(java.lang.String,java.lang.String)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.ITelephony$Stub$Proxy: int disableApnType(java.lang.String)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.ITelephony$Stub$Proxy: int enableApnType(java.lang.String)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.ITelephony$Stub$Proxy: void call(java.lang.String)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.ITelephony$Stub$Proxy: void dial(java.lang.String)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void listen(java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyCallForwardingChanged(boolean)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyCallState(int,java.lang.String)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyCellLocation(android.os.Bundle)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyDataActivity(int)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyDataConnection(int,boolean,java.lang.String,java.lang.String,java.lang.String,android.net.LinkProperties,android.net.LinkCapabilities,int,boolean)>;PHONE_STATE;SINK
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyDataConnectionFailed(java.lang.String,java.lang.String)>;PHONE_STATE;SINK
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyMessageWaitingChanged(boolean)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyOtaspChanged(int)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyServiceState(android.telephony.ServiceState)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifySignalStrength(android.telephony.SignalStrength)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.IWapPushManager$Stub$Proxy: boolean addPackage(java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,boolean,boolean)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.IWapPushManager$Stub$Proxy: boolean deletePackage(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.IWapPushManager$Stub$Proxy: boolean updatePackage(java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,boolean,boolean)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.IWapPushManager$Stub$Proxy: int processMessage(java.lang.String,java.lang.String,android.content.Intent)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.IccCardStatus: void setCardState(int)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.IccCardStatus: void setUniversalPinState(int)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.IccFileHandler: void updateEFLinearFixed(int,int,byte[],java.lang.String,android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.IccPhoneBookInterfaceManager: boolean updateAdnRecordsInEfByIndex(int,java.lang.String,java.lang.String,int,java.lang.String)>;CONTACT_INFORMATION;SINK
<com.android.internal.telephony.IccPhoneBookInterfaceManager: boolean updateAdnRecordsInEfBySearch(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>;CONTACT_INFORMATION;SINK
<com.android.internal.telephony.IccPhoneBookInterfaceManagerProxy: boolean updateAdnRecordsInEfByIndex(int,java.lang.String,java.lang.String,int,java.lang.String)>;CONTACT_INFORMATION;SINK
<com.android.internal.telephony.IccPhoneBookInterfaceManagerProxy: boolean updateAdnRecordsInEfBySearch(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>;CONTACT_INFORMATION;SINK
<com.android.internal.telephony.IccRecords: void setMsisdnNumber(java.lang.String,java.lang.String,android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.IccRecords: void setVoiceCallForwardingFlag(int,boolean)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.IccSmsInterfaceManager: void sendData(java.lang.String,java.lang.String,int,byte[],android.app.PendingIntent,android.app.PendingIntent)>;SMS_MMS;SINK
<com.android.internal.telephony.IccSmsInterfaceManager: void sendText(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>;SMS_MMS;SINK
<com.android.internal.telephony.IccSmsInterfaceManagerProxy: boolean enableCellBroadcast(int)>;SMS_MMS;SINK
<com.android.internal.telephony.IccSmsInterfaceManagerProxy: boolean enableCellBroadcastRange(int,int)>;SMS_MMS;SINK
<com.android.internal.telephony.IccSmsInterfaceManagerProxy: boolean updateMessageOnIccEf(int,int,byte[])>;SMS_MMS;SINK
<com.android.internal.telephony.IccSmsInterfaceManagerProxy: void sendData(java.lang.String,java.lang.String,int,byte[],android.app.PendingIntent,android.app.PendingIntent)>;SMS_MMS;SINK
<com.android.internal.telephony.IccSmsInterfaceManagerProxy: void sendText(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>;SMS_MMS;SINK
<com.android.internal.telephony.IntRangeManager: boolean disableRange(int,int,java.lang.String)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.IntRangeManager: boolean enableRange(int,int,java.lang.String)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.PhoneBase: int enableApnType(java.lang.String)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.PhoneBase: void disableDnsCheck(boolean)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.PhoneBase: void invokeOemRilRequestStrings(java.lang.String[],android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.PhoneBase: void notifyDataConnection(java.lang.String)>;PHONE_STATE;SINK
<com.android.internal.telephony.PhoneBase: void notifyDataConnection(java.lang.String,java.lang.String)>;PHONE_STATE;SINK
<com.android.internal.telephony.PhoneBase: void notifyDataConnectionFailed(java.lang.String,java.lang.String)>;PHONE_STATE;SINK
<com.android.internal.telephony.PhoneBase: void notifyDisconnectP(com.android.internal.telephony.Connection)>;PHONE_STATE;SINK
<com.android.internal.telephony.PhoneBase: void notifyNewRingingConnectionP(com.android.internal.telephony.Connection)>;PHONE_STATE;SINK
<com.android.internal.telephony.PhoneBase: void notifyOtaspChanged(int)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.PhoneBase: void notifyServiceStateChangedP(android.telephony.ServiceState)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.PhoneBase: void restoreSavedNetworkSelection(android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.PhoneBase: void sendBurstDtmf(java.lang.String,int,int,android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.PhoneBase: void setBandMode(int,android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.PhoneBase: void setCdmaRoamingPreference(int,android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.PhoneBase: void setCdmaSubscription(int,android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.PhoneBase: void setEchoSuppressionEnabled(boolean)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.PhoneBase: void setOnEcbModeExitResponse(android.os.Handler,int,java.lang.Object)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.PhoneBase: void setPreferredNetworkType(int,android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.PhoneBase: void setSmscAddress(java.lang.String,android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.PhoneBase: void setSystemProperty(java.lang.String,java.lang.String)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.PhoneBase: void setTTYMode(int,android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.PhoneBase: void setVoiceMessageWaiting(int,int)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.PhoneProxy: com.android.internal.telephony.Connection dial(java.lang.String)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.PhoneProxy: com.android.internal.telephony.Connection dial(java.lang.String,com.android.internal.telephony.UUSInfo)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.PhoneProxy: int enableApnType(java.lang.String)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.PhoneProxy: void enableEnhancedVoicePrivacy(boolean,android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.PhoneProxy: void sendBurstDtmf(java.lang.String,int,int,android.os.Message)>;PHONE_CONNECTION;SINK
<com.android.internal.telephony.PhoneProxy: void sendDtmf(char)>;PHONE_CONNECTION;SINK
<com.android.internal.telephony.PhoneProxy: void sendUssdResponse(java.lang.String)>;PHONE_CONNECTION;SINK
<com.android.internal.telephony.PhoneProxy: void setBandMode(int,android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.PhoneProxy: void setCallForwardingOption(int,int,java.lang.String,int,android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.PhoneProxy: void setCallWaiting(boolean,android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.PhoneProxy: void setCdmaRoamingPreference(int,android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.PhoneProxy: void setCdmaSubscription(int,android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.PhoneProxy: void setCellBroadcastSmsConfig(int[],android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.PhoneProxy: void setDataRoamingEnabled(boolean)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.PhoneProxy: void setEchoSuppressionEnabled(boolean)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.PhoneProxy: void setLine1Number(java.lang.String,java.lang.String,android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.PhoneProxy: void setMute(boolean)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.PhoneProxy: void setNetworkSelectionModeAutomatic(android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.PhoneProxy: void setOnEcbModeExitResponse(android.os.Handler,int,java.lang.Object)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.PhoneProxy: void setOnPostDialCharacter(android.os.Handler,int,java.lang.Object)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.PhoneProxy: void setOutgoingCallerIdDisplay(int,android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.PhoneProxy: void setPreferredNetworkType(int,android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.PhoneProxy: void setRadioPower(boolean)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.PhoneProxy: void setSmscAddress(java.lang.String,android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.PhoneProxy: void setTTYMode(int,android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.PhoneProxy: void setUnitTestMode(boolean)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.PhoneProxy: void setVoiceMailNumber(java.lang.String,java.lang.String,android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.PhoneProxy: void setVoiceMessageWaiting(int,int)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.PhoneProxy: void startDtmf(char)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.PhoneSubInfo: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>;FILE;SINK
<com.android.internal.telephony.PhoneSubInfoProxy: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>;FILE;SINK
<com.android.internal.telephony.RIL: void acceptCall(android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.RIL: void acknowledgeIncomingGsmSmsWithPdu(boolean,java.lang.String,android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.RIL: void acknowledgeLastIncomingCdmaSms(boolean,int,android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.RIL: void acknowledgeLastIncomingGsmSms(boolean,int,android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.RIL: void cancelPendingUssd(android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.RIL: void changeBarringPassword(java.lang.String,java.lang.String,java.lang.String,android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.RIL: void changeIccPin2ForApp(java.lang.String,java.lang.String,java.lang.String,android.os.Message)>;PHONE_STATE;SINK
<com.android.internal.telephony.RIL: void changeIccPinForApp(java.lang.String,java.lang.String,java.lang.String,android.os.Message)>;PHONE_STATE;SINK
<com.android.internal.telephony.RIL: void conference(android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.RIL: void deactivateDataCall(int,int,android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.RIL: void deleteSmsOnRuim(int,android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.RIL: void deleteSmsOnSim(int,android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.RIL: void dial(java.lang.String,int,android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.RIL: void dial(java.lang.String,int,com.android.internal.telephony.UUSInfo,android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.RIL: void exitEmergencyCallbackMode(android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.RIL: void explicitCallTransfer(android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.RIL: void handleCallSetupRequestFromSim(boolean,android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.RIL: void hangupConnection(int,android.os.Message)>;PHONE_STATE;SINK
<com.android.internal.telephony.RIL: void hangupForegroundResumeBackground(android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.RIL: void hangupWaitingOrBackground(android.os.Message)>;PHONE_CONNECTION;SINK
<com.android.internal.telephony.RIL: void invokeOemRilRequestRaw(byte[],android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.RIL: void invokeOemRilRequestStrings(java.lang.String[],android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.RIL: void queryCallForwardStatus(int,int,java.lang.String,android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.RIL: void queryCallWaiting(int,android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.RIL: void queryFacilityLockForApp(java.lang.String,java.lang.String,int,java.lang.String,android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.RIL: void rejectCall(android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.RIL: void reportSmsMemoryStatus(boolean,android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.RIL: void reportStkServiceIsRunning(android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.RIL: void requestIsimAuthentication(java.lang.String,android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.RIL: void resetRadio(android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.RIL: void sendBurstDtmf(java.lang.String,int,int,android.os.Message)>;PHONE_CONNECTION;SINK
<com.android.internal.telephony.RIL: void sendCDMAFeatureCode(java.lang.String,android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.RIL: void sendCdmaSms(byte[],android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.RIL: void sendDtmf(char,android.os.Message)>;PHONE_CONNECTION;SINK
<com.android.internal.telephony.RIL: void sendEnvelope(java.lang.String,android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.RIL: void sendEnvelopeWithStatus(java.lang.String,android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.RIL: void sendSMS(java.lang.String,java.lang.String,android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.RIL: void sendTerminalResponse(java.lang.String,android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.RIL: void sendUSSD(java.lang.String,android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.RIL: void separateConnection(int,android.os.Message)>;PHONE_STATE;SINK
<com.android.internal.telephony.RIL: void setBandMode(int,android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.RIL: void setCLIR(int,android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.RIL: void setCallForward(int,int,int,java.lang.String,int,android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.RIL: void setCallWaiting(boolean,int,android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.RIL: void setCdmaBroadcastActivation(boolean,android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.RIL: void setCdmaBroadcastConfig(int[],android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.RIL: void setCdmaRoamingPreference(int,android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.RIL: void setCdmaSubscriptionSource(int,android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.RIL: void setCurrentPreferredNetworkType()>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.RIL: void setFacilityLock(java.lang.String,boolean,java.lang.String,int,android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.RIL: void setFacilityLockForApp(java.lang.String,boolean,java.lang.String,int,java.lang.String,android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.RIL: void setGsmBroadcastActivation(boolean,android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.RIL: void setGsmBroadcastConfig(com.android.internal.telephony.gsm.SmsBroadcastConfigInfo[],android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.RIL: void setLocationUpdates(boolean,android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.RIL: void setMute(boolean,android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.RIL: void setNetworkSelectionModeAutomatic(android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.RIL: void setNetworkSelectionModeManual(java.lang.String,android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.RIL: void setOnNITZTime(android.os.Handler,int,java.lang.Object)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.RIL: void setPreferredNetworkType(int,android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.RIL: void setPreferredVoicePrivacy(boolean,android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.RIL: void setRadioPower(boolean,android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.RIL: void setSmscAddress(java.lang.String,android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.RIL: void setSuppServiceNotifications(boolean,android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.RIL: void setTTYMode(int,android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.RIL: void setupDataCall(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.RIL: void startDtmf(char,android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.RIL: void stopDtmf(android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.RIL: void supplyIccPin2ForApp(java.lang.String,java.lang.String,android.os.Message)>;PHONE_STATE;SINK
<com.android.internal.telephony.RIL: void supplyIccPinForApp(java.lang.String,java.lang.String,android.os.Message)>;PHONE_STATE;SINK
<com.android.internal.telephony.RIL: void supplyIccPuk2ForApp(java.lang.String,java.lang.String,java.lang.String,android.os.Message)>;PHONE_STATE;SINK
<com.android.internal.telephony.RIL: void supplyIccPukForApp(java.lang.String,java.lang.String,java.lang.String,android.os.Message)>;PHONE_STATE;SINK
<com.android.internal.telephony.RIL: void supplyNetworkDepersonalization(java.lang.String,android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.RIL: void switchWaitingOrHoldingAndActive(android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.RIL: void writeSmsToRuim(int,java.lang.String,android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.RIL: void writeSmsToSim(int,java.lang.String,java.lang.String,android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.SMSDispatcher: int processMessagePart(byte[],java.lang.String,int,int,int,long,int,boolean)>;SMS_MMS;SINK
<com.android.internal.telephony.SMSDispatcher: void dispatch(android.content.Intent,java.lang.String)>;SMS_MMS;SINK
<com.android.internal.telephony.SMSDispatcher: void dispatchPdus(byte[][])>;SMS_MMS;SINK
<com.android.internal.telephony.SMSDispatcher: void dispatchPortAddressedPdus(byte[][],int)>;SMS_MMS;SINK
<com.android.internal.telephony.SMSDispatcher: void handleSendComplete(android.os.AsyncResult)>;SMS_MMS;SINK
<com.android.internal.telephony.SmsHeader: byte[] toByteArray(com.android.internal.telephony.SmsHeader)>;SMS_MMS;SINK
<com.android.internal.telephony.SmsUsageMonitor: boolean check(java.lang.String,int)>;SMS_MMS;SINK
<com.android.internal.telephony.WapPushOverSms: int dispatchWapPdu(byte[])>;SMS_MMS;SINK
<com.android.internal.telephony.cat.CommandParams: boolean setIcon(android.graphics.Bitmap)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.cat.GetInkeyInputResponseData: void format(java.io.ByteArrayOutputStream)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.cat.Input: boolean setIcon(android.graphics.Bitmap)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.cat.Item: void writeToParcel(android.os.Parcel,int)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.cat.Menu: void writeToParcel(android.os.Parcel,int)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.cat.ResponseData: void writeLength(java.io.ByteArrayOutputStream,int)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.cat.RilMessageDecoder$StateCmdParamsReady: boolean processMessage(android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.cat.RilMessageDecoder$StateStart: boolean processMessage(android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.cat.RilMessageDecoder: void sendMsgParamsDecoded(com.android.internal.telephony.cat.ResultCode,com.android.internal.telephony.cat.CommandParams)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.cat.RilMessageDecoder: void sendStartDecodingMessageParams(com.android.internal.telephony.cat.RilMessage)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.cdma.CDMALTEPhone: com.android.internal.telephony.Connection dial(java.lang.String)>;VOIP;SINK
<com.android.internal.telephony.cdma.CDMALTEPhone: void enableEnhancedVoicePrivacy(boolean,android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.cdma.CDMALTEPhone: void notifyDataConnection(java.lang.String,java.lang.String)>;PHONE_STATE;SINK
<com.android.internal.telephony.cdma.CDMALTEPhone: void sendDtmf(char)>;PHONE_CONNECTION;SINK
<com.android.internal.telephony.cdma.CDMALTEPhone: void setBandMode(int,android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.cdma.CDMALTEPhone: void setCdmaSubscription(int,android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.cdma.CDMALTEPhone: void setSmscAddress(java.lang.String,android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.cdma.CDMAPhone: boolean handlePinMmi(java.lang.String)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.cdma.CDMAPhone: boolean updateCurrentCarrierInProvider(java.lang.String)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.cdma.CDMAPhone: com.android.internal.telephony.Connection dial(java.lang.String)>;VOIP;SINK
<com.android.internal.telephony.cdma.CDMAPhone: com.android.internal.telephony.Connection dial(java.lang.String,com.android.internal.telephony.UUSInfo)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.cdma.CDMAPhone: void enableEnhancedVoicePrivacy(boolean,android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.cdma.CDMAPhone: void notifyDataConnection(java.lang.String,java.lang.String)>;PHONE_STATE;SINK
<com.android.internal.telephony.cdma.CDMAPhone: void notifyDisconnect(com.android.internal.telephony.Connection)>;PHONE_STATE;SINK
<com.android.internal.telephony.cdma.CDMAPhone: void notifyNewRingingConnection(com.android.internal.telephony.Connection)>;PHONE_STATE;SINK
<com.android.internal.telephony.cdma.CDMAPhone: void notifyServiceStateChanged(android.telephony.ServiceState)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.cdma.CDMAPhone: void restoreSavedNetworkSelection(android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.cdma.CDMAPhone: void sendBurstDtmf(java.lang.String,int,int,android.os.Message)>;PHONE_CONNECTION;SINK
<com.android.internal.telephony.cdma.CDMAPhone: void sendDtmf(char)>;PHONE_CONNECTION;SINK
<com.android.internal.telephony.cdma.CDMAPhone: void sendUssdResponse(java.lang.String)>;SMS_MMS;SINK
<com.android.internal.telephony.cdma.CDMAPhone: void setCallForwardingOption(int,int,java.lang.String,int,android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.cdma.CDMAPhone: void setCallWaiting(boolean,android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.cdma.CDMAPhone: void setCdmaSubscription(int,android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.cdma.CDMAPhone: void setCellBroadcastSmsConfig(int[],android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.cdma.CDMAPhone: void setDataRoamingEnabled(boolean)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.cdma.CDMAPhone: void setLine1Number(java.lang.String,java.lang.String,android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.cdma.CDMAPhone: void setMute(boolean)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.cdma.CDMAPhone: void setNetworkSelectionModeAutomatic(android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.cdma.CDMAPhone: void setOnEcbModeExitResponse(android.os.Handler,int,java.lang.Object)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.cdma.CDMAPhone: void setOnPostDialCharacter(android.os.Handler,int,java.lang.Object)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.cdma.CDMAPhone: void setOutgoingCallerIdDisplay(int,android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.cdma.CDMAPhone: void setRadioPower(boolean)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.cdma.CDMAPhone: void setSmscAddress(java.lang.String,android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.cdma.CDMAPhone: void setSystemProperty(java.lang.String,java.lang.String)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.cdma.CDMAPhone: void startDtmf(char)>;PHONE_CONNECTION;SINK
<com.android.internal.telephony.cdma.CdmaCallTracker: com.android.internal.telephony.Connection dial(java.lang.String)>;CONTACT_INFORMATION;SINK
<com.android.internal.telephony.cdma.CdmaCallTracker: com.android.internal.telephony.Connection dial(java.lang.String,int)>;CONTACT_INFORMATION;SINK
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void onDataSetupComplete(android.os.AsyncResult)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void onDisconnectDone(int,android.os.AsyncResult)>;PHONE_CONNECTION;SINK
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void setDataOnRoamingEnabled(boolean)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void fixTimeZone(java.lang.String)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void setCdmaTechnology(int)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: int dispatchMessage(com.android.internal.telephony.SmsMessageBase)>;SMS_MMS;SINK
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: int processMessagePart(byte[],java.lang.String,int,int,int,long,int,boolean)>;SMS_MMS;SINK
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: void dispatch(android.content.Intent,java.lang.String)>;SMS_MMS;SINK
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: void sendData(java.lang.String,java.lang.String,int,byte[],android.app.PendingIntent,android.app.PendingIntent)>;SMS_MMS;SINK
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: void sendNewSubmitPdu(java.lang.String,java.lang.String,java.lang.String,com.android.internal.telephony.SmsHeader,int,android.app.PendingIntent,android.app.PendingIntent,boolean)>;SMS_MMS;SINK
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: void sendText(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>;SMS_MMS;SINK
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void fixTimeZone(java.lang.String)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.cdma.RuimRecords: void setMsisdnNumber(java.lang.String,java.lang.String,android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.cdma.RuimRecords: void setVoiceMailNumber(java.lang.String,java.lang.String,android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.cdma.RuimSmsInterfaceManager: boolean copyMessageToIccEf(int,byte[],byte[])>;SMS_MMS;SINK
<com.android.internal.telephony.cdma.RuimSmsInterfaceManager: boolean enableCellBroadcast(int)>;SMS_MMS;SINK
<com.android.internal.telephony.cdma.RuimSmsInterfaceManager: boolean enableCellBroadcastRange(int,int)>;SMS_MMS;SINK
<com.android.internal.telephony.cdma.RuimSmsInterfaceManager: boolean updateMessageOnIccEf(int,int,byte[])>;SMS_MMS;SINK
<com.android.internal.telephony.cdma.RuimSmsInterfaceManager: void sendData(java.lang.String,java.lang.String,int,byte[],android.app.PendingIntent,android.app.PendingIntent)>;SMS_MMS;SINK
<com.android.internal.telephony.gsm.GSMPhone: boolean handlePinMmi(java.lang.String)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.gsm.GSMPhone: com.android.internal.telephony.Connection dial(java.lang.String)>;VOIP;SINK
<com.android.internal.telephony.gsm.GSMPhone: com.android.internal.telephony.Connection dial(java.lang.String,com.android.internal.telephony.UUSInfo)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.gsm.GSMPhone: void notifyDataConnection(java.lang.String,java.lang.String)>;PHONE_STATE;SINK
<com.android.internal.telephony.gsm.GSMPhone: void notifyDisconnect(com.android.internal.telephony.Connection)>;PHONE_STATE;SINK
<com.android.internal.telephony.gsm.GSMPhone: void notifyNewRingingConnection(com.android.internal.telephony.Connection)>;PHONE_STATE;SINK
<com.android.internal.telephony.gsm.GSMPhone: void notifyServiceStateChanged(android.telephony.ServiceState)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.gsm.GSMPhone: void saveClirSetting(int)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.gsm.GSMPhone: void sendBurstDtmf(java.lang.String)>;PHONE_CONNECTION;SINK
<com.android.internal.telephony.gsm.GSMPhone: void sendDtmf(char)>;PHONE_CONNECTION;SINK
<com.android.internal.telephony.gsm.GSMPhone: void sendUssdResponse(java.lang.String)>;PHONE_CONNECTION;SINK
<com.android.internal.telephony.gsm.GSMPhone: void setCallForwardingOption(int,int,java.lang.String,int,android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.gsm.GSMPhone: void setCallWaiting(boolean,android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.gsm.GSMPhone: void setCdmaSubscription(int,android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.gsm.GSMPhone: void setCellBroadcastSmsConfig(int[],android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.gsm.GSMPhone: void setDataRoamingEnabled(boolean)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.gsm.GSMPhone: void setLine1Number(java.lang.String,java.lang.String,android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.gsm.GSMPhone: void setMute(boolean)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.gsm.GSMPhone: void setOnPostDialCharacter(android.os.Handler,int,java.lang.Object)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.gsm.GSMPhone: void setOutgoingCallerIdDisplay(int,android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.gsm.GSMPhone: void setRadioPower(boolean)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.gsm.GSMPhone: void setSmscAddress(java.lang.String,android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.gsm.GSMPhone: void setSystemProperty(java.lang.String,java.lang.String)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.gsm.GSMPhone: void startDtmf(char)>;PHONE_CONNECTION;SINK
<com.android.internal.telephony.gsm.GsmCallTracker: com.android.internal.telephony.Connection dial(java.lang.String)>;CONTACT_INFORMATION;SINK
<com.android.internal.telephony.gsm.GsmCallTracker: com.android.internal.telephony.Connection dial(java.lang.String,com.android.internal.telephony.UUSInfo)>;CONTACT_INFORMATION;SINK
<com.android.internal.telephony.gsm.GsmCallTracker: com.android.internal.telephony.Connection dial(java.lang.String,int)>;CONTACT_INFORMATION;SINK
<com.android.internal.telephony.gsm.GsmCallTracker: com.android.internal.telephony.Connection dial(java.lang.String,int,com.android.internal.telephony.UUSInfo)>;CONTACT_INFORMATION;SINK
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void notifyDataConnection(java.lang.String)>;PHONE_STATE;SINK
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void notifyOffApnsOfAvailability(java.lang.String)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onDataSetupComplete(android.os.AsyncResult)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onDisconnectDone(int,android.os.AsyncResult)>;PHONE_CONNECTION;SINK
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void setDataOnRoamingEnabled(boolean)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.gsm.GsmMmiCode: void sendUssd(java.lang.String)>;PHONE_CONNECTION;SINK
<com.android.internal.telephony.gsm.GsmSMSDispatcher: int dispatchMessage(com.android.internal.telephony.SmsMessageBase)>;SMS_MMS;SINK
<com.android.internal.telephony.gsm.GsmSMSDispatcher: int processMessagePart(byte[],java.lang.String,int,int,int,long,int,boolean)>;SMS_MMS;SINK
<com.android.internal.telephony.gsm.GsmSMSDispatcher: void dispatch(android.content.Intent,java.lang.String)>;SMS_MMS;SINK
<com.android.internal.telephony.gsm.GsmSMSDispatcher: void sendData(java.lang.String,java.lang.String,int,byte[],android.app.PendingIntent,android.app.PendingIntent)>;SMS_MMS;SINK
<com.android.internal.telephony.gsm.GsmSMSDispatcher: void sendNewSubmitPdu(java.lang.String,java.lang.String,java.lang.String,com.android.internal.telephony.SmsHeader,int,android.app.PendingIntent,android.app.PendingIntent,boolean)>;SMS_MMS;SINK
<com.android.internal.telephony.gsm.GsmSMSDispatcher: void sendText(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>;SMS_MMS;SINK
<com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager: boolean updateAdnRecordsInEfBySearch(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>;CONTACT_INFORMATION;SINK
<com.android.internal.telephony.gsm.SimSmsInterfaceManager: boolean copyMessageToIccEf(int,byte[],byte[])>;SMS_MMS;SINK
<com.android.internal.telephony.gsm.SimSmsInterfaceManager: boolean enableCellBroadcast(int)>;SMS_MMS;SINK
<com.android.internal.telephony.gsm.SimSmsInterfaceManager: boolean enableCellBroadcastRange(int,int)>;SMS_MMS;SINK
<com.android.internal.telephony.gsm.SimSmsInterfaceManager: boolean updateMessageOnIccEf(int,int,byte[])>;SMS_MMS;SINK
<com.android.internal.telephony.gsm.SimSmsInterfaceManager: void sendData(java.lang.String,java.lang.String,int,byte[],android.app.PendingIntent,android.app.PendingIntent)>;SMS_MMS;SINK
<com.android.internal.telephony.gsm.UsimPhoneBookManager$PbrFile: void parseEf(com.android.internal.telephony.gsm.SimTlv,java.util.Map,int)>;CONTACT_INFORMATION;SINK
<com.android.internal.telephony.gsm.UsimPhoneBookManager$PbrFile: void parseTag(com.android.internal.telephony.gsm.SimTlv,int)>;CONTACT_INFORMATION;SINK
<com.android.internal.telephony.sip.SipCommandInterface: void sendBurstDtmf(java.lang.String,int,int,android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.sip.SipCommandInterface: void sendCDMAFeatureCode(java.lang.String,android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.sip.SipCommandInterface: void sendCdmaSms(byte[],android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.sip.SipCommandInterface: void sendDtmf(char,android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.sip.SipCommandInterface: void sendEnvelope(java.lang.String,android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.sip.SipCommandInterface: void sendEnvelopeWithStatus(java.lang.String,android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.sip.SipCommandInterface: void sendSMS(java.lang.String,java.lang.String,android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.sip.SipCommandInterface: void sendTerminalResponse(java.lang.String,android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.sip.SipCommandInterface: void sendUSSD(java.lang.String,android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.sip.SipCommandInterface: void setBandMode(int,android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.sip.SipCommandInterface: void setCLIR(int,android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.sip.SipCommandInterface: void setCallForward(int,int,int,java.lang.String,int,android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.sip.SipCommandInterface: void setCallWaiting(boolean,int,android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.sip.SipCommandInterface: void setCdmaBroadcastActivation(boolean,android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.sip.SipCommandInterface: void setCdmaBroadcastConfig(int[],android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.sip.SipCommandInterface: void setCdmaRoamingPreference(int,android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.sip.SipCommandInterface: void setCdmaSubscriptionSource(int,android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.sip.SipCommandInterface: void setFacilityLock(java.lang.String,boolean,java.lang.String,int,android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.sip.SipCommandInterface: void setFacilityLockForApp(java.lang.String,boolean,java.lang.String,int,java.lang.String,android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.sip.SipCommandInterface: void setGsmBroadcastActivation(boolean,android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.sip.SipCommandInterface: void setGsmBroadcastConfig(com.android.internal.telephony.gsm.SmsBroadcastConfigInfo[],android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.sip.SipCommandInterface: void setLocationUpdates(boolean,android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.sip.SipCommandInterface: void setMute(boolean,android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.sip.SipCommandInterface: void setNetworkSelectionModeAutomatic(android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.sip.SipCommandInterface: void setNetworkSelectionModeManual(java.lang.String,android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.sip.SipCommandInterface: void setOnNITZTime(android.os.Handler,int,java.lang.Object)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.sip.SipCommandInterface: void setPhoneType(int)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.sip.SipCommandInterface: void setPreferredNetworkType(int,android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.sip.SipCommandInterface: void setPreferredVoicePrivacy(boolean,android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.sip.SipCommandInterface: void setRadioPower(boolean,android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.sip.SipCommandInterface: void setSmscAddress(java.lang.String,android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.sip.SipCommandInterface: void setSuppServiceNotifications(boolean,android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.sip.SipCommandInterface: void setTTYMode(int,android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.sip.SipCommandInterface: void setupDataCall(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.sip.SipPhone$SipCall: void setMute(boolean)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.sip.SipPhone$SipConnection: void setMute(boolean)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.Connection dial(java.lang.String)>;VOIP;SINK
<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.Connection dial(java.lang.String,com.android.internal.telephony.UUSInfo)>;VOIP;SINK
<com.android.internal.telephony.sip.SipPhone: void notifyDataConnection(java.lang.String,java.lang.String)>;PHONE_STATE;SINK
<com.android.internal.telephony.sip.SipPhone: void sendBurstDtmf(java.lang.String)>;PHONE_CONNECTION;SINK
<com.android.internal.telephony.sip.SipPhone: void sendDtmf(char)>;PHONE_CONNECTION;SINK
<com.android.internal.telephony.sip.SipPhone: void sendUssdResponse(java.lang.String)>;PHONE_CONNECTION;SINK
<com.android.internal.telephony.sip.SipPhone: void setCallForwardingOption(int,int,java.lang.String,int,android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.sip.SipPhone: void setCallWaiting(boolean,android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.sip.SipPhone: void setCdmaSubscription(int,android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.sip.SipPhone: void setCellBroadcastSmsConfig(int[],android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.sip.SipPhone: void setDataRoamingEnabled(boolean)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.sip.SipPhone: void setEchoSuppressionEnabled(boolean)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.sip.SipPhone: void setLine1Number(java.lang.String,java.lang.String,android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.sip.SipPhone: void setMute(boolean)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.sip.SipPhone: void setNetworkSelectionModeAutomatic(android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.sip.SipPhone: void setOnPostDialCharacter(android.os.Handler,int,java.lang.Object)>;VOIP;SINK
<com.android.internal.telephony.sip.SipPhone: void setOutgoingCallerIdDisplay(int,android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.sip.SipPhone: void setRadioPower(boolean)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.sip.SipPhone: void setSmscAddress(java.lang.String,android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.sip.SipPhone: void setVoiceMailNumber(java.lang.String,java.lang.String,android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.sip.SipPhone: void startDtmf(char)>;PHONE_CONNECTION;SINK
<com.android.internal.telephony.sip.SipPhoneBase: com.android.internal.telephony.Connection dial(java.lang.String,com.android.internal.telephony.UUSInfo)>;VOIP;SINK
<com.android.internal.telephony.sip.SipPhoneBase: void notifyDataConnection(java.lang.String,java.lang.String)>;PHONE_STATE;SINK
<com.android.internal.telephony.sip.SipPhoneBase: void notifyDisconnect(com.android.internal.telephony.Connection)>;PHONE_STATE;SINK
<com.android.internal.telephony.sip.SipPhoneBase: void notifyNewRingingConnection(com.android.internal.telephony.Connection)>;PHONE_STATE;SINK
<com.android.internal.telephony.sip.SipPhoneBase: void notifyServiceStateChanged(android.telephony.ServiceState)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.sip.SipPhoneBase: void restoreSavedNetworkSelection(android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.sip.SipPhoneBase: void sendUssdResponse(java.lang.String)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.sip.SipPhoneBase: void setBandMode(int,android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.sip.SipPhoneBase: void setCallForwardingOption(int,int,java.lang.String,int,android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.sip.SipPhoneBase: void setCallWaiting(boolean,android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.sip.SipPhoneBase: void setCdmaSubscription(int,android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.sip.SipPhoneBase: void setCellBroadcastSmsConfig(int[],android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.sip.SipPhoneBase: void setDataRoamingEnabled(boolean)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.sip.SipPhoneBase: void setLine1Number(java.lang.String,java.lang.String,android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.sip.SipPhoneBase: void setNetworkSelectionModeAutomatic(android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.sip.SipPhoneBase: void setOnPostDialCharacter(android.os.Handler,int,java.lang.Object)>;VOIP;SINK
<com.android.internal.telephony.sip.SipPhoneBase: void setOutgoingCallerIdDisplay(int,android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.sip.SipPhoneBase: void setRadioPower(boolean)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.sip.SipPhoneBase: void setSmscAddress(java.lang.String,android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.telephony.sip.SipPhoneBase: void setVoiceMailNumber(java.lang.String,java.lang.String,android.os.Message)>;SYSTEM_SETTINGS;SINK
<com.android.internal.util.AsyncChannel: android.os.Message sendMessageSynchronously(android.os.Message)>;SYNCHRONIZATION_DATA;SINK
<com.android.internal.util.AsyncChannel: android.os.Message sendMessageSynchronously(int)>;SYNCHRONIZATION_DATA;SINK
<com.android.internal.util.AsyncChannel: android.os.Message sendMessageSynchronously(int,int)>;SYNCHRONIZATION_DATA;SINK
<com.android.internal.util.AsyncChannel: android.os.Message sendMessageSynchronously(int,int,int)>;SYNCHRONIZATION_DATA;SINK
<com.android.internal.util.AsyncChannel: android.os.Message sendMessageSynchronously(int,int,int,java.lang.Object)>;SYNCHRONIZATION_DATA;SINK
<com.android.internal.util.AsyncChannel: android.os.Message sendMessageSynchronously(int,java.lang.Object)>;SYNCHRONIZATION_DATA;SINK
<dalvik.system.VMDebug: void startMethodTracing(java.lang.String,int,int)>;FILE;SINK
<dalvik.system.VMDebug: void startMethodTracing(java.lang.String,java.io.FileDescriptor,int,int)>;FILE;SINK
<gov.nist.javax.sip.header.Contact: void setExpires(int)>;CONTACT_INFORMATION;SINK
<gov.nist.javax.sip.header.Contact: void setParameter(java.lang.String,java.lang.String)>;CONTACT_INFORMATION;SINK
<gov.nist.javax.sip.header.Contact: void setPubGruuParam(java.lang.String)>;CONTACT_INFORMATION;SINK
<gov.nist.javax.sip.header.Contact: void setQValue(float)>;CONTACT_INFORMATION;SINK
<gov.nist.javax.sip.header.Contact: void setSipInstanceParam(java.lang.String)>;CONTACT_INFORMATION;SINK
<gov.nist.javax.sip.header.Contact: void setTempGruuParam(java.lang.String)>;CONTACT_INFORMATION;SINK
<gov.nist.javax.sip.header.Contact: void setWildCardFlag(boolean)>;CONTACT_INFORMATION;SINK
<gov.nist.javax.sip.stack.SIPClientTransaction: void setDialog(gov.nist.javax.sip.stack.SIPDialog,java.lang.String)>;VOIP;SINK
<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.javax.sip.stack.SIPDialog createDialog(gov.nist.javax.sip.stack.SIPTransaction)>;VOIP;SINK
<gov.nist.javax.sip.stack.SIPTransactionStack: void putDialog(gov.nist.javax.sip.stack.SIPDialog)>;VOIP;SINK
<java.io.FileOutputStream: void write(byte[],int,int)>;FILE;SINK
<java.io.RandomAccessFile: void write(byte[],int,int)>;FILE;SINK
<java.lang.ProcessManager: java.lang.Process exec(java.lang.String[],java.lang.String[],java.io.File,boolean)>;FILE;SINK
<java.lang.SecurityManager: void checkRead(java.io.FileDescriptor)>;FILE;SINK
<java.lang.SecurityManager: void checkWrite(java.io.FileDescriptor)>;FILE;SINK
<java.net.DatagramSocket: void setNetworkInterface(java.net.NetworkInterface)>;FILE;SINK
<java.net.PlainDatagramSocketImpl: void bind(int,java.net.InetAddress)>;FILE;SINK
<java.net.PlainDatagramSocketImpl: void send(java.net.DatagramPacket)>;FILE;SINK
<java.net.PlainDatagramSocketImpl: void setOption(int,java.lang.Object)>;FILE;SINK
<java.net.PlainSocketImpl: void bind(java.net.InetAddress,int)>;FILE;SINK
<java.net.PlainSocketImpl: void setOption(int,java.lang.Object)>;FILE;SINK
<java.net.URL: java.net.URLConnection openConnection()>;NETWORK;SINK
<java.nio.DatagramChannelImpl: int send(java.nio.ByteBuffer,java.net.SocketAddress)>;FILE;SINK
<java.nio.IoVec: int doTransfer(java.io.FileDescriptor)>;FILE;SINK
<java.util.zip.Inflater: int setFileInput(java.io.FileDescriptor,long,int)>;FILE;SINK
<libcore.io.BlockGuardOs: int sendto(java.io.FileDescriptor,byte[],int,int,int,java.net.InetAddress,int)>;FILE;SINK
<libcore.io.BlockGuardOs: int sendto(java.io.FileDescriptor,java.nio.ByteBuffer,int,java.net.InetAddress,int)>;FILE;SINK
<libcore.io.BlockGuardOs: int write(java.io.FileDescriptor,byte[],int,int)>;FILE;SINK
<libcore.io.BlockGuardOs: int write(java.io.FileDescriptor,java.nio.ByteBuffer)>;FILE;SINK
<libcore.io.BlockGuardOs: int writev(java.io.FileDescriptor,java.lang.Object[],int[],int[])>;FILE;SINK
<libcore.io.BlockGuardOs: java.io.FileDescriptor open(java.lang.String,int,int)>;FILE;SINK
<libcore.io.ForwardingOs: int sendto(java.io.FileDescriptor,byte[],int,int,int,java.net.InetAddress,int)>;FILE;SINK
<libcore.io.ForwardingOs: int sendto(java.io.FileDescriptor,java.nio.ByteBuffer,int,java.net.InetAddress,int)>;FILE;SINK
<libcore.io.ForwardingOs: int write(java.io.FileDescriptor,byte[],int,int)>;FILE;SINK
<libcore.io.ForwardingOs: int write(java.io.FileDescriptor,java.nio.ByteBuffer)>;FILE;SINK
<libcore.io.ForwardingOs: int writev(java.io.FileDescriptor,java.lang.Object[],int[],int[])>;FILE;SINK
<libcore.io.ForwardingOs: java.io.FileDescriptor open(java.lang.String,int,int)>;FILE;SINK
<libcore.io.ForwardingOs: long sendfile(java.io.FileDescriptor,java.io.FileDescriptor,libcore.util.MutableLong,long)>;FILE;SINK
<libcore.io.ForwardingOs: void bind(java.io.FileDescriptor,java.net.InetAddress,int)>;FILE;SINK
<libcore.io.ForwardingOs: void setsockoptByte(java.io.FileDescriptor,int,int,int)>;FILE;SINK
<libcore.io.ForwardingOs: void setsockoptGroupReq(java.io.FileDescriptor,int,int,libcore.io.StructGroupReq)>;FILE;SINK
<libcore.io.ForwardingOs: void setsockoptIfreq(java.io.FileDescriptor,int,int,java.lang.String)>;FILE;SINK
<libcore.io.ForwardingOs: void setsockoptInt(java.io.FileDescriptor,int,int,int)>;FILE;SINK
<libcore.io.ForwardingOs: void setsockoptIpMreqn(java.io.FileDescriptor,int,int,int)>;FILE;SINK
<libcore.io.ForwardingOs: void setsockoptLinger(java.io.FileDescriptor,int,int,libcore.io.StructLinger)>;FILE;SINK
<libcore.io.ForwardingOs: void setsockoptTimeval(java.io.FileDescriptor,int,int,libcore.io.StructTimeval)>;FILE;SINK
<libcore.io.IoBridge: int sendto(java.io.FileDescriptor,byte[],int,int,int,java.net.InetAddress,int)>;FILE;SINK
<libcore.io.IoBridge: int sendto(java.io.FileDescriptor,java.nio.ByteBuffer,int,java.net.InetAddress,int)>;FILE;SINK
<libcore.io.IoBridge: void bind(java.io.FileDescriptor,java.net.InetAddress,int)>;FILE;SINK
<libcore.io.IoBridge: void setSocketOption(java.io.FileDescriptor,int,java.lang.Object)>;FILE;SINK
<libcore.io.IoBridge: void write(java.io.FileDescriptor,byte[],int,int)>;FILE;SINK
<libcore.io.IoUtils: void setBlocking(java.io.FileDescriptor,boolean)>;FILE;SINK
<libcore.io.Posix: int sendto(java.io.FileDescriptor,byte[],int,int,int,java.net.InetAddress,int)>;FILE;SINK
<libcore.io.Posix: int sendto(java.io.FileDescriptor,java.nio.ByteBuffer,int,java.net.InetAddress,int)>;FILE;SINK
<libcore.io.Posix: int write(java.io.FileDescriptor,byte[],int,int)>;FILE;SINK
<libcore.io.Posix: int write(java.io.FileDescriptor,java.nio.ByteBuffer)>;FILE;SINK
<org.apache.http.client.HttpClient: java.lang.Object execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.client.ResponseHandler)>;NETWORK;SINK
<org.apache.http.client.HttpClient: java.lang.Object execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.client.ResponseHandler,org.apache.http.protocol.HttpContext)>;NETWORK;SINK
<org.apache.http.client.HttpClient: java.lang.Object execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.client.ResponseHandler)>;NETWORK;SINK
<org.apache.http.client.HttpClient: java.lang.Object execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.client.ResponseHandler,org.apache.http.protocol.HttpContext)>;NETWORK;SINK
<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest)>;NETWORK;SINK
<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>;NETWORK;SINK
<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)>;NETWORK;SINK
<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.protocol.HttpContext)>;NETWORK;SINK
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest)>;NETWORK;SINK
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>;NETWORK;SINK
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)>;NETWORK;SINK
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.protocol.HttpContext)>;NETWORK;SINK
<org.apache.http.impl.client.DefaultHttpClient: java.lang.Object execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.client.ResponseHandler)>;NETWORK;SINK
<org.apache.http.impl.client.DefaultHttpClient: java.lang.Object execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.client.ResponseHandler,org.apache.http.protocol.HttpContext)>;NETWORK;SINK
<org.apache.http.impl.client.DefaultHttpClient: java.lang.Object execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.client.ResponseHandler)>;NETWORK;SINK
<org.apache.http.impl.client.DefaultHttpClient: java.lang.Object execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.client.ResponseHandler,org.apache.http.protocol.HttpContext)>;NETWORK;SINK
<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest)>;NETWORK;SINK
<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>;NETWORK;SINK
<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)>;NETWORK;SINK
<android.accessibilityservice.IAccessibilityServiceConnection$Stub$Proxy: java.lang.String getInterfaceDescriptor()>;NETWORK_INFORMATION;SOURCE
<android.accessibilityservice.IAccessibilityServiceConnection$Stub: android.os.IBinder asBinder()>;NETWORK_INFORMATION;SOURCE
<android.accounts.AccountManager$AmsTask: android.os.Bundle getResult()>;ACCOUNT_INFORMATION;SOURCE
<android.accounts.AccountManager$AmsTask: android.os.Bundle getResult(long,java.util.concurrent.TimeUnit)>;ACCOUNT_INFORMATION;SOURCE
<android.accounts.AccountManager$Future2Task: java.lang.Object getResult()>;ACCOUNT_INFORMATION;SOURCE
<android.accounts.AccountManager$Future2Task: java.lang.Object getResult(long,java.util.concurrent.TimeUnit)>;ACCOUNT_INFORMATION;SOURCE
<android.accounts.AccountManager: android.accounts.AccountManager get(android.content.Context)>;ACCOUNT_INFORMATION;SOURCE
<android.accounts.AccountManager: android.accounts.Account[] getAccounts()>;ACCOUNT_INFORMATION;SOURCE
<android.accounts.AccountManager: android.accounts.Account[] getAccountsByType(java.lang.String)>;ACCOUNT_INFORMATION;SOURCE
<android.accounts.AccountManager: android.accounts.AuthenticatorDescription[] getAuthenticatorTypes()>;ACCOUNT_INFORMATION;SOURCE
<android.accounts.AccountManager: java.lang.String blockingGetAuthToken(android.accounts.Account,java.lang.String,boolean)>;ACCOUNT_INFORMATION;SOURCE
<android.accounts.IAccountManager$Stub$Proxy: android.accounts.Account[] getAccounts(java.lang.String)>;ACCOUNT_INFORMATION;SOURCE
<android.accounts.IAccountManager$Stub$Proxy: java.lang.String getPassword(android.accounts.Account)>;ACCOUNT_INFORMATION;SOURCE
<android.accounts.IAccountManager$Stub$Proxy: java.lang.String getUserData(android.accounts.Account,java.lang.String)>;ACCOUNT_INFORMATION;SOURCE
<android.app.ActivityManagerProxy: android.os.ParcelFileDescriptor openContentUri(android.net.Uri)>;FILE_INFORMATION;SOURCE
<android.app.ContextImpl$ApplicationContentResolver: android.content.SyncInfo getCurrentSync()>;SYNCHRONIZATION_DATA;SOURCE
<android.app.ContextImpl$ApplicationContentResolver: boolean getSyncAutomatically(android.accounts.Account,java.lang.String)>;SYNCHRONIZATION_DATA;SOURCE
<android.app.ContextImpl$ApplicationContentResolver: int getIsSyncable(android.accounts.Account,java.lang.String)>;SYNCHRONIZATION_DATA;SOURCE
<android.app.ContextImpl$ApplicationContentResolver: java.util.List getPeriodicSyncs(android.accounts.Account,java.lang.String)>;SYNCHRONIZATION_DATA;SOURCE
<android.app.DownloadManager: android.net.Uri getDownloadUri(long)>;FILE_INFORMATION;SOURCE
<android.app.DownloadManager: android.net.Uri getUriForDownloadedFile(long)>;FILE_INFORMATION;SOURCE
<android.app.IServiceConnection$Stub$Proxy: java.lang.String getInterfaceDescriptor()>;NETWORK_INFORMATION;SOURCE
<android.app.IServiceConnection$Stub: android.os.IBinder asBinder()>;NETWORK_INFORMATION;SOURCE
<android.app.LoadedApk$ServiceDispatcher: android.app.IServiceConnection getIServiceConnection()>;NETWORK_INFORMATION;SOURCE
<android.app.LoadedApk$ServiceDispatcher: android.app.ServiceConnectionLeaked getLocation()>;NETWORK_INFORMATION;SOURCE
<android.app.LoadedApk$ServiceDispatcher: android.content.ServiceConnection getServiceConnection()>;NETWORK_INFORMATION;SOURCE
<android.app.LoadedApk$ServiceDispatcher: int getFlags()>;NETWORK_INFORMATION;SOURCE
<android.app.LoadedApk$ServiceDispatcher: java.lang.RuntimeException getUnbindLocation()>;NETWORK_INFORMATION;SOURCE
<android.app.Service: java.lang.String getClassName()>;NETWORK_INFORMATION;SOURCE
<android.bluetooth.BluetoothA2dp: int getConnectionState(android.bluetooth.BluetoothDevice)>;BLUETOOTH_INFORMATION;SOURCE
<android.bluetooth.BluetoothA2dp: int getPriority(android.bluetooth.BluetoothDevice)>;BLUETOOTH_INFORMATION;SOURCE
<android.bluetooth.BluetoothA2dp: java.util.List getConnectedDevices()>;BLUETOOTH_INFORMATION;SOURCE
<android.bluetooth.BluetoothA2dp: java.util.List getDevicesMatchingConnectionStates(int[])>;BLUETOOTH_INFORMATION;SOURCE
<android.bluetooth.BluetoothAdapter: android.bluetooth.BluetoothDevice getRemoteDevice(java.lang.String)>;BLUETOOTH_INFORMATION;SOURCE
<android.bluetooth.BluetoothAdapter: android.bluetooth.BluetoothServerSocket listenUsingEncryptedRfcommWithServiceRecord(java.lang.String,java.util.UUID)>;BLUETOOTH_INFORMATION;SOURCE
<android.bluetooth.BluetoothAdapter: android.bluetooth.BluetoothServerSocket listenUsingInsecureRfcommWithServiceRecord(java.lang.String,java.util.UUID)>;BLUETOOTH_INFORMATION;SOURCE
<android.bluetooth.BluetoothAdapter: android.bluetooth.BluetoothServerSocket listenUsingRfcommWithServiceRecord(java.lang.String,java.util.UUID)>;BLUETOOTH_INFORMATION;SOURCE
<android.bluetooth.BluetoothAdapter: android.os.ParcelUuid[] getUuids()>;BLUETOOTH_INFORMATION;SOURCE
<android.bluetooth.BluetoothAdapter: int getConnectionState()>;BLUETOOTH_INFORMATION;SOURCE
<android.bluetooth.BluetoothAdapter: int getDiscoverableTimeout()>;BLUETOOTH_INFORMATION;SOURCE
<android.bluetooth.BluetoothAdapter: int getProfileConnectionState(int)>;BLUETOOTH_INFORMATION;SOURCE
<android.bluetooth.BluetoothAdapter: int getScanMode()>;BLUETOOTH_INFORMATION;SOURCE
<android.bluetooth.BluetoothAdapter: int getState()>;BLUETOOTH_INFORMATION;SOURCE
<android.bluetooth.BluetoothAdapter: java.lang.String getAddress()>;BLUETOOTH_INFORMATION;SOURCE
<android.bluetooth.BluetoothAdapter: java.lang.String getName()>;BLUETOOTH_INFORMATION;SOURCE
<android.bluetooth.BluetoothAdapter: java.util.Set getBondedDevices()>;BLUETOOTH_INFORMATION;SOURCE
<android.bluetooth.BluetoothClass: int getDeviceClass()>;BLUETOOTH_INFORMATION;SOURCE
<android.bluetooth.BluetoothClass: int getMajorDeviceClass()>;BLUETOOTH_INFORMATION;SOURCE
<android.bluetooth.BluetoothDevice: android.bluetooth.BluetoothClass getBluetoothClass()>;BLUETOOTH_INFORMATION;SOURCE
<android.bluetooth.BluetoothDevice: android.bluetooth.IBluetooth getService()>;BLUETOOTH_INFORMATION;SOURCE
<android.bluetooth.BluetoothDevice: android.os.ParcelUuid[] getUuids()>;BLUETOOTH_INFORMATION;SOURCE
<android.bluetooth.BluetoothDevice: boolean getTrustState()>;BLUETOOTH_INFORMATION;SOURCE
<android.bluetooth.BluetoothDevice: int getBondState()>;BLUETOOTH_INFORMATION;SOURCE
<android.bluetooth.BluetoothDevice: int getServiceChannel(android.os.ParcelUuid)>;BLUETOOTH_INFORMATION;SOURCE
<android.bluetooth.BluetoothDevice: java.lang.String getAddress()>;BLUETOOTH_INFORMATION;SOURCE
<android.bluetooth.BluetoothDevice: java.lang.String getAlias()>;BLUETOOTH_INFORMATION;SOURCE
<android.bluetooth.BluetoothDevice: java.lang.String getAliasName()>;BLUETOOTH_INFORMATION;SOURCE
<android.bluetooth.BluetoothDevice: java.lang.String getName()>;BLUETOOTH_INFORMATION;SOURCE
<android.bluetooth.BluetoothHeadset: int getAudioState(android.bluetooth.BluetoothDevice)>;BLUETOOTH_INFORMATION;SOURCE
<android.bluetooth.BluetoothHeadset: int getBatteryUsageHint(android.bluetooth.BluetoothDevice)>;BLUETOOTH_INFORMATION;SOURCE
<android.bluetooth.BluetoothHeadset: int getConnectionState(android.bluetooth.BluetoothDevice)>;BLUETOOTH_INFORMATION;SOURCE
<android.bluetooth.BluetoothHeadset: int getPriority(android.bluetooth.BluetoothDevice)>;BLUETOOTH_INFORMATION;SOURCE
<android.bluetooth.BluetoothHeadset: java.util.List getConnectedDevices()>;BLUETOOTH_INFORMATION;SOURCE
<android.bluetooth.BluetoothHeadset: java.util.List getDevicesMatchingConnectionStates(int[])>;BLUETOOTH_INFORMATION;SOURCE
<android.bluetooth.BluetoothHealth: android.os.ParcelFileDescriptor getMainChannelFd(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration)>;BLUETOOTH_INFORMATION;SOURCE
<android.bluetooth.BluetoothHealth: int getConnectionState(android.bluetooth.BluetoothDevice)>;BLUETOOTH_INFORMATION;SOURCE
<android.bluetooth.BluetoothHealth: java.util.List getConnectedDevices()>;BLUETOOTH_INFORMATION;SOURCE
<android.bluetooth.BluetoothHealth: java.util.List getDevicesMatchingConnectionStates(int[])>;BLUETOOTH_INFORMATION;SOURCE
<android.bluetooth.BluetoothHealthAppConfiguration: int getChannelType()>;BLUETOOTH_INFORMATION;SOURCE
<android.bluetooth.BluetoothHealthAppConfiguration: int getDataType()>;BLUETOOTH_INFORMATION;SOURCE
<android.bluetooth.BluetoothHealthAppConfiguration: int getRole()>;BLUETOOTH_INFORMATION;SOURCE
<android.bluetooth.BluetoothHealthAppConfiguration: java.lang.String getName()>;BLUETOOTH_INFORMATION;SOURCE
<android.bluetooth.BluetoothInputDevice: int getConnectionState(android.bluetooth.BluetoothDevice)>;BLUETOOTH_INFORMATION;SOURCE
<android.bluetooth.BluetoothInputDevice: int getPriority(android.bluetooth.BluetoothDevice)>;BLUETOOTH_INFORMATION;SOURCE
<android.bluetooth.BluetoothInputDevice: java.util.List getConnectedDevices()>;BLUETOOTH_INFORMATION;SOURCE
<android.bluetooth.BluetoothInputDevice: java.util.List getDevicesMatchingConnectionStates(int[])>;BLUETOOTH_INFORMATION;SOURCE
<android.bluetooth.BluetoothPan: boolean isTetheringOn()>;BLUETOOTH_INFORMATION;SOURCE
<android.bluetooth.BluetoothPan: int getConnectionState(android.bluetooth.BluetoothDevice)>;BLUETOOTH_INFORMATION;SOURCE
<android.bluetooth.BluetoothPan: java.util.List getConnectedDevices()>;BLUETOOTH_INFORMATION;SOURCE
<android.bluetooth.BluetoothPan: java.util.List getDevicesMatchingConnectionStates(int[])>;BLUETOOTH_INFORMATION;SOURCE
<android.bluetooth.BluetoothServerSocket: int getChannel()>;BLUETOOTH_INFORMATION;SOURCE
<android.bluetooth.BluetoothSocket: android.bluetooth.BluetoothDevice getRemoteDevice()>;BLUETOOTH_INFORMATION;SOURCE
<android.bluetooth.BluetoothSocket: android.bluetooth.BluetoothSocket accept(int)>;BLUETOOTH_INFORMATION;SOURCE
<android.bluetooth.BluetoothSocket: java.io.InputStream getInputStream()>;BLUETOOTH_INFORMATION;SOURCE
<android.bluetooth.BluetoothSocket: java.io.OutputStream getOutputStream()>;BLUETOOTH_INFORMATION;SOURCE
<android.bluetooth.BluetoothUuid: int getServiceIdentifierFromParcelUuid(android.os.ParcelUuid)>;BLUETOOTH_INFORMATION;SOURCE
<android.bluetooth.IBluetooth$Stub$Proxy: android.os.ParcelUuid[] getUuids()>;BLUETOOTH_INFORMATION;SOURCE
<android.bluetooth.IBluetooth$Stub$Proxy: int getAdapterConnectionState()>;BLUETOOTH_INFORMATION;SOURCE
<android.bluetooth.IBluetooth$Stub$Proxy: int getDiscoverableTimeout()>;BLUETOOTH_INFORMATION;SOURCE
<android.bluetooth.IBluetooth$Stub$Proxy: int getProfileConnectionState(int)>;BLUETOOTH_INFORMATION;SOURCE
<android.bluetooth.IBluetooth$Stub$Proxy: int getScanMode()>;BLUETOOTH_INFORMATION;SOURCE
<android.bluetooth.IBluetooth$Stub$Proxy: java.lang.String getAddress()>;BLUETOOTH_INFORMATION;SOURCE
<android.bluetooth.IBluetooth$Stub$Proxy: java.lang.String getInterfaceDescriptor()>;BLUETOOTH_INFORMATION;SOURCE
<android.bluetooth.IBluetooth$Stub$Proxy: java.lang.String getName()>;BLUETOOTH_INFORMATION;SOURCE
<android.bluetooth.IBluetooth$Stub: android.os.IBinder asBinder()>;BLUETOOTH_INFORMATION;SOURCE
<android.bluetooth.IBluetoothA2dp$Stub$Proxy: int getConnectionState(android.bluetooth.BluetoothDevice)>;BLUETOOTH_INFORMATION;SOURCE
<android.bluetooth.IBluetoothA2dp$Stub$Proxy: int getPriority(android.bluetooth.BluetoothDevice)>;BLUETOOTH_INFORMATION;SOURCE
<android.bluetooth.IBluetoothA2dp$Stub$Proxy: java.lang.String getInterfaceDescriptor()>;BLUETOOTH_INFORMATION;SOURCE
<android.bluetooth.IBluetoothA2dp$Stub$Proxy: java.util.List getConnectedDevices()>;BLUETOOTH_INFORMATION;SOURCE
<android.bluetooth.IBluetoothA2dp$Stub$Proxy: java.util.List getDevicesMatchingConnectionStates(int[])>;BLUETOOTH_INFORMATION;SOURCE
<android.bluetooth.IBluetoothA2dp$Stub: android.os.IBinder asBinder()>;BLUETOOTH_INFORMATION;SOURCE
<android.bluetooth.IBluetoothCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()>;BLUETOOTH_INFORMATION;SOURCE
<android.bluetooth.IBluetoothCallback$Stub: android.os.IBinder asBinder()>;BLUETOOTH_INFORMATION;SOURCE
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: int getAudioState(android.bluetooth.BluetoothDevice)>;BLUETOOTH_INFORMATION;SOURCE
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: int getBatteryUsageHint(android.bluetooth.BluetoothDevice)>;BLUETOOTH_INFORMATION;SOURCE
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: int getConnectionState(android.bluetooth.BluetoothDevice)>;BLUETOOTH_INFORMATION;SOURCE
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: int getPriority(android.bluetooth.BluetoothDevice)>;BLUETOOTH_INFORMATION;SOURCE
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: java.lang.String getInterfaceDescriptor()>;BLUETOOTH_INFORMATION;SOURCE
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: java.util.List getConnectedDevices()>;BLUETOOTH_INFORMATION;SOURCE
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: java.util.List getDevicesMatchingConnectionStates(int[])>;BLUETOOTH_INFORMATION;SOURCE
<android.bluetooth.IBluetoothHeadset$Stub: android.os.IBinder asBinder()>;BLUETOOTH_INFORMATION;SOURCE
<android.bluetooth.IBluetoothHealthCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()>;BLUETOOTH_INFORMATION;SOURCE
<android.bluetooth.IBluetoothHealthCallback$Stub: android.os.IBinder asBinder()>;BLUETOOTH_INFORMATION;SOURCE
<android.bluetooth.IBluetoothStateChangeCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()>;BLUETOOTH_INFORMATION;SOURCE
<android.bluetooth.IBluetoothStateChangeCallback$Stub: android.os.IBinder asBinder()>;BLUETOOTH_INFORMATION;SOURCE
<android.content.ClipData$Item: android.net.Uri getUri()>;FILE_INFORMATION;SOURCE
<android.content.ContentProviderOperation: android.net.Uri getUri()>;FILE_INFORMATION;SOURCE
<android.content.ContentResolver: android.content.SyncAdapterType[] getSyncAdapterTypes()>;SYNCHRONIZATION_DATA;SOURCE
<android.content.ContentResolver: android.content.SyncInfo getCurrentSync()>;SYNCHRONIZATION_DATA;SOURCE
<android.content.ContentResolver: android.content.SyncStatusInfo getSyncStatus(android.accounts.Account,java.lang.String)>;SYNCHRONIZATION_DATA;SOURCE
<android.content.ContentResolver: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>;CONTENT_RESOLVER;SOURCE
<android.content.ContentResolver: boolean getSyncAutomatically(android.accounts.Account,java.lang.String)>;SYNCHRONIZATION_DATA;SOURCE
<android.content.ContentResolver: int getIsSyncable(android.accounts.Account,java.lang.String)>;SYNCHRONIZATION_DATA;SOURCE
<android.content.ContentResolver: java.util.List getCurrentSyncs()>;SYNCHRONIZATION_DATA;SOURCE
<android.content.ContentResolver: java.util.List getPeriodicSyncs(android.accounts.Account,java.lang.String)>;SYNCHRONIZATION_DATA;SOURCE
<android.content.IContentService$Stub$Proxy: android.content.SyncAdapterType[] getSyncAdapterTypes()>;SYNCHRONIZATION_DATA;SOURCE
<android.content.IContentService$Stub$Proxy: android.content.SyncStatusInfo getSyncStatus(android.accounts.Account,java.lang.String)>;SYNCHRONIZATION_DATA;SOURCE
<android.content.IContentService$Stub$Proxy: boolean getSyncAutomatically(android.accounts.Account,java.lang.String)>;SYNCHRONIZATION_DATA;SOURCE
<android.content.IContentService$Stub$Proxy: int getIsSyncable(android.accounts.Account,java.lang.String)>;SYNCHRONIZATION_DATA;SOURCE
<android.content.IContentService$Stub$Proxy: java.lang.String getInterfaceDescriptor()>;NETWORK_INFORMATION;SOURCE
<android.content.IContentService$Stub$Proxy: java.util.List getCurrentSyncs()>;SYNCHRONIZATION_DATA;SOURCE
<android.content.IContentService$Stub$Proxy: java.util.List getPeriodicSyncs(android.accounts.Account,java.lang.String)>;SYNCHRONIZATION_DATA;SOURCE
<android.content.IContentService$Stub: android.os.IBinder asBinder()>;NETWORK_INFORMATION;SOURCE
<android.content.SyncManager: android.content.SyncStorageEngine getSyncStorageEngine()>;SYNCHRONIZATION_DATA;SOURCE
<android.content.SyncStatusInfo: long getPeriodicSyncTime(int)>;SYNCHRONIZATION_DATA;SOURCE
<android.content.SyncStorageEngine: java.util.ArrayList getSyncHistory()>;SYNCHRONIZATION_DATA;SOURCE
<android.content.SyncStorageEngine: java.util.ArrayList getSyncStatus()>;SYNCHRONIZATION_DATA;SOURCE
<android.content.pm.RegisteredServicesCache: android.content.pm.RegisteredServicesCacheListener getListener()>;NETWORK_INFORMATION;SOURCE
<android.content.res.XmlBlock$Parser: java.lang.String getNamespaceUri(int)>;FILE_INFORMATION;SOURCE
<android.database.AbstractCursor: android.database.CursorWindow getWindow()>;DATABASE_INFORMATION;SOURCE
<android.database.AbstractCursor: android.net.Uri getNotificationUri()>;DATABASE_INFORMATION;SOURCE
<android.database.AbstractCursor: android.os.Bundle getExtras()>;DATABASE_INFORMATION;SOURCE
<android.database.AbstractCursor: boolean getWantsAllOnMoveCalls()>;DATABASE_INFORMATION;SOURCE
<android.database.AbstractCursor: byte[] getBlob(int)>;DATABASE_INFORMATION;SOURCE
<android.database.AbstractCursor: int getType(int)>;DATABASE_INFORMATION;SOURCE
<android.database.AbstractCursor: java.lang.Object getUpdatedField(int)>;DATABASE_INFORMATION;SOURCE
<android.database.AbstractCursor: java.lang.String getColumnName(int)>;DATABASE_INFORMATION;SOURCE
<android.database.AbstractWindowedCursor: android.database.CursorWindow getWindow()>;DATABASE_INFORMATION;SOURCE
<android.database.AbstractWindowedCursor: byte[] getBlob(int)>;DATABASE_INFORMATION;SOURCE
<android.database.AbstractWindowedCursor: double getDouble(int)>;DATABASE_INFORMATION;SOURCE
<android.database.AbstractWindowedCursor: float getFloat(int)>;DATABASE_INFORMATION;SOURCE
<android.database.AbstractWindowedCursor: int getInt(int)>;DATABASE_INFORMATION;SOURCE
<android.database.AbstractWindowedCursor: int getType(int)>;DATABASE_INFORMATION;SOURCE
<android.database.AbstractWindowedCursor: java.lang.String getString(int)>;DATABASE_INFORMATION;SOURCE
<android.database.AbstractWindowedCursor: long getLong(int)>;DATABASE_INFORMATION;SOURCE
<android.database.AbstractWindowedCursor: short getShort(int)>;DATABASE_INFORMATION;SOURCE
<android.database.BulkCursorNative: android.os.IBinder asBinder()>;DATABASE_INFORMATION;SOURCE
<android.database.BulkCursorProxy: android.database.CursorWindow getWindow(int)>;DATABASE_INFORMATION;SOURCE
<android.database.BulkCursorProxy: android.os.Bundle getExtras()>;DATABASE_INFORMATION;SOURCE
<android.database.BulkCursorToCursorAdaptor: android.database.IContentObserver getObserver()>;DATABASE_INFORMATION;SOURCE
<android.database.BulkCursorToCursorAdaptor: android.os.Bundle getExtras()>;DATABASE_INFORMATION;SOURCE
<android.database.BulkCursorToCursorAdaptor: int getCount()>;DATABASE_INFORMATION;SOURCE
<android.database.BulkCursorToCursorAdaptor: java.lang.String[] getColumnNames()>;DATABASE_INFORMATION;SOURCE
<android.database.ContentObserver: android.database.IContentObserver getContentObserver()>;DATABASE_INFORMATION;SOURCE
<android.database.ContentObserver: android.database.IContentObserver releaseContentObserver()>;DATABASE_INFORMATION;SOURCE
<android.database.CrossProcessCursorWrapper: android.database.CursorWindow getWindow()>;DATABASE_INFORMATION;SOURCE
<android.database.CursorToBulkCursorAdaptor: android.database.CursorWindow getWindow(int)>;DATABASE_INFORMATION;SOURCE
<android.database.CursorToBulkCursorAdaptor: android.os.Bundle getExtras()>;DATABASE_INFORMATION;SOURCE
<android.database.CursorWindow: android.database.CursorWindow newFromParcel(android.os.Parcel)>;DATABASE_INFORMATION;SOURCE
<android.database.CursorWindow: byte[] getBlob(int,int)>;DATABASE_INFORMATION;SOURCE
<android.database.CursorWindow: double getDouble(int,int)>;DATABASE_INFORMATION;SOURCE
<android.database.CursorWindow: float getFloat(int,int)>;DATABASE_INFORMATION;SOURCE
<android.database.CursorWindow: int getInt(int,int)>;DATABASE_INFORMATION;SOURCE
<android.database.CursorWindow: int getNumRows()>;DATABASE_INFORMATION;SOURCE
<android.database.CursorWindow: int getStartPosition()>;DATABASE_INFORMATION;SOURCE
<android.database.CursorWindow: int getType(int,int)>;DATABASE_INFORMATION;SOURCE
<android.database.CursorWindow: java.lang.String getName()>;DATABASE_INFORMATION;SOURCE
<android.database.CursorWindow: java.lang.String getString(int,int)>;DATABASE_INFORMATION;SOURCE
<android.database.CursorWindow: long getLong(int,int)>;DATABASE_INFORMATION;SOURCE
<android.database.CursorWindow: short getShort(int,int)>;DATABASE_INFORMATION;SOURCE
<android.database.CursorWrapper: android.database.Cursor getWrappedCursor()>;DATABASE_INFORMATION;SOURCE
<android.database.CursorWrapper: android.os.Bundle getExtras()>;DATABASE_INFORMATION;SOURCE
<android.database.CursorWrapper: boolean getWantsAllOnMoveCalls()>;DATABASE_INFORMATION;SOURCE
<android.database.CursorWrapper: byte[] getBlob(int)>;DATABASE_INFORMATION;SOURCE
<android.database.CursorWrapper: double getDouble(int)>;DATABASE_INFORMATION;SOURCE
<android.database.CursorWrapper: float getFloat(int)>;DATABASE_INFORMATION;SOURCE
<android.database.CursorWrapper: int getCount()>;DATABASE_INFORMATION;SOURCE
<android.database.CursorWrapper: int getInt(int)>;DATABASE_INFORMATION;SOURCE
<android.database.CursorWrapper: int getType(int)>;DATABASE_INFORMATION;SOURCE
<android.database.CursorWrapper: java.lang.String getColumnName(int)>;DATABASE_INFORMATION;SOURCE
<android.database.CursorWrapper: java.lang.String getString(int)>;DATABASE_INFORMATION;SOURCE
<android.database.CursorWrapper: java.lang.String[] getColumnNames()>;DATABASE_INFORMATION;SOURCE
<android.database.CursorWrapper: long getLong(int)>;DATABASE_INFORMATION;SOURCE
<android.database.CursorWrapper: short getShort(int)>;DATABASE_INFORMATION;SOURCE
<android.database.DatabaseUtils: java.lang.String getCollationKey(java.lang.String)>;DATABASE_INFORMATION;SOURCE
<android.database.DatabaseUtils: java.lang.String getHexCollationKey(java.lang.String)>;DATABASE_INFORMATION;SOURCE
<android.database.IContentObserver$Stub$Proxy: java.lang.String getInterfaceDescriptor()>;DATABASE_INFORMATION;SOURCE
<android.database.IContentObserver$Stub: android.os.IBinder asBinder()>;DATABASE_INFORMATION;SOURCE
<android.database.MatrixCursor: byte[] getBlob(int)>;DATABASE_INFORMATION;SOURCE
<android.database.MatrixCursor: double getDouble(int)>;DATABASE_INFORMATION;SOURCE
<android.database.MatrixCursor: float getFloat(int)>;DATABASE_INFORMATION;SOURCE
<android.database.MatrixCursor: int getCount()>;DATABASE_INFORMATION;SOURCE
<android.database.MatrixCursor: int getInt(int)>;DATABASE_INFORMATION;SOURCE
<android.database.MatrixCursor: int getType(int)>;DATABASE_INFORMATION;SOURCE
<android.database.MatrixCursor: java.lang.String getString(int)>;DATABASE_INFORMATION;SOURCE
<android.database.MatrixCursor: java.lang.String[] getColumnNames()>;DATABASE_INFORMATION;SOURCE
<android.database.MatrixCursor: long getLong(int)>;DATABASE_INFORMATION;SOURCE
<android.database.MatrixCursor: short getShort(int)>;DATABASE_INFORMATION;SOURCE
<android.database.MergeCursor: byte[] getBlob(int)>;DATABASE_INFORMATION;SOURCE
<android.database.MergeCursor: double getDouble(int)>;DATABASE_INFORMATION;SOURCE
<android.database.MergeCursor: float getFloat(int)>;DATABASE_INFORMATION;SOURCE
<android.database.MergeCursor: int getCount()>;DATABASE_INFORMATION;SOURCE
<android.database.MergeCursor: int getInt(int)>;DATABASE_INFORMATION;SOURCE
<android.database.MergeCursor: int getType(int)>;DATABASE_INFORMATION;SOURCE
<android.database.MergeCursor: java.lang.String getString(int)>;DATABASE_INFORMATION;SOURCE
<android.database.MergeCursor: java.lang.String[] getColumnNames()>;DATABASE_INFORMATION;SOURCE
<android.database.MergeCursor: long getLong(int)>;DATABASE_INFORMATION;SOURCE
<android.database.MergeCursor: short getShort(int)>;DATABASE_INFORMATION;SOURCE
<android.database.sqlite.SQLiteCursor: android.database.sqlite.SQLiteDatabase getDatabase()>;DATABASE_INFORMATION;SOURCE
<android.database.sqlite.SQLiteCursor: int getCount()>;DATABASE_INFORMATION;SOURCE
<android.database.sqlite.SQLiteCursor: java.lang.String[] getColumnNames()>;DATABASE_INFORMATION;SOURCE
<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(boolean,java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String)>;DATABASE_INFORMATION;SOURCE
<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>;DATABASE_INFORMATION;SOURCE
<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String)>;DATABASE_INFORMATION;SOURCE
<android.database.sqlite.SQLiteDatabase: int getVersion()>;DATABASE_INFORMATION;SOURCE
<android.database.sqlite.SQLiteDatabase: java.lang.String getPath()>;DATABASE_INFORMATION;SOURCE
<android.database.sqlite.SQLiteDatabase: java.util.ArrayList getDbStats()>;DATABASE_INFORMATION;SOURCE
<android.database.sqlite.SQLiteDatabase: java.util.List getAttachedDbs()>;DATABASE_INFORMATION;SOURCE
<android.database.sqlite.SQLiteDatabase: java.util.Map getSyncedTables()>;DATABASE_INFORMATION;SOURCE
<android.database.sqlite.SQLiteDatabase: long getMaximumSize()>;DATABASE_INFORMATION;SOURCE
<android.database.sqlite.SQLiteDatabase: long getPageSize()>;DATABASE_INFORMATION;SOURCE
<android.database.sqlite.SQLiteOpenHelper: java.lang.String getDatabaseName()>;DATABASE_INFORMATION;SOURCE
<android.database.sqlite.SQLiteProgram: int getUniqueId()>;DATABASE_INFORMATION;SOURCE
<android.database.sqlite.SQLiteQueryBuilder: android.database.Cursor query(android.database.sqlite.SQLiteDatabase,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>;DATABASE_INFORMATION;SOURCE
<android.database.sqlite.SQLiteQueryBuilder: android.database.Cursor query(android.database.sqlite.SQLiteDatabase,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String)>;DATABASE_INFORMATION;SOURCE
<android.database.sqlite.SQLiteQueryBuilder: java.lang.String getTables()>;DATABASE_INFORMATION;SOURCE
<android.database.sqlite.SqliteWrapper: android.database.Cursor query(android.content.Context,android.content.ContentResolver,android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>;DATABASE_INFORMATION;SOURCE
<android.database.sqlite.SqliteWrapper: android.net.Uri insert(android.content.Context,android.content.ContentResolver,android.net.Uri,android.content.ContentValues)>;DATABASE_INFORMATION;SOURCE
<android.hardware.usb.UsbAccessory: java.lang.String getUri()>;FILE_INFORMATION;SOURCE
<android.inputmethodservice.IInputMethodSessionWrapper: android.view.inputmethod.InputMethodSession getInternalInputMethodSession()>;NETWORK_INFORMATION;SOURCE
<android.inputmethodservice.IInputMethodWrapper: android.view.inputmethod.InputMethod getInternalInputMethod()>;NETWORK_INFORMATION;SOURCE
<android.inputmethodservice.InputMethodService: android.app.Dialog getWindow()>;NETWORK_INFORMATION;SOURCE
<android.inputmethodservice.InputMethodService: android.view.LayoutInflater getLayoutInflater()>;NETWORK_INFORMATION;SOURCE
<android.inputmethodservice.InputMethodService: android.view.inputmethod.EditorInfo getCurrentInputEditorInfo()>;NETWORK_INFORMATION;SOURCE
<android.inputmethodservice.InputMethodService: android.view.inputmethod.InputBinding getCurrentInputBinding()>;NETWORK_INFORMATION;SOURCE
<android.inputmethodservice.InputMethodService: android.view.inputmethod.InputConnection getCurrentInputConnection()>;NETWORK_INFORMATION;SOURCE
<android.inputmethodservice.InputMethodService: boolean getCurrentInputStarted()>;NETWORK_INFORMATION;SOURCE
<android.inputmethodservice.InputMethodService: int getBackDisposition()>;NETWORK_INFORMATION;SOURCE
<android.inputmethodservice.InputMethodService: java.lang.CharSequence getTextForImeAction(int)>;NETWORK_INFORMATION;SOURCE
<android.inputmethodservice.Keyboard$Key: int[] getCurrentDrawableState()>;NETWORK_INFORMATION;SOURCE
<android.inputmethodservice.Keyboard: int getDimensionOrFraction(android.content.res.TypedArray,int,int,int)>;NETWORK_INFORMATION;SOURCE
<android.inputmethodservice.Keyboard: int getHeight()>;NETWORK_INFORMATION;SOURCE
<android.inputmethodservice.Keyboard: int getHorizontalGap()>;NETWORK_INFORMATION;SOURCE
<android.inputmethodservice.Keyboard: int getKeyHeight()>;NETWORK_INFORMATION;SOURCE
<android.inputmethodservice.Keyboard: int getShiftKeyIndex()>;NETWORK_INFORMATION;SOURCE
<android.inputmethodservice.Keyboard: int getVerticalGap()>;NETWORK_INFORMATION;SOURCE
<android.inputmethodservice.Keyboard: int[] getNearestKeys(int,int)>;NETWORK_INFORMATION;SOURCE
<android.inputmethodservice.Keyboard: int[] getShiftKeyIndices()>;NETWORK_INFORMATION;SOURCE
<android.inputmethodservice.Keyboard: java.util.List getKeys()>;NETWORK_INFORMATION;SOURCE
<android.inputmethodservice.Keyboard: java.util.List getModifierKeys()>;NETWORK_INFORMATION;SOURCE
<android.inputmethodservice.KeyboardView$SwipeTracker: float getYVelocity()>;NETWORK_INFORMATION;SOURCE
<android.inputmethodservice.KeyboardView: android.inputmethodservice.Keyboard getKeyboard()>;NETWORK_INFORMATION;SOURCE
<android.inputmethodservice.SoftInputWindow: int getSize()>;NETWORK_INFORMATION;SOURCE
<android.location.Address: android.os.Bundle getExtras()>;LOCATION_INFORMATION;SOURCE
<android.location.Address: double getLatitude()>;LOCATION_INFORMATION;SOURCE
<android.location.Address: double getLongitude()>;LOCATION_INFORMATION;SOURCE
<android.location.Address: int getMaxAddressLineIndex()>;LOCATION_INFORMATION;SOURCE
<android.location.Address: java.lang.String getAddressLine(int)>;LOCATION_INFORMATION;SOURCE
<android.location.Address: java.lang.String getAdminArea()>;LOCATION_INFORMATION;SOURCE
<android.location.Address: java.lang.String getCountryCode()>;LOCATION_INFORMATION;SOURCE
<android.location.Address: java.lang.String getCountryName()>;LOCATION_INFORMATION;SOURCE
<android.location.Address: java.lang.String getFeatureName()>;LOCATION_INFORMATION;SOURCE
<android.location.Address: java.lang.String getLocality()>;LOCATION_INFORMATION;SOURCE
<android.location.Address: java.lang.String getPhone()>;LOCATION_INFORMATION;SOURCE
<android.location.Address: java.lang.String getPostalCode()>;LOCATION_INFORMATION;SOURCE
<android.location.Address: java.lang.String getPremises()>;LOCATION_INFORMATION;SOURCE
<android.location.Address: java.lang.String getSubAdminArea()>;LOCATION_INFORMATION;SOURCE
<android.location.Address: java.lang.String getSubLocality()>;LOCATION_INFORMATION;SOURCE
<android.location.Address: java.lang.String getSubThoroughfare()>;LOCATION_INFORMATION;SOURCE
<android.location.Address: java.lang.String getThoroughfare()>;LOCATION_INFORMATION;SOURCE
<android.location.Address: java.lang.String getUrl()>;LOCATION_INFORMATION;SOURCE
<android.location.Address: java.util.Locale getLocale()>;LOCATION_INFORMATION;SOURCE
<android.location.Country: int getSource()>;LOCATION_INFORMATION;SOURCE
<android.location.Country: java.lang.String getCountryIso()>;LOCATION_INFORMATION;SOURCE
<android.location.Criteria: int getAccuracy()>;LOCATION_INFORMATION;SOURCE
<android.location.Criteria: int getBearingAccuracy()>;LOCATION_INFORMATION;SOURCE
<android.location.Criteria: int getHorizontalAccuracy()>;LOCATION_INFORMATION;SOURCE
<android.location.Criteria: int getPowerRequirement()>;LOCATION_INFORMATION;SOURCE
<android.location.Criteria: int getSpeedAccuracy()>;LOCATION_INFORMATION;SOURCE
<android.location.Criteria: int getVerticalAccuracy()>;LOCATION_INFORMATION;SOURCE
<android.location.Geocoder: java.util.List getFromLocation(double,double,int)>;LOCATION_INFORMATION;SOURCE
<android.location.Geocoder: java.util.List getFromLocationName(java.lang.String,int)>;LOCATION_INFORMATION;SOURCE
<android.location.Geocoder: java.util.List getFromLocationName(java.lang.String,int,double,double,double,double)>;LOCATION_INFORMATION;SOURCE
<android.location.GeocoderParams: java.lang.String getClientPackage()>;LOCATION_INFORMATION;SOURCE
<android.location.GeocoderParams: java.util.Locale getLocale()>;LOCATION_INFORMATION;SOURCE
<android.location.GpsSatellite: float getAzimuth()>;LOCATION_INFORMATION;SOURCE
<android.location.GpsSatellite: float getElevation()>;LOCATION_INFORMATION;SOURCE
<android.location.GpsSatellite: float getSnr()>;LOCATION_INFORMATION;SOURCE
<android.location.GpsSatellite: int getPrn()>;LOCATION_INFORMATION;SOURCE
<android.location.GpsStatus: int getMaxSatellites()>;LOCATION_INFORMATION;SOURCE
<android.location.GpsStatus: int getTimeToFirstFix()>;LOCATION_INFORMATION;SOURCE
<android.location.GpsStatus: java.lang.Iterable getSatellites()>;LOCATION_INFORMATION;SOURCE
<android.location.ICountryDetector$Stub$Proxy: android.location.Country detectCountry()>;LOCATION_INFORMATION;SOURCE
<android.location.ICountryDetector$Stub$Proxy: java.lang.String getInterfaceDescriptor()>;LOCATION_INFORMATION;SOURCE
<android.location.ICountryDetector$Stub: android.os.IBinder asBinder()>;LOCATION_INFORMATION;SOURCE
<android.location.ICountryListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()>;LOCATION_INFORMATION;SOURCE
<android.location.ICountryListener$Stub: android.os.IBinder asBinder()>;LOCATION_INFORMATION;SOURCE
<android.location.IGpsStatusListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()>;LOCATION_INFORMATION;SOURCE
<android.location.IGpsStatusListener$Stub: android.os.IBinder asBinder()>;LOCATION_INFORMATION;SOURCE
<android.location.ILocationListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()>;LOCATION_INFORMATION;SOURCE
<android.location.ILocationListener$Stub: android.os.IBinder asBinder()>;LOCATION_INFORMATION;SOURCE
<android.location.ILocationManager$Stub$Proxy: java.lang.String getBestProvider(android.location.Criteria,boolean)>;LOCATION_INFORMATION;SOURCE
<android.location.ILocationManager$Stub$Proxy: java.lang.String getFromLocation(double,double,int,android.location.GeocoderParams,java.util.List)>;LOCATION_INFORMATION;SOURCE
<android.location.ILocationManager$Stub$Proxy: java.lang.String getFromLocationName(java.lang.String,double,double,double,double,int,android.location.GeocoderParams,java.util.List)>;LOCATION_INFORMATION;SOURCE
<android.location.ILocationManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()>;LOCATION_INFORMATION;SOURCE
<android.location.ILocationManager$Stub$Proxy: java.util.List getAllProviders()>;LOCATION_INFORMATION;SOURCE
<android.location.ILocationManager$Stub$Proxy: java.util.List getProviders(android.location.Criteria,boolean)>;LOCATION_INFORMATION;SOURCE
<android.location.ILocationManager$Stub: android.os.IBinder asBinder()>;LOCATION_INFORMATION;SOURCE
<android.location.Location: android.os.Bundle getExtras()>;LOCATION_INFORMATION;SOURCE
<android.location.Location: double getAltitude()>;LOCATION_INFORMATION;SOURCE
<android.location.Location: double getLatitude()>;LOCATION_INFORMATION;SOURCE
<android.location.Location: double getLongitude()>;LOCATION_INFORMATION;SOURCE
<android.location.Location: float getBearing()>;LOCATION_INFORMATION;SOURCE
<android.location.Location: float getSpeed()>;LOCATION_INFORMATION;SOURCE
<android.location.Location: java.lang.String getProvider()>;LOCATION_INFORMATION;SOURCE
<android.location.Location: long getTime()>;LOCATION_INFORMATION;SOURCE
<android.location.LocationManager: android.location.GpsStatus getGpsStatus(android.location.GpsStatus)>;LOCATION_INFORMATION;SOURCE
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>;LOCATION_INFORMATION;SOURCE
<android.location.LocationManager: android.location.LocationProvider getProvider(java.lang.String)>;LOCATION_INFORMATION;SOURCE
<android.location.LocationManager: java.lang.String getBestProvider(android.location.Criteria,boolean)>;LOCATION_INFORMATION;SOURCE
<android.location.LocationManager: java.util.List getAllProviders()>;LOCATION_INFORMATION;SOURCE
<android.location.LocationProvider: int getAccuracy()>;LOCATION_INFORMATION;SOURCE
<android.location.LocationProvider: int getPowerRequirement()>;LOCATION_INFORMATION;SOURCE
<android.location.LocationProvider: java.lang.String getName()>;LOCATION_INFORMATION;SOURCE
<android.media.IAudioService$Stub$Proxy: boolean isStreamMute(int)>;NETWORK_INFORMATION;SOURCE
<android.media.IAudioService$Stub$Proxy: int getLastAudibleStreamVolume(int)>;NETWORK_INFORMATION;SOURCE
<android.media.IAudioService$Stub$Proxy: int getMode()>;NETWORK_INFORMATION;SOURCE
<android.media.IAudioService$Stub$Proxy: int getRingerMode()>;NETWORK_INFORMATION;SOURCE
<android.media.IAudioService$Stub$Proxy: int getStreamMaxVolume(int)>;NETWORK_INFORMATION;SOURCE
<android.media.IAudioService$Stub$Proxy: int getStreamVolume(int)>;NETWORK_INFORMATION;SOURCE
<android.media.IAudioService$Stub$Proxy: int getVibrateSetting(int)>;NETWORK_INFORMATION;SOURCE
<android.media.IAudioService$Stub$Proxy: java.lang.String getInterfaceDescriptor()>;NETWORK_INFORMATION;SOURCE
<android.media.IAudioService$Stub: android.os.IBinder asBinder()>;NETWORK_INFORMATION;SOURCE
<android.media.IMediaScannerService$Stub$Proxy: java.lang.String getInterfaceDescriptor()>;NETWORK_INFORMATION;SOURCE
<android.media.IMediaScannerService$Stub: android.os.IBinder asBinder()>;NETWORK_INFORMATION;SOURCE
<android.media.RingtoneManager: android.net.Uri getActualDefaultRingtoneUri(android.content.Context,int)>;FILE_INFORMATION;SOURCE
<android.media.RingtoneManager: android.net.Uri getDefaultUri(int)>;FILE_INFORMATION;SOURCE
<android.media.RingtoneManager: android.net.Uri getRingtoneUri(int)>;FILE_INFORMATION;SOURCE
<android.media.RingtoneManager: android.net.Uri getValidRingtoneUri(android.content.Context)>;FILE_INFORMATION;SOURCE
<android.net.ConnectivityManager: android.net.LinkProperties getActiveLinkProperties()>;NETWORK_INFORMATION;SOURCE
<android.net.ConnectivityManager: android.net.LinkProperties getLinkProperties(int)>;NETWORK_INFORMATION;SOURCE
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>;NETWORK_INFORMATION;SOURCE
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfoForUid(int)>;NETWORK_INFORMATION;SOURCE
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>;NETWORK_INFORMATION;SOURCE
<android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()>;NETWORK_INFORMATION;SOURCE
<android.net.ConnectivityManager: android.net.NetworkQuotaInfo getActiveNetworkQuotaInfo()>;NETWORK_INFORMATION;SOURCE
<android.net.ConnectivityManager: android.net.ProxyProperties getGlobalProxy()>;NETWORK_INFORMATION;SOURCE
<android.net.ConnectivityManager: android.net.ProxyProperties getProxy()>;NETWORK_INFORMATION;SOURCE
<android.net.ConnectivityManager: boolean getBackgroundDataSetting()>;NETWORK_INFORMATION;SOURCE
<android.net.ConnectivityManager: boolean getMobileDataEnabled()>;NETWORK_INFORMATION;SOURCE
<android.net.ConnectivityManager: boolean isNetworkSupported(int)>;NETWORK_INFORMATION;SOURCE
<android.net.ConnectivityManager: int getLastTetherError(java.lang.String)>;NETWORK_INFORMATION;SOURCE
<android.net.ConnectivityManager: int getNetworkPreference()>;NETWORK_INFORMATION;SOURCE
<android.net.ConnectivityManager: int stopUsingNetworkFeature(int,java.lang.String)>;NETWORK_INFORMATION;SOURCE
<android.net.ConnectivityManager: int tether(java.lang.String)>;NETWORK_INFORMATION;SOURCE
<android.net.ConnectivityManager: int untether(java.lang.String)>;NETWORK_INFORMATION;SOURCE
<android.net.ConnectivityManager: java.lang.String getNetworkTypeName(int)>;NETWORK_INFORMATION;SOURCE
<android.net.ConnectivityManager: java.lang.String[] getTetherableBluetoothRegexs()>;BLUETOOTH_INFORMATION;SOURCE
<android.net.ConnectivityManager: java.lang.String[] getTetherableIfaces()>;NETWORK_INFORMATION;SOURCE
<android.net.ConnectivityManager: java.lang.String[] getTetherableUsbRegexs()>;NETWORK_INFORMATION;SOURCE
<android.net.ConnectivityManager: java.lang.String[] getTetherableWifiRegexs()>;NETWORK_INFORMATION;SOURCE
<android.net.ConnectivityManager: java.lang.String[] getTetheredIfaces()>;NETWORK_INFORMATION;SOURCE
<android.net.ConnectivityManager: java.lang.String[] getTetheringErroredIfaces()>;NETWORK_INFORMATION;SOURCE
<android.net.DhcpInfoInternal: java.util.Collection getRoutes()>;NETWORK_INFORMATION;SOURCE
<android.net.IConnectivityManager$Stub$Proxy: android.net.LinkProperties getActiveLinkProperties()>;NETWORK_INFORMATION;SOURCE
<android.net.IConnectivityManager$Stub$Proxy: android.net.LinkProperties getLinkProperties(int)>;NETWORK_INFORMATION;SOURCE
<android.net.IConnectivityManager$Stub$Proxy: android.net.NetworkInfo getActiveNetworkInfo()>;NETWORK_INFORMATION;SOURCE
<android.net.IConnectivityManager$Stub$Proxy: android.net.NetworkInfo getActiveNetworkInfoForUid(int)>;NETWORK_INFORMATION;SOURCE
<android.net.IConnectivityManager$Stub$Proxy: android.net.NetworkInfo getNetworkInfo(int)>;NETWORK_INFORMATION;SOURCE
<android.net.IConnectivityManager$Stub$Proxy: android.net.NetworkInfo[] getAllNetworkInfo()>;NETWORK_INFORMATION;SOURCE
<android.net.IConnectivityManager$Stub$Proxy: android.net.NetworkQuotaInfo getActiveNetworkQuotaInfo()>;NETWORK_INFORMATION;SOURCE
<android.net.IConnectivityManager$Stub$Proxy: android.net.NetworkState[] getAllNetworkState()>;NETWORK_INFORMATION;SOURCE
<android.net.IConnectivityManager$Stub$Proxy: android.net.ProxyProperties getGlobalProxy()>;NETWORK_INFORMATION;SOURCE
<android.net.IConnectivityManager$Stub$Proxy: android.net.ProxyProperties getProxy()>;NETWORK_INFORMATION;SOURCE
<android.net.IConnectivityManager$Stub$Proxy: android.os.ParcelFileDescriptor establishVpn(com.android.internal.net.VpnConfig)>;NETWORK_INFORMATION;SOURCE
<android.net.IConnectivityManager$Stub$Proxy: boolean isNetworkSupported(int)>;NETWORK_INFORMATION;SOURCE
<android.net.IConnectivityManager$Stub$Proxy: com.android.internal.net.LegacyVpnInfo getLegacyVpnInfo()>;NETWORK_INFORMATION;SOURCE
<android.net.IConnectivityManager$Stub$Proxy: int getLastTetherError(java.lang.String)>;NETWORK_INFORMATION;SOURCE
<android.net.IConnectivityManager$Stub$Proxy: int getNetworkPreference()>;NETWORK_INFORMATION;SOURCE
<android.net.IConnectivityManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()>;NETWORK_INFORMATION;SOURCE
<android.net.IConnectivityManager$Stub$Proxy: java.lang.String[] getTetherableBluetoothRegexs()>;BLUETOOTH_INFORMATION;SOURCE
<android.net.IConnectivityManager$Stub$Proxy: java.lang.String[] getTetherableIfaces()>;NETWORK_INFORMATION;SOURCE
<android.net.IConnectivityManager$Stub$Proxy: java.lang.String[] getTetherableUsbRegexs()>;NETWORK_INFORMATION;SOURCE
<android.net.IConnectivityManager$Stub$Proxy: java.lang.String[] getTetherableWifiRegexs()>;NETWORK_INFORMATION;SOURCE
<android.net.IConnectivityManager$Stub$Proxy: java.lang.String[] getTetheredIfacePairs()>;NETWORK_INFORMATION;SOURCE
<android.net.IConnectivityManager$Stub$Proxy: java.lang.String[] getTetheredIfaces()>;NETWORK_INFORMATION;SOURCE
<android.net.IConnectivityManager$Stub$Proxy: java.lang.String[] getTetheringErroredIfaces()>;NETWORK_INFORMATION;SOURCE
<android.net.IConnectivityManager$Stub: android.os.IBinder asBinder()>;NETWORK_INFORMATION;SOURCE
<android.net.INetworkPolicyListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()>;NETWORK_INFORMATION;SOURCE
<android.net.INetworkPolicyListener$Stub: android.os.IBinder asBinder()>;NETWORK_INFORMATION;SOURCE
<android.net.INetworkPolicyManager$Stub$Proxy: android.net.NetworkPolicy[] getNetworkPolicies()>;NETWORK_INFORMATION;SOURCE
<android.net.INetworkPolicyManager$Stub$Proxy: android.net.NetworkQuotaInfo getNetworkQuotaInfo(android.net.NetworkState)>;NETWORK_INFORMATION;SOURCE
<android.net.INetworkPolicyManager$Stub$Proxy: boolean isUidForeground(int)>;NETWORK_INFORMATION;SOURCE
<android.net.INetworkPolicyManager$Stub$Proxy: int getUidPolicy(int)>;NETWORK_INFORMATION;SOURCE
<android.net.INetworkPolicyManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()>;NETWORK_INFORMATION;SOURCE
<android.net.INetworkPolicyManager$Stub: android.os.IBinder asBinder()>;NETWORK_INFORMATION;SOURCE
<android.net.INetworkStatsService$Stub$Proxy: android.net.NetworkStats getDataLayerSnapshotForUid(int)>;NETWORK_INFORMATION;SOURCE
<android.net.INetworkStatsService$Stub$Proxy: java.lang.String getInterfaceDescriptor()>;NETWORK_INFORMATION;SOURCE
<android.net.INetworkStatsService$Stub: android.os.IBinder asBinder()>;NETWORK_INFORMATION;SOURCE
<android.net.IThrottleManager$Stub$Proxy: int getCliffLevel(java.lang.String,int)>;NETWORK_INFORMATION;SOURCE
<android.net.IThrottleManager$Stub$Proxy: int getThrottle(java.lang.String)>;NETWORK_INFORMATION;SOURCE
<android.net.IThrottleManager$Stub$Proxy: java.lang.String getHelpUri()>;NETWORK_INFORMATION;SOURCE
<android.net.IThrottleManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()>;NETWORK_INFORMATION;SOURCE
<android.net.IThrottleManager$Stub$Proxy: long getByteCount(java.lang.String,int,int,int)>;NETWORK_INFORMATION;SOURCE
<android.net.IThrottleManager$Stub$Proxy: long getCliffThreshold(java.lang.String,int)>;NETWORK_INFORMATION;SOURCE
<android.net.IThrottleManager$Stub$Proxy: long getPeriodStartTime(java.lang.String)>;NETWORK_INFORMATION;SOURCE
<android.net.IThrottleManager$Stub$Proxy: long getResetTime(java.lang.String)>;NETWORK_INFORMATION;SOURCE
<android.net.IThrottleManager$Stub: android.os.IBinder asBinder()>;NETWORK_INFORMATION;SOURCE
<android.net.LinkAddress: int getNetworkPrefixLength()>;NETWORK_INFORMATION;SOURCE
<android.net.LinkAddress: java.net.InetAddress getAddress()>;NETWORK_INFORMATION;SOURCE
<android.net.LinkCapabilities: java.lang.String get(int)>;NETWORK_INFORMATION;SOURCE
<android.net.LinkProperties: android.net.ProxyProperties getHttpProxy()>;NETWORK_INFORMATION;SOURCE
<android.net.LinkProperties: java.lang.String getInterfaceName()>;NETWORK_INFORMATION;SOURCE
<android.net.LinkProperties: java.util.Collection getAddresses()>;NETWORK_INFORMATION;SOURCE
<android.net.LinkProperties: java.util.Collection getDnses()>;NETWORK_INFORMATION;SOURCE
<android.net.LinkProperties: java.util.Collection getLinkAddresses()>;NETWORK_INFORMATION;SOURCE
<android.net.LinkProperties: java.util.Collection getRoutes()>;NETWORK_INFORMATION;SOURCE
<android.net.LocalServerSocket: android.net.LocalSocketAddress getLocalSocketAddress()>;NETWORK_INFORMATION;SOURCE
<android.net.LocalServerSocket: java.io.FileDescriptor getFileDescriptor()>;NETWORK_INFORMATION;SOURCE
<android.net.LocalSocket: android.net.Credentials getPeerCredentials()>;NETWORK_INFORMATION;SOURCE
<android.net.LocalSocket: android.net.LocalSocketAddress getLocalSocketAddress()>;NETWORK_INFORMATION;SOURCE
<android.net.LocalSocket: android.net.LocalSocketAddress getRemoteSocketAddress()>;NETWORK_INFORMATION;SOURCE
<android.net.LocalSocket: int getReceiveBufferSize()>;NETWORK_INFORMATION;SOURCE
<android.net.LocalSocket: int getSendBufferSize()>;NETWORK_INFORMATION;SOURCE
<android.net.LocalSocket: int getSoTimeout()>;NETWORK_INFORMATION;SOURCE
<android.net.LocalSocket: java.io.FileDescriptor getFileDescriptor()>;NETWORK_INFORMATION;SOURCE
<android.net.LocalSocket: java.io.FileDescriptor[] getAncillaryFileDescriptors()>;NETWORK_INFORMATION;SOURCE
<android.net.LocalSocket: java.io.InputStream getInputStream()>;NETWORK_INFORMATION;SOURCE
<android.net.LocalSocket: java.io.OutputStream getOutputStream()>;NETWORK_INFORMATION;SOURCE
<android.net.LocalSocketAddress: java.lang.String getName()>;NETWORK_INFORMATION;SOURCE
<android.net.LocalSocketImpl: android.net.Credentials getPeerCredentials()>;NETWORK_INFORMATION;SOURCE
<android.net.LocalSocketImpl: android.net.LocalSocketAddress getSockAddress()>;NETWORK_INFORMATION;SOURCE
<android.net.LocalSocketImpl: java.io.FileDescriptor getFileDescriptor()>;NETWORK_INFORMATION;SOURCE
<android.net.LocalSocketImpl: java.io.FileDescriptor[] getAncillaryFileDescriptors()>;NETWORK_INFORMATION;SOURCE
<android.net.LocalSocketImpl: java.io.InputStream getInputStream()>;NETWORK_INFORMATION;SOURCE
<android.net.LocalSocketImpl: java.io.OutputStream getOutputStream()>;NETWORK_INFORMATION;SOURCE
<android.net.LocalSocketImpl: java.lang.Object getOption(int)>;NETWORK_INFORMATION;SOURCE
<android.net.NetworkIdentity: boolean getRoaming()>;NETWORK_INFORMATION;SOURCE
<android.net.NetworkIdentity: int getSubType()>;NETWORK_INFORMATION;SOURCE
<android.net.NetworkIdentity: int getType()>;NETWORK_INFORMATION;SOURCE
<android.net.NetworkIdentity: java.lang.String getSubscriberId()>;NETWORK_INFORMATION;SOURCE
<android.net.NetworkInfo: android.net.NetworkInfo$DetailedState getDetailedState()>;NETWORK_INFORMATION;SOURCE
<android.net.NetworkInfo: int getSubtype()>;NETWORK_INFORMATION;SOURCE
<android.net.NetworkInfo: java.lang.String getExtraInfo()>;NETWORK_INFORMATION;SOURCE
<android.net.NetworkInfo: java.lang.String getReason()>;NETWORK_INFORMATION;SOURCE
<android.net.NetworkInfo: java.lang.String getSubtypeName()>;NETWORK_INFORMATION;SOURCE
<android.net.NetworkInfo: java.lang.String getTypeName()>;NETWORK_INFORMATION;SOURCE
<android.net.NetworkPolicyManager: android.net.NetworkPolicy[] getNetworkPolicies()>;NETWORK_INFORMATION;SOURCE
<android.net.NetworkPolicyManager: int getUidPolicy(int)>;NETWORK_INFORMATION;SOURCE
<android.net.NetworkPolicyManager: long computeLastCycleBoundary(long,android.net.NetworkPolicy)>;NETWORK_INFORMATION;SOURCE
<android.net.NetworkPolicyManager: long computeNextCycleBoundary(long,android.net.NetworkPolicy)>;NETWORK_INFORMATION;SOURCE
<android.net.NetworkQuotaInfo: long getEstimatedBytes()>;NETWORK_INFORMATION;SOURCE
<android.net.NetworkQuotaInfo: long getHardLimitBytes()>;NETWORK_INFORMATION;SOURCE
<android.net.NetworkQuotaInfo: long getSoftLimitBytes()>;NETWORK_INFORMATION;SOURCE
<android.net.NetworkStats: int[] getUniqueUids()>;NETWORK_INFORMATION;SOURCE
<android.net.NetworkStats: java.lang.String[] getUniqueIfaces()>;NETWORK_INFORMATION;SOURCE
<android.net.NetworkStats: long getElapsedRealtime()>;NETWORK_INFORMATION;SOURCE
<android.net.NetworkStats: long getElapsedRealtimeAge()>;NETWORK_INFORMATION;SOURCE
<android.net.NetworkStats: long getTotalBytes()>;NETWORK_INFORMATION;SOURCE
<android.net.NetworkStatsHistory: int getIndexAfter(long)>;NETWORK_INFORMATION;SOURCE
<android.net.NetworkStatsHistory: int getIndexBefore(long)>;NETWORK_INFORMATION;SOURCE
<android.net.NetworkStatsHistory: long getBucketDuration()>;NETWORK_INFORMATION;SOURCE
<android.net.NetworkStatsHistory: long getEnd()>;NETWORK_INFORMATION;SOURCE
<android.net.NetworkStatsHistory: long getStart()>;NETWORK_INFORMATION;SOURCE
<android.net.NetworkTemplate: int getMatchRule()>;NETWORK_INFORMATION;SOURCE
<android.net.NetworkTemplate: java.lang.String getSubscriberId()>;NETWORK_INFORMATION;SOURCE
<android.net.NetworkUtils: java.net.InetAddress getNetworkPart(java.net.InetAddress,int)>;NETWORK_INFORMATION;SOURCE
<android.net.Proxy: java.lang.String getDefaultHost()>;NETWORK_INFORMATION;SOURCE
<android.net.Proxy: java.lang.String getHost(android.content.Context)>;NETWORK_INFORMATION;SOURCE
<android.net.Proxy: java.net.Proxy getProxy(android.content.Context,java.lang.String)>;NETWORK_INFORMATION;SOURCE
<android.net.Proxy: org.apache.http.HttpHost getPreferredHttpHost(android.content.Context,java.lang.String)>;NETWORK_INFORMATION;SOURCE
<android.net.ProxyProperties: int getPort()>;NETWORK_INFORMATION;SOURCE
<android.net.ProxyProperties: java.lang.String getExclusionList()>;NETWORK_INFORMATION;SOURCE
<android.net.ProxyProperties: java.lang.String getHost()>;NETWORK_INFORMATION;SOURCE
<android.net.ProxyProperties: java.net.InetSocketAddress getSocketAddress()>;NETWORK_INFORMATION;SOURCE
<android.net.RouteInfo: android.net.LinkAddress getDestination()>;NETWORK_INFORMATION;SOURCE
<android.net.RouteInfo: java.net.InetAddress getGateway()>;NETWORK_INFORMATION;SOURCE
<android.net.SSLCertificateSocketFactory$1: java.security.cert.X509Certificate[] getAcceptedIssuers()>;NETWORK_INFORMATION;SOURCE
<android.net.SSLCertificateSocketFactory: java.lang.String[] getDefaultCipherSuites()>;NETWORK_INFORMATION;SOURCE
<android.net.SSLCertificateSocketFactory: java.lang.String[] getSupportedCipherSuites()>;NETWORK_INFORMATION;SOURCE
<android.net.SSLCertificateSocketFactory: javax.net.SocketFactory getDefault(int)>;NETWORK_INFORMATION;SOURCE
<android.net.SSLCertificateSocketFactory: javax.net.ssl.SSLSocketFactory getDefault(int,android.net.SSLSessionCache)>;NETWORK_INFORMATION;SOURCE
<android.net.SSLCertificateSocketFactory: javax.net.ssl.SSLSocketFactory getInsecure(int,android.net.SSLSessionCache)>;NETWORK_INFORMATION;SOURCE
<android.net.SSLCertificateSocketFactory: org.apache.http.conn.ssl.SSLSocketFactory getHttpSocketFactory(int,android.net.SSLSessionCache)>;NETWORK_INFORMATION;SOURCE
<android.net.ThrottleManager: int getCliffLevel(java.lang.String,int)>;NETWORK_INFORMATION;SOURCE
<android.net.ThrottleManager: java.lang.String getHelpUri()>;NETWORK_INFORMATION;SOURCE
<android.net.ThrottleManager: long getByteCount(java.lang.String,int,int,int)>;NETWORK_INFORMATION;SOURCE
<android.net.ThrottleManager: long getCliffThreshold(java.lang.String,int)>;NETWORK_INFORMATION;SOURCE
<android.net.ThrottleManager: long getPeriodStartTime(java.lang.String)>;NETWORK_INFORMATION;SOURCE
<android.net.ThrottleManager: long getResetTime(java.lang.String)>;NETWORK_INFORMATION;SOURCE
<android.net.TrafficStats: int getThreadStatsTag()>;NETWORK_INFORMATION;SOURCE
<android.net.TrafficStats: long getMobileRxBytes()>;NETWORK_INFORMATION;SOURCE
<android.net.TrafficStats: long getMobileRxPackets()>;NETWORK_INFORMATION;SOURCE
<android.net.TrafficStats: long getMobileTxBytes()>;NETWORK_INFORMATION;SOURCE
<android.net.TrafficStats: long getMobileTxPackets()>;NETWORK_INFORMATION;SOURCE
<android.net.TrafficStats: long getRxBytes(java.lang.String)>;NETWORK_INFORMATION;SOURCE
<android.net.TrafficStats: long getRxPackets(java.lang.String)>;NETWORK_INFORMATION;SOURCE
<android.net.TrafficStats: long getTotalRxBytes()>;NETWORK_INFORMATION;SOURCE
<android.net.TrafficStats: long getTotalRxPackets()>;NETWORK_INFORMATION;SOURCE
<android.net.TrafficStats: long getTotalTxBytes()>;NETWORK_INFORMATION;SOURCE
<android.net.TrafficStats: long getTotalTxPackets()>;NETWORK_INFORMATION;SOURCE
<android.net.TrafficStats: long getTxBytes(java.lang.String)>;NETWORK_INFORMATION;SOURCE
<android.net.TrafficStats: long getTxPackets(java.lang.String)>;NETWORK_INFORMATION;SOURCE
<android.net.Uri$AbstractHierarchicalUri: int getPort()>;NETWORK_INFORMATION;SOURCE
<android.net.Uri$AbstractHierarchicalUri: java.lang.String getEncodedUserInfo()>;NETWORK_INFORMATION;SOURCE
<android.net.Uri$AbstractHierarchicalUri: java.lang.String getHost()>;NETWORK_INFORMATION;SOURCE
<android.net.Uri$AbstractHierarchicalUri: java.lang.String getLastPathSegment()>;NETWORK_INFORMATION;SOURCE
<android.net.Uri$AbstractHierarchicalUri: java.lang.String getUserInfo()>;NETWORK_INFORMATION;SOURCE
<android.net.Uri$AbstractPart: java.lang.String getDecoded()>;NETWORK_INFORMATION;SOURCE
<android.net.Uri$HierarchicalUri: java.lang.String getAuthority()>;NETWORK_INFORMATION;SOURCE
<android.net.Uri$HierarchicalUri: java.lang.String getEncodedAuthority()>;NETWORK_INFORMATION;SOURCE
<android.net.Uri$HierarchicalUri: java.lang.String getEncodedFragment()>;NETWORK_INFORMATION;SOURCE
<android.net.Uri$HierarchicalUri: java.lang.String getEncodedPath()>;NETWORK_INFORMATION;SOURCE
<android.net.Uri$HierarchicalUri: java.lang.String getEncodedQuery()>;NETWORK_INFORMATION;SOURCE
<android.net.Uri$HierarchicalUri: java.lang.String getEncodedSchemeSpecificPart()>;NETWORK_INFORMATION;SOURCE
<android.net.Uri$HierarchicalUri: java.lang.String getFragment()>;NETWORK_INFORMATION;SOURCE
<android.net.Uri$HierarchicalUri: java.lang.String getPath()>;NETWORK_INFORMATION;SOURCE
<android.net.Uri$HierarchicalUri: java.lang.String getQuery()>;NETWORK_INFORMATION;SOURCE
<android.net.Uri$HierarchicalUri: java.lang.String getScheme()>;NETWORK_INFORMATION;SOURCE
<android.net.Uri$HierarchicalUri: java.lang.String getSchemeSpecificPart()>;NETWORK_INFORMATION;SOURCE
<android.net.Uri$HierarchicalUri: java.util.List getPathSegments()>;NETWORK_INFORMATION;SOURCE
<android.net.Uri$OpaqueUri: int getPort()>;NETWORK_INFORMATION;SOURCE
<android.net.Uri$OpaqueUri: java.lang.String getAuthority()>;NETWORK_INFORMATION;SOURCE
<android.net.Uri$OpaqueUri: java.lang.String getEncodedAuthority()>;NETWORK_INFORMATION;SOURCE
<android.net.Uri$OpaqueUri: java.lang.String getEncodedFragment()>;NETWORK_INFORMATION;SOURCE
<android.net.Uri$OpaqueUri: java.lang.String getEncodedPath()>;NETWORK_INFORMATION;SOURCE
<android.net.Uri$OpaqueUri: java.lang.String getEncodedQuery()>;NETWORK_INFORMATION;SOURCE
<android.net.Uri$OpaqueUri: java.lang.String getEncodedSchemeSpecificPart()>;NETWORK_INFORMATION;SOURCE
<android.net.Uri$OpaqueUri: java.lang.String getEncodedUserInfo()>;NETWORK_INFORMATION;SOURCE
<android.net.Uri$OpaqueUri: java.lang.String getFragment()>;NETWORK_INFORMATION;SOURCE
<android.net.Uri$OpaqueUri: java.lang.String getHost()>;NETWORK_INFORMATION;SOURCE
<android.net.Uri$OpaqueUri: java.lang.String getLastPathSegment()>;NETWORK_INFORMATION;SOURCE
<android.net.Uri$OpaqueUri: java.lang.String getPath()>;NETWORK_INFORMATION;SOURCE
<android.net.Uri$OpaqueUri: java.lang.String getQuery()>;NETWORK_INFORMATION;SOURCE
<android.net.Uri$OpaqueUri: java.lang.String getScheme()>;NETWORK_INFORMATION;SOURCE
<android.net.Uri$OpaqueUri: java.lang.String getSchemeSpecificPart()>;NETWORK_INFORMATION;SOURCE
<android.net.Uri$OpaqueUri: java.lang.String getUserInfo()>;NETWORK_INFORMATION;SOURCE
<android.net.Uri$OpaqueUri: java.util.List getPathSegments()>;NETWORK_INFORMATION;SOURCE
<android.net.Uri$Part: java.lang.String getEncoded()>;NETWORK_INFORMATION;SOURCE
<android.net.Uri$PathPart: java.lang.String getEncoded()>;NETWORK_INFORMATION;SOURCE
<android.net.Uri$StringUri: java.lang.String getAuthority()>;NETWORK_INFORMATION;SOURCE
<android.net.Uri$StringUri: java.lang.String getEncodedAuthority()>;NETWORK_INFORMATION;SOURCE
<android.net.Uri$StringUri: java.lang.String getEncodedFragment()>;NETWORK_INFORMATION;SOURCE
<android.net.Uri$StringUri: java.lang.String getEncodedPath()>;NETWORK_INFORMATION;SOURCE
<android.net.Uri$StringUri: java.lang.String getEncodedQuery()>;NETWORK_INFORMATION;SOURCE
<android.net.Uri$StringUri: java.lang.String getEncodedSchemeSpecificPart()>;NETWORK_INFORMATION;SOURCE
<android.net.Uri$StringUri: java.lang.String getFragment()>;NETWORK_INFORMATION;SOURCE
<android.net.Uri$StringUri: java.lang.String getPath()>;NETWORK_INFORMATION;SOURCE
<android.net.Uri$StringUri: java.lang.String getQuery()>;NETWORK_INFORMATION;SOURCE
<android.net.Uri$StringUri: java.lang.String getScheme()>;NETWORK_INFORMATION;SOURCE
<android.net.Uri$StringUri: java.lang.String getSchemeSpecificPart()>;NETWORK_INFORMATION;SOURCE
<android.net.Uri$StringUri: java.util.List getPathSegments()>;NETWORK_INFORMATION;SOURCE
<android.net.Uri: boolean getBooleanQueryParameter(java.lang.String,boolean)>;NETWORK_INFORMATION;SOURCE
<android.net.Uri: java.lang.String getQueryParameter(java.lang.String)>;NETWORK_INFORMATION;SOURCE
<android.net.Uri: java.lang.String toSafeString()>;NETWORK_INFORMATION;SOURCE
<android.net.Uri: java.util.List getQueryParameters(java.lang.String)>;NETWORK_INFORMATION;SOURCE
<android.net.Uri: java.util.Set getQueryParameterNames()>;NETWORK_INFORMATION;SOURCE
<android.net.WebAddress: int getPort()>;NETWORK_INFORMATION;SOURCE
<android.net.WebAddress: java.lang.String getAuthInfo()>;NETWORK_INFORMATION;SOURCE
<android.net.WebAddress: java.lang.String getHost()>;NETWORK_INFORMATION;SOURCE
<android.net.WebAddress: java.lang.String getPath()>;NETWORK_INFORMATION;SOURCE
<android.net.WebAddress: java.lang.String getScheme()>;NETWORK_INFORMATION;SOURCE
<android.net.http.AndroidHttpClient$2: org.apache.http.protocol.BasicHttpProcessor createHttpProcessor()>;NETWORK_INFORMATION;SOURCE
<android.net.http.AndroidHttpClient: long getMinGzipSize(android.content.ContentResolver)>;NETWORK_INFORMATION;SOURCE
<android.net.http.AndroidHttpClient: org.apache.http.conn.ClientConnectionManager getConnectionManager()>;NETWORK_INFORMATION;SOURCE
<android.net.http.AndroidHttpClient: org.apache.http.entity.AbstractHttpEntity getCompressedEntity(byte[],android.content.ContentResolver)>;NETWORK_INFORMATION;SOURCE
<android.net.http.AndroidHttpClient: org.apache.http.params.HttpParams getParams()>;NETWORK_INFORMATION;SOURCE
<android.net.http.AndroidHttpClientConnection: int getLocalPort()>;NETWORK_INFORMATION;SOURCE
<android.net.http.AndroidHttpClientConnection: int getRemotePort()>;NETWORK_INFORMATION;SOURCE
<android.net.http.AndroidHttpClientConnection: int getSocketTimeout()>;NETWORK_INFORMATION;SOURCE
<android.net.http.AndroidHttpClientConnection: java.net.InetAddress getLocalAddress()>;NETWORK_INFORMATION;SOURCE
<android.net.http.AndroidHttpClientConnection: java.net.InetAddress getRemoteAddress()>;NETWORK_INFORMATION;SOURCE
<android.net.http.AndroidHttpClientConnection: org.apache.http.HttpConnectionMetrics getMetrics()>;NETWORK_INFORMATION;SOURCE
<android.net.http.CertificateChainValidator: android.net.http.CertificateChainValidator getInstance()>;NETWORK_INFORMATION;SOURCE
<android.net.http.Connection: android.net.http.Connection getConnection(android.content.Context,org.apache.http.HttpHost,org.apache.http.HttpHost,android.net.http.RequestFeeder)>;NETWORK_INFORMATION;SOURCE
<android.net.http.Connection: android.net.http.SslCertificate getCertificate()>;NETWORK_INFORMATION;SOURCE
<android.net.http.Connection: boolean getCanPersist()>;NETWORK_INFORMATION;SOURCE
<android.net.http.Connection: byte[] getBuf()>;NETWORK_INFORMATION;SOURCE
<android.net.http.Connection: org.apache.http.HttpHost getHost()>;NETWORK_INFORMATION;SOURCE
<android.net.http.Connection: org.apache.http.protocol.HttpContext getHttpContext()>;NETWORK_INFORMATION;SOURCE
<android.net.http.ErrorStrings: java.lang.String getString(int,android.content.Context)>;NETWORK_INFORMATION;SOURCE
<android.net.http.Headers: int getConnectionType()>;NETWORK_INFORMATION;SOURCE
<android.net.http.Headers: java.lang.String getAcceptRanges()>;NETWORK_INFORMATION;SOURCE
<android.net.http.Headers: java.lang.String getCacheControl()>;NETWORK_INFORMATION;SOURCE
<android.net.http.Headers: java.lang.String getContentDisposition()>;NETWORK_INFORMATION;SOURCE
<android.net.http.Headers: java.lang.String getContentEncoding()>;NETWORK_INFORMATION;SOURCE
<android.net.http.Headers: java.lang.String getContentType()>;NETWORK_INFORMATION;SOURCE
<android.net.http.Headers: java.lang.String getEtag()>;NETWORK_INFORMATION;SOURCE
<android.net.http.Headers: java.lang.String getExpires()>;NETWORK_INFORMATION;SOURCE
<android.net.http.Headers: java.lang.String getLastModified()>;NETWORK_INFORMATION;SOURCE
<android.net.http.Headers: java.lang.String getLocation()>;NETWORK_INFORMATION;SOURCE
<android.net.http.Headers: java.lang.String getPragma()>;NETWORK_INFORMATION;SOURCE
<android.net.http.Headers: java.lang.String getProxyAuthenticate()>;NETWORK_INFORMATION;SOURCE
<android.net.http.Headers: java.lang.String getRefresh()>;NETWORK_INFORMATION;SOURCE
<android.net.http.Headers: java.lang.String getWwwAuthenticate()>;NETWORK_INFORMATION;SOURCE
<android.net.http.Headers: java.lang.String getXPermittedCrossDomainPolicies()>;NETWORK_INFORMATION;SOURCE
<android.net.http.Headers: java.util.ArrayList getSetCookie()>;NETWORK_INFORMATION;SOURCE
<android.net.http.Headers: long getContentLength()>;NETWORK_INFORMATION;SOURCE
<android.net.http.Headers: long getTransferEncoding()>;NETWORK_INFORMATION;SOURCE
<android.net.http.HttpConnection: java.lang.String getScheme()>;NETWORK_INFORMATION;SOURCE
<android.net.http.HttpsConnection$1: java.security.cert.X509Certificate[] getAcceptedIssuers()>;NETWORK_INFORMATION;SOURCE
<android.net.http.HttpsConnection: java.lang.String getScheme()>;NETWORK_INFORMATION;SOURCE
<android.net.http.IdleCache: android.net.http.Connection getConnection(org.apache.http.HttpHost)>;NETWORK_INFORMATION;SOURCE
<android.net.http.Request: android.net.http.EventHandler getEventHandler()>;NETWORK_INFORMATION;SOURCE
<android.net.http.Request: java.lang.String getHostPort()>;NETWORK_INFORMATION;SOURCE
<android.net.http.Request: java.lang.String getUri()>;NETWORK_INFORMATION;SOURCE
<android.net.http.RequestHandle: int getRedirectCount()>;NETWORK_INFORMATION;SOURCE
<android.net.http.RequestHandle: java.lang.String getMethod()>;NETWORK_INFORMATION;SOURCE
<android.net.http.RequestQueue$ActivePool: android.net.http.Connection getConnection(android.content.Context,org.apache.http.HttpHost)>;NETWORK_INFORMATION;SOURCE
<android.net.http.RequestQueue$ActivePool: android.net.http.ConnectionThread getThread(org.apache.http.HttpHost)>;NETWORK_INFORMATION;SOURCE
<android.net.http.RequestQueue$ActivePool: org.apache.http.HttpHost getProxyHost()>;NETWORK_INFORMATION;SOURCE
<android.net.http.RequestQueue$SyncFeeder: android.net.http.Request getRequest()>;NETWORK_INFORMATION;SOURCE
<android.net.http.RequestQueue$SyncFeeder: android.net.http.Request getRequest(org.apache.http.HttpHost)>;NETWORK_INFORMATION;SOURCE
<android.net.http.RequestQueue: android.net.http.Request getRequest()>;NETWORK_INFORMATION;SOURCE
<android.net.http.RequestQueue: android.net.http.Request getRequest(org.apache.http.HttpHost)>;NETWORK_INFORMATION;SOURCE
<android.net.http.RequestQueue: org.apache.http.HttpHost getProxyHost()>;NETWORK_INFORMATION;SOURCE
<android.net.http.SslCertificate$DName: java.lang.String getCName()>;NETWORK_INFORMATION;SOURCE
<android.net.http.SslCertificate$DName: java.lang.String getDName()>;NETWORK_INFORMATION;SOURCE
<android.net.http.SslCertificate$DName: java.lang.String getOName()>;NETWORK_INFORMATION;SOURCE
<android.net.http.SslCertificate$DName: java.lang.String getUName()>;NETWORK_INFORMATION;SOURCE
<android.net.http.SslCertificate: java.lang.String getValidNotAfter()>;NETWORK_INFORMATION;SOURCE
<android.net.http.SslCertificate: java.lang.String getValidNotBefore()>;NETWORK_INFORMATION;SOURCE
<android.net.http.SslCertificate: java.util.Date getValidNotAfterDate()>;NETWORK_INFORMATION;SOURCE
<android.net.http.SslCertificate: java.util.Date getValidNotBeforeDate()>;NETWORK_INFORMATION;SOURCE
<android.net.http.SslError: android.net.http.SslCertificate getCertificate()>;NETWORK_INFORMATION;SOURCE
<android.net.http.SslError: int getPrimaryError()>;NETWORK_INFORMATION;SOURCE
<android.net.http.SslError: java.lang.String getUrl()>;NETWORK_INFORMATION;SOURCE
<android.net.rtp.AudioCodec: android.net.rtp.AudioCodec getCodec(int,java.lang.String,java.lang.String)>;NETWORK_INFORMATION;SOURCE
<android.net.rtp.AudioCodec: android.net.rtp.AudioCodec[] getCodecs()>;NETWORK_INFORMATION;SOURCE
<android.net.rtp.AudioGroup: android.net.rtp.AudioStream[] getStreams()>;NETWORK_INFORMATION;SOURCE
<android.net.rtp.AudioGroup: int getMode()>;NETWORK_INFORMATION;SOURCE
<android.net.rtp.AudioStream: android.net.rtp.AudioCodec getCodec()>;NETWORK_INFORMATION;SOURCE
<android.net.rtp.AudioStream: android.net.rtp.AudioGroup getGroup()>;NETWORK_INFORMATION;SOURCE
<android.net.rtp.AudioStream: int getDtmfType()>;NETWORK_INFORMATION;SOURCE
<android.net.rtp.RtpStream: int getLocalPort()>;NETWORK_INFORMATION;SOURCE
<android.net.rtp.RtpStream: int getMode()>;NETWORK_INFORMATION;SOURCE
<android.net.rtp.RtpStream: int getRemotePort()>;NETWORK_INFORMATION;SOURCE
<android.net.rtp.RtpStream: java.net.InetAddress getLocalAddress()>;NETWORK_INFORMATION;SOURCE
<android.net.rtp.RtpStream: java.net.InetAddress getRemoteAddress()>;NETWORK_INFORMATION;SOURCE
<android.net.sip.ISipService$Stub$Proxy: android.net.sip.ISipSession createSession(android.net.sip.SipProfile,android.net.sip.ISipSessionListener)>;NETWORK_INFORMATION;SOURCE
<android.net.sip.ISipService$Stub$Proxy: android.net.sip.ISipSession getPendingSession(java.lang.String)>;NETWORK_INFORMATION;SOURCE
<android.net.sip.ISipService$Stub$Proxy: android.net.sip.SipProfile[] getListOfProfiles()>;NETWORK_INFORMATION;SOURCE
<android.net.sip.ISipService$Stub$Proxy: java.lang.String getInterfaceDescriptor()>;NETWORK_INFORMATION;SOURCE
<android.net.sip.ISipService$Stub: android.os.IBinder asBinder()>;NETWORK_INFORMATION;SOURCE
<android.net.sip.ISipSession$Stub$Proxy: android.net.sip.SipProfile getLocalProfile()>;NETWORK_INFORMATION;SOURCE
<android.net.sip.ISipSession$Stub$Proxy: android.net.sip.SipProfile getPeerProfile()>;NETWORK_INFORMATION;SOURCE
<android.net.sip.ISipSession$Stub$Proxy: int getState()>;NETWORK_INFORMATION;SOURCE
<android.net.sip.ISipSession$Stub$Proxy: java.lang.String getInterfaceDescriptor()>;NETWORK_INFORMATION;SOURCE
<android.net.sip.ISipSession$Stub$Proxy: java.lang.String getLocalIp()>;NETWORK_INFORMATION;SOURCE
<android.net.sip.ISipSession$Stub: android.os.IBinder asBinder()>;NETWORK_INFORMATION;SOURCE
<android.net.sip.ISipSessionListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()>;NETWORK_INFORMATION;SOURCE
<android.net.sip.ISipSessionListener$Stub: android.os.IBinder asBinder()>;NETWORK_INFORMATION;SOURCE
<android.net.sip.SimpleSessionDescription$Fields: java.lang.String getAddress()>;NETWORK_INFORMATION;SOURCE
<android.net.sip.SimpleSessionDescription$Fields: java.lang.String getAttribute(java.lang.String)>;NETWORK_INFORMATION;SOURCE
<android.net.sip.SimpleSessionDescription$Fields: java.lang.String getEncryptionKey()>;NETWORK_INFORMATION;SOURCE
<android.net.sip.SimpleSessionDescription$Fields: java.lang.String getEncryptionMethod()>;NETWORK_INFORMATION;SOURCE
<android.net.sip.SimpleSessionDescription$Fields: java.lang.String[] getAttributeNames()>;NETWORK_INFORMATION;SOURCE
<android.net.sip.SimpleSessionDescription$Media: int getPort()>;NETWORK_INFORMATION;SOURCE
<android.net.sip.SimpleSessionDescription$Media: int getPortCount()>;NETWORK_INFORMATION;SOURCE
<android.net.sip.SimpleSessionDescription$Media: int[] getRtpPayloadTypes()>;NETWORK_INFORMATION;SOURCE
<android.net.sip.SimpleSessionDescription$Media: java.lang.String getAddress()>;NETWORK_INFORMATION;SOURCE
<android.net.sip.SimpleSessionDescription$Media: java.lang.String getAttribute(java.lang.String)>;NETWORK_INFORMATION;SOURCE
<android.net.sip.SimpleSessionDescription$Media: java.lang.String getEncryptionKey()>;NETWORK_INFORMATION;SOURCE
<android.net.sip.SimpleSessionDescription$Media: java.lang.String getEncryptionMethod()>;NETWORK_INFORMATION;SOURCE
<android.net.sip.SimpleSessionDescription$Media: java.lang.String getFmtp(int)>;NETWORK_INFORMATION;SOURCE
<android.net.sip.SimpleSessionDescription$Media: java.lang.String getFmtp(java.lang.String)>;NETWORK_INFORMATION;SOURCE
<android.net.sip.SimpleSessionDescription$Media: java.lang.String getProtocol()>;NETWORK_INFORMATION;SOURCE
<android.net.sip.SimpleSessionDescription$Media: java.lang.String getRtpmap(int)>;NETWORK_INFORMATION;SOURCE
<android.net.sip.SimpleSessionDescription$Media: java.lang.String getType()>;NETWORK_INFORMATION;SOURCE
<android.net.sip.SimpleSessionDescription$Media: java.lang.String[] getAttributeNames()>;NETWORK_INFORMATION;SOURCE
<android.net.sip.SimpleSessionDescription$Media: java.lang.String[] getFormats()>;NETWORK_INFORMATION;SOURCE
<android.net.sip.SimpleSessionDescription: java.lang.String getAddress()>;NETWORK_INFORMATION;SOURCE
<android.net.sip.SimpleSessionDescription: java.lang.String getAttribute(java.lang.String)>;NETWORK_INFORMATION;SOURCE
<android.net.sip.SimpleSessionDescription: java.lang.String getEncryptionKey()>;NETWORK_INFORMATION;SOURCE
<android.net.sip.SimpleSessionDescription: java.lang.String getEncryptionMethod()>;NETWORK_INFORMATION;SOURCE
<android.net.sip.SimpleSessionDescription: java.lang.String[] getAttributeNames()>;NETWORK_INFORMATION;SOURCE
<android.net.sip.SipAudioCall: android.net.rtp.AudioGroup getAudioGroup()>;NETWORK_INFORMATION;SOURCE
<android.net.sip.SipAudioCall: android.net.rtp.AudioStream getAudioStream()>;NETWORK_INFORMATION;SOURCE
<android.net.sip.SipAudioCall: android.net.sip.SipProfile getLocalProfile()>;NETWORK_INFORMATION;SOURCE
<android.net.sip.SipAudioCall: android.net.sip.SipProfile getPeerProfile()>;NETWORK_INFORMATION;SOURCE
<android.net.sip.SipAudioCall: android.net.sip.SipSession getSipSession()>;NETWORK_INFORMATION;SOURCE
<android.net.sip.SipAudioCall: int getState()>;NETWORK_INFORMATION;SOURCE
<android.net.sip.SipManager: android.net.sip.SipProfile[] getListOfProfiles()>;NETWORK_INFORMATION;SOURCE
<android.net.sip.SipManager: android.net.sip.SipSession getSessionFor(android.content.Intent)>;NETWORK_INFORMATION;SOURCE
<android.net.sip.SipManager: boolean isOpened(java.lang.String)>;NETWORK_INFORMATION;SOURCE
<android.net.sip.SipManager: boolean isRegistered(java.lang.String)>;NETWORK_INFORMATION;SOURCE
<android.net.sip.SipManager: java.lang.String getCallId(android.content.Intent)>;NETWORK_INFORMATION;SOURCE
<android.net.sip.SipManager: java.lang.String getOfferSessionDescription(android.content.Intent)>;NETWORK_INFORMATION;SOURCE
<android.net.sip.SipProfile: boolean getAutoRegistration()>;NETWORK_INFORMATION;SOURCE
<android.net.sip.SipProfile: boolean getSendKeepAlive()>;NETWORK_INFORMATION;SOURCE
<android.net.sip.SipProfile: int getPort()>;NETWORK_INFORMATION;SOURCE
<android.net.sip.SipProfile: java.lang.String getAuthUserName()>;NETWORK_INFORMATION;SOURCE
<android.net.sip.SipProfile: java.lang.String getDisplayName()>;NETWORK_INFORMATION;SOURCE
<android.net.sip.SipProfile: java.lang.String getPassword()>;NETWORK_INFORMATION;SOURCE
<android.net.sip.SipProfile: java.lang.String getProfileName()>;NETWORK_INFORMATION;SOURCE
<android.net.sip.SipProfile: java.lang.String getProtocol()>;NETWORK_INFORMATION;SOURCE
<android.net.sip.SipProfile: java.lang.String getProxyAddress()>;NETWORK_INFORMATION;SOURCE
<android.net.sip.SipProfile: java.lang.String getSipDomain()>;NETWORK_INFORMATION;SOURCE
<android.net.sip.SipProfile: java.lang.String getUriString()>;NETWORK_INFORMATION;SOURCE
<android.net.sip.SipProfile: java.lang.String getUserName()>;NETWORK_INFORMATION;SOURCE
<android.net.sip.SipProfile: javax.sip.address.Address getSipAddress()>;NETWORK_INFORMATION;SOURCE
<android.net.sip.SipProfile: javax.sip.address.SipURI getUri()>;FILE_INFORMATION;SOURCE
<android.net.sip.SipSession: android.net.sip.ISipSession getRealSession()>;NETWORK_INFORMATION;SOURCE
<android.net.wifi.IWifiManager$Stub$Proxy: android.net.DhcpInfo getDhcpInfo()>;NETWORK_INFORMATION;SOURCE
<android.net.wifi.IWifiManager$Stub$Proxy: android.net.wifi.WifiConfiguration getWifiApConfiguration()>;NETWORK_INFORMATION;SOURCE
<android.net.wifi.IWifiManager$Stub$Proxy: android.net.wifi.WifiInfo getConnectionInfo()>;NETWORK_INFORMATION;SOURCE
<android.net.wifi.IWifiManager$Stub$Proxy: int getFrequencyBand()>;NETWORK_INFORMATION;SOURCE
<android.net.wifi.IWifiManager$Stub$Proxy: int getWifiApEnabledState()>;NETWORK_INFORMATION;SOURCE
<android.net.wifi.IWifiManager$Stub$Proxy: int getWifiEnabledState()>;NETWORK_INFORMATION;SOURCE
<android.net.wifi.IWifiManager$Stub$Proxy: java.lang.String getConfigFile()>;NETWORK_INFORMATION;SOURCE
<android.net.wifi.IWifiManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()>;NETWORK_INFORMATION;SOURCE
<android.net.wifi.IWifiManager$Stub$Proxy: java.util.List getConfiguredNetworks()>;NETWORK_INFORMATION;SOURCE
<android.net.wifi.IWifiManager$Stub$Proxy: java.util.List getScanResults()>;NETWORK_INFORMATION;SOURCE
<android.net.wifi.IWifiManager$Stub: android.os.IBinder asBinder()>;NETWORK_INFORMATION;SOURCE
<android.net.wifi.WifiConfiguration: int getAuthType()>;NETWORK_INFORMATION;SOURCE
<android.net.wifi.WifiInfo: android.net.wifi.SupplicantState getSupplicantState()>;NETWORK_INFORMATION;SOURCE
<android.net.wifi.WifiInfo: boolean getHiddenSSID()>;NETWORK_INFORMATION;SOURCE
<android.net.wifi.WifiInfo: int getIpAddress()>;NETWORK_INFORMATION;SOURCE
<android.net.wifi.WifiInfo: int getLinkSpeed()>;NETWORK_INFORMATION;SOURCE
<android.net.wifi.WifiInfo: int getNetworkId()>;NETWORK_INFORMATION;SOURCE
<android.net.wifi.WifiInfo: int getRssi()>;NETWORK_INFORMATION;SOURCE
<android.net.wifi.WifiInfo: java.lang.String getBSSID()>;NETWORK_INFORMATION;SOURCE
<android.net.wifi.WifiInfo: java.lang.String getMacAddress()>;NETWORK_INFORMATION;SOURCE
<android.net.wifi.WifiInfo: java.lang.String getSSID()>;NETWORK_INFORMATION;SOURCE
<android.net.wifi.WifiManager: android.net.DhcpInfo getDhcpInfo()>;NETWORK_INFORMATION;SOURCE
<android.net.wifi.WifiManager: android.net.wifi.WifiConfiguration getWifiApConfiguration()>;NETWORK_INFORMATION;SOURCE
<android.net.wifi.WifiManager: android.net.wifi.WifiInfo getConnectionInfo()>;NETWORK_INFORMATION;SOURCE
<android.net.wifi.WifiManager: int getFrequencyBand()>;NETWORK_INFORMATION;SOURCE
<android.net.wifi.WifiManager: int getWifiApState()>;NETWORK_INFORMATION;SOURCE
<android.net.wifi.WifiManager: int getWifiState()>;NETWORK_INFORMATION;SOURCE
<android.net.wifi.WifiManager: java.lang.String getConfigFile()>;NETWORK_INFORMATION;SOURCE
<android.net.wifi.WifiManager: java.util.List getConfiguredNetworks()>;NETWORK_INFORMATION;SOURCE
<android.net.wifi.WifiManager: java.util.List getScanResults()>;NETWORK_INFORMATION;SOURCE
<android.net.wifi.p2p.IWifiP2pManager$Stub$Proxy: android.os.Messenger getMessenger()>;NETWORK_INFORMATION;SOURCE
<android.net.wifi.p2p.IWifiP2pManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()>;NETWORK_INFORMATION;SOURCE
<android.net.wifi.p2p.IWifiP2pManager$Stub: android.os.IBinder asBinder()>;NETWORK_INFORMATION;SOURCE
<android.net.wifi.p2p.WifiP2pDeviceList: java.util.Collection getDeviceList()>;NETWORK_INFORMATION;SOURCE
<android.net.wifi.p2p.WifiP2pGroup: android.net.wifi.p2p.WifiP2pDevice getOwner()>;NETWORK_INFORMATION;SOURCE
<android.net.wifi.p2p.WifiP2pGroup: java.lang.String getInterface()>;NETWORK_INFORMATION;SOURCE
<android.net.wifi.p2p.WifiP2pGroup: java.lang.String getNetworkName()>;NETWORK_INFORMATION;SOURCE
<android.net.wifi.p2p.WifiP2pGroup: java.lang.String getPassphrase()>;NETWORK_INFORMATION;SOURCE
<android.net.wifi.p2p.WifiP2pGroup: java.util.Collection getClientList()>;NETWORK_INFORMATION;SOURCE
<android.net.wifi.p2p.WifiP2pManager: android.os.Messenger getMessenger()>;NETWORK_INFORMATION;SOURCE
<android.net.wifi.p2p.WifiP2pManager: void requestGroupInfo(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pManager$GroupInfoListener)>;NETWORK;SOURCE
<android.nfc.INdefPushCallback$Stub$Proxy: android.nfc.NdefMessage createMessage()>;NFC;SOURCE
<android.nfc.INdefPushCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()>;NFC;SOURCE
<android.nfc.INdefPushCallback$Stub: android.os.IBinder asBinder()>;NFC;SOURCE
<android.nfc.INfcAdapter$Stub$Proxy: android.nfc.INfcAdapterExtras getNfcAdapterExtrasInterface(java.lang.String)>;NFC;SOURCE
<android.nfc.INfcAdapter$Stub$Proxy: android.nfc.INfcTag getNfcTagInterface()>;NFC;SOURCE
<android.nfc.INfcAdapter$Stub$Proxy: int getState()>;NFC;SOURCE
<android.nfc.INfcAdapter$Stub$Proxy: java.lang.String getInterfaceDescriptor()>;NFC;SOURCE
<android.nfc.INfcAdapter$Stub: android.os.IBinder asBinder()>;NFC;SOURCE
<android.nfc.INfcAdapterExtras$Stub$Proxy: android.os.Bundle close(java.lang.String,android.os.IBinder)>;NFC;SOURCE
<android.nfc.INfcAdapterExtras$Stub$Proxy: android.os.Bundle transceive(java.lang.String,byte[])>;NFC;SOURCE
<android.nfc.INfcAdapterExtras$Stub$Proxy: int getCardEmulationRoute(java.lang.String)>;NFC;SOURCE
<android.nfc.INfcAdapterExtras$Stub$Proxy: java.lang.String getInterfaceDescriptor()>;NFC;SOURCE
<android.nfc.INfcAdapterExtras$Stub: android.os.IBinder asBinder()>;NFC;SOURCE
<android.nfc.INfcTag$Stub$Proxy: android.nfc.NdefMessage ndefRead(int)>;NFC;SOURCE
<android.nfc.INfcTag$Stub$Proxy: android.nfc.Tag rediscover(int)>;NFC;SOURCE
<android.nfc.INfcTag$Stub$Proxy: android.nfc.TransceiveResult transceive(int,byte[],boolean)>;NFC;SOURCE
<android.nfc.INfcTag$Stub$Proxy: boolean isNdef(int)>;NFC;SOURCE
<android.nfc.INfcTag$Stub$Proxy: boolean isPresent(int)>;NFC;SOURCE
<android.nfc.INfcTag$Stub$Proxy: int getMaxTransceiveLength(int)>;NFC;SOURCE
<android.nfc.INfcTag$Stub$Proxy: int getTimeout(int)>;NFC;SOURCE
<android.nfc.INfcTag$Stub$Proxy: int[] getTechList(int)>;NFC;SOURCE
<android.nfc.INfcTag$Stub$Proxy: java.lang.String getInterfaceDescriptor()>;NFC;SOURCE
<android.nfc.INfcTag$Stub: android.os.IBinder asBinder()>;NFC;SOURCE
<android.nfc.NdefMessage: android.nfc.NdefRecord[] getRecords()>;NFC;SOURCE
<android.nfc.NdefMessage: byte[] toByteArray()>;NFC;SOURCE
<android.nfc.NdefRecord: android.nfc.NdefRecord createUri(java.lang.String)>;NFC;SOURCE
<android.nfc.NdefRecord: byte[] getId()>;NFC;SOURCE
<android.nfc.NdefRecord: byte[] getPayload()>;NFC;SOURCE
<android.nfc.NdefRecord: byte[] getType()>;NFC;SOURCE
<android.nfc.NdefRecord: byte[] toByteArray()>;NFC;SOURCE
<android.nfc.NdefRecord: short getTnf()>;NFC;SOURCE
<android.nfc.NfcActivityManager: android.nfc.NdefMessage createMessage()>;NFC;SOURCE
<android.nfc.NfcAdapter: android.content.Context getContext()>;NFC;SOURCE
<android.nfc.NfcAdapter: android.nfc.INfcAdapter getService()>;NFC;SOURCE
<android.nfc.NfcAdapter: android.nfc.INfcAdapterExtras getNfcAdapterExtrasInterface()>;NFC;SOURCE
<android.nfc.NfcAdapter: android.nfc.INfcTag getTagService()>;NFC;SOURCE
<android.nfc.NfcAdapter: android.nfc.NfcAdapter getNfcAdapter(android.content.Context)>;NFC;SOURCE
<android.nfc.NfcAdapter: int getAdapterState()>;NFC;SOURCE
<android.nfc.NfcManager: android.nfc.NfcAdapter getDefaultAdapter()>;NFC;SOURCE
<android.nfc.Tag: android.nfc.INfcTag getTagService()>;NFC;SOURCE
<android.nfc.Tag: android.os.Bundle getTechExtras(int)>;NFC;SOURCE
<android.nfc.Tag: byte[] getId()>;NFC;SOURCE
<android.nfc.Tag: byte[] readBytesWithNull(android.os.Parcel)>;NFC;SOURCE
<android.nfc.Tag: int getConnectedTechnology()>;NFC;SOURCE
<android.nfc.Tag: int getServiceHandle()>;NFC;SOURCE
<android.nfc.Tag: java.lang.String[] getTechList()>;NFC;SOURCE
<android.nfc.TechListParcel: java.lang.String[][] getTechLists()>;NFC;SOURCE
<android.nfc.TransceiveResult: byte[] getResponseOrThrow()>;NFC;SOURCE
<android.nfc.tech.BasicTagTechnology: android.nfc.Tag getTag()>;NFC;SOURCE
<android.nfc.tech.BasicTagTechnology: byte[] transceive(byte[],boolean)>;NFC;SOURCE
<android.nfc.tech.BasicTagTechnology: int getMaxTransceiveLengthInternal()>;NFC;SOURCE
<android.nfc.tech.IsoDep: android.nfc.Tag getTag()>;NFC;SOURCE
<android.nfc.tech.IsoDep: android.nfc.tech.IsoDep get(android.nfc.Tag)>;NFC;SOURCE
<android.nfc.tech.IsoDep: byte[] getHiLayerResponse()>;NFC;SOURCE
<android.nfc.tech.IsoDep: byte[] getHistoricalBytes()>;NFC;SOURCE
<android.nfc.tech.IsoDep: byte[] transceive(byte[])>;NFC;SOURCE
<android.nfc.tech.IsoDep: byte[] transceive(byte[],boolean)>;NFC;SOURCE
<android.nfc.tech.IsoDep: int getMaxTransceiveLength()>;NFC;SOURCE
<android.nfc.tech.IsoDep: int getTimeout()>;NFC;SOURCE
<android.nfc.tech.MifareClassic: android.nfc.Tag getTag()>;NFC;SOURCE
<android.nfc.tech.MifareClassic: android.nfc.tech.MifareClassic get(android.nfc.Tag)>;NFC;SOURCE
<android.nfc.tech.MifareClassic: byte[] readBlock(int)>;NFC;SOURCE
<android.nfc.tech.MifareClassic: byte[] transceive(byte[])>;NFC;SOURCE
<android.nfc.tech.MifareClassic: byte[] transceive(byte[],boolean)>;NFC;SOURCE
<android.nfc.tech.MifareClassic: int getBlockCount()>;NFC;SOURCE
<android.nfc.tech.MifareClassic: int getBlockCountInSector(int)>;NFC;SOURCE
<android.nfc.tech.MifareClassic: int getMaxTransceiveLength()>;NFC;SOURCE
<android.nfc.tech.MifareClassic: int getSectorCount()>;NFC;SOURCE
<android.nfc.tech.MifareClassic: int getSize()>;NFC;SOURCE
<android.nfc.tech.MifareClassic: int getTimeout()>;NFC;SOURCE
<android.nfc.tech.MifareClassic: int getType()>;NFC;SOURCE
<android.nfc.tech.MifareUltralight: android.nfc.Tag getTag()>;NFC;SOURCE
<android.nfc.tech.MifareUltralight: android.nfc.tech.MifareUltralight get(android.nfc.Tag)>;NFC;SOURCE
<android.nfc.tech.MifareUltralight: byte[] readPages(int)>;NFC;SOURCE
<android.nfc.tech.MifareUltralight: byte[] transceive(byte[])>;NFC;SOURCE
<android.nfc.tech.MifareUltralight: byte[] transceive(byte[],boolean)>;NFC;SOURCE
<android.nfc.tech.MifareUltralight: int getMaxTransceiveLength()>;NFC;SOURCE
<android.nfc.tech.MifareUltralight: int getTimeout()>;NFC;SOURCE
<android.nfc.tech.MifareUltralight: int getType()>;NFC;SOURCE
<android.nfc.tech.Ndef: android.nfc.NdefMessage getCachedNdefMessage()>;NFC;SOURCE
<android.nfc.tech.Ndef: android.nfc.NdefMessage getNdefMessage()>;NFC;SOURCE
<android.nfc.tech.Ndef: android.nfc.Tag getTag()>;NFC;SOURCE
<android.nfc.tech.Ndef: android.nfc.tech.Ndef get(android.nfc.Tag)>;NFC;SOURCE
<android.nfc.tech.Ndef: byte[] transceive(byte[],boolean)>;NFC;SOURCE
<android.nfc.tech.Ndef: java.lang.String getType()>;NFC;SOURCE
<android.nfc.tech.NdefFormatable: android.nfc.Tag getTag()>;NFC;SOURCE
<android.nfc.tech.NdefFormatable: android.nfc.tech.NdefFormatable get(android.nfc.Tag)>;NFC;SOURCE
<android.nfc.tech.NdefFormatable: byte[] transceive(byte[],boolean)>;NFC;SOURCE
<android.nfc.tech.NfcA: android.nfc.Tag getTag()>;NFC;SOURCE
<android.nfc.tech.NfcA: android.nfc.tech.NfcA get(android.nfc.Tag)>;NFC;SOURCE
<android.nfc.tech.NfcA: byte[] getAtqa()>;NFC;SOURCE
<android.nfc.tech.NfcA: byte[] transceive(byte[])>;NFC;SOURCE
<android.nfc.tech.NfcA: int getMaxTransceiveLength()>;NFC;SOURCE
<android.nfc.tech.NfcA: int getTimeout()>;NFC;SOURCE
<android.nfc.tech.NfcA: short getSak()>;NFC;SOURCE
<android.nfc.tech.NfcB: android.nfc.Tag getTag()>;NFC;SOURCE
<android.nfc.tech.NfcB: android.nfc.tech.NfcB get(android.nfc.Tag)>;NFC;SOURCE
<android.nfc.tech.NfcB: byte[] getApplicationData()>;NFC;SOURCE
<android.nfc.tech.NfcB: byte[] getProtocolInfo()>;NFC;SOURCE
<android.nfc.tech.NfcB: byte[] transceive(byte[])>;NFC;SOURCE
<android.nfc.tech.NfcB: byte[] transceive(byte[],boolean)>;NFC;SOURCE
<android.nfc.tech.NfcB: int getMaxTransceiveLength()>;NFC;SOURCE
<android.nfc.tech.NfcF: android.nfc.Tag getTag()>;NFC;SOURCE
<android.nfc.tech.NfcF: android.nfc.tech.NfcF get(android.nfc.Tag)>;NFC;SOURCE
<android.nfc.tech.NfcF: byte[] getManufacturer()>;NFC;SOURCE
<android.nfc.tech.NfcF: byte[] getSystemCode()>;NFC;SOURCE
<android.nfc.tech.NfcF: byte[] transceive(byte[])>;NFC;SOURCE
<android.nfc.tech.NfcF: byte[] transceive(byte[],boolean)>;NFC;SOURCE
<android.nfc.tech.NfcF: int getMaxTransceiveLength()>;NFC;SOURCE
<android.nfc.tech.NfcF: int getTimeout()>;NFC;SOURCE
<android.nfc.tech.NfcV: android.nfc.Tag getTag()>;NFC;SOURCE
<android.nfc.tech.NfcV: android.nfc.tech.NfcV get(android.nfc.Tag)>;NFC;SOURCE
<android.nfc.tech.NfcV: byte getDsfId()>;NFC;SOURCE
<android.nfc.tech.NfcV: byte getResponseFlags()>;NFC;SOURCE
<android.nfc.tech.NfcV: byte[] transceive(byte[])>;NFC;SOURCE
<android.nfc.tech.NfcV: byte[] transceive(byte[],boolean)>;NFC;SOURCE
<android.nfc.tech.NfcV: int getMaxTransceiveLength()>;NFC;SOURCE
<android.os.ServiceManagerNative: android.os.IBinder asBinder()>;NETWORK_INFORMATION;SOURCE
<android.os.ServiceManagerProxy: android.os.IBinder getService(java.lang.String)>;NETWORK_INFORMATION;SOURCE
<android.provider.Browser: android.database.Cursor getAllVisitedUrls(android.content.ContentResolver)>;BROWSER_INFORMATION;SOURCE
<android.provider.Browser: java.lang.String[] getVisitedHistory(android.content.ContentResolver)>;BROWSER_INFORMATION;SOURCE
<android.provider.BrowserContract$SyncState: android.util.Pair getWithUri(android.content.ContentProviderClient,android.accounts.Account)>;BROWSER_INFORMATION;SOURCE
<android.provider.BrowserContract$SyncState: byte[] get(android.content.ContentProviderClient,android.accounts.Account)>;BROWSER_INFORMATION;SOURCE
<android.provider.Contacts$ContactMethods: java.lang.CharSequence getDisplayLabel(android.content.Context,int,int,java.lang.CharSequence)>;CONTACT_INFORMATION;SOURCE
<android.provider.Contacts$Organizations: java.lang.CharSequence getDisplayLabel(android.content.Context,int,java.lang.CharSequence)>;CONTACT_INFORMATION;SOURCE
<android.provider.Contacts$People: android.database.Cursor queryGroups(android.content.ContentResolver,long)>;CONTACT_INFORMATION;SOURCE
<android.provider.Contacts$People: android.net.Uri addToGroup(android.content.ContentResolver,long,java.lang.String)>;CONTACT_INFORMATION;SOURCE
<android.provider.Contacts$People: long tryGetMyContactsGroupId(android.content.ContentResolver)>;CONTACT_INFORMATION;SOURCE
<android.provider.Contacts$Phones: java.lang.CharSequence getDisplayLabel(android.content.Context,int,java.lang.CharSequence)>;CONTACT_INFORMATION;SOURCE
<android.provider.Contacts$Phones: java.lang.CharSequence getDisplayLabel(android.content.Context,int,java.lang.CharSequence,java.lang.CharSequence[])>;CONTACT_INFORMATION;SOURCE
<android.provider.Contacts$Settings: java.lang.String getSetting(android.content.ContentResolver,java.lang.String,java.lang.String)>;CONTACT_INFORMATION;SOURCE
<android.provider.ContactsContract$CommonDataKinds$Phone: java.lang.CharSequence getDisplayLabel(android.content.Context,int,java.lang.CharSequence)>;CONTACT_INFORMATION;SOURCE
<android.provider.ContactsContract$CommonDataKinds$Phone: java.lang.CharSequence getDisplayLabel(android.content.Context,int,java.lang.CharSequence,java.lang.CharSequence[])>;CONTACT_INFORMATION;SOURCE
<android.provider.ContactsContract$Contacts: android.net.Uri getLookupUri(android.content.ContentResolver,android.net.Uri)>;CONTACT_INFORMATION;SOURCE
<android.provider.ContactsContract$Contacts: android.net.Uri getLookupUri(long,java.lang.String)>;CONTACT_INFORMATION;SOURCE
<android.provider.ContactsContract$Contacts: android.net.Uri lookupContact(android.content.ContentResolver,android.net.Uri)>;CONTACT_INFORMATION;SOURCE
<android.provider.ContactsContract$Contacts: java.io.InputStream openContactPhotoInputStream(android.content.ContentResolver,android.net.Uri,boolean)>;CONTACT_INFORMATION;SOURCE
<android.provider.ContactsContract$Data: android.net.Uri getContactLookupUri(android.content.ContentResolver,android.net.Uri)>;CONTACT_INFORMATION;SOURCE
<android.provider.ContactsContract$Groups$EntityIteratorImpl: android.content.Entity getEntityAndIncrementCursor(android.database.Cursor)>;CONTACT_INFORMATION;SOURCE
<android.provider.ContactsContract$ProfileSyncState: android.util.Pair getWithUri(android.content.ContentProviderClient,android.accounts.Account)>;CONTACT_INFORMATION;SOURCE
<android.provider.ContactsContract$ProfileSyncState: byte[] get(android.content.ContentProviderClient,android.accounts.Account)>;CONTACT_INFORMATION;SOURCE
<android.provider.ContactsContract$RawContacts$EntityIteratorImpl: android.content.Entity getEntityAndIncrementCursor(android.database.Cursor)>;CONTACT_INFORMATION;SOURCE
<android.provider.ContactsContract$RawContacts: android.net.Uri getContactLookupUri(android.content.ContentResolver,android.net.Uri)>;CONTACT_INFORMATION;SOURCE
<android.provider.ContactsContract$SyncState: android.util.Pair getWithUri(android.content.ContentProviderClient,android.accounts.Account)>;CONTACT_INFORMATION;SOURCE
<android.provider.ContactsContract$SyncState: byte[] get(android.content.ContentProviderClient,android.accounts.Account)>;CONTACT_INFORMATION;SOURCE
<android.provider.MediaStore$Audio$Albums: android.net.Uri getContentUri(java.lang.String)>;FILE_INFORMATION;SOURCE
<android.provider.MediaStore$Audio$Artists$Albums: android.net.Uri getContentUri(java.lang.String,long)>;FILE_INFORMATION;SOURCE
<android.provider.MediaStore$Audio$Artists: android.net.Uri getContentUri(java.lang.String)>;FILE_INFORMATION;SOURCE
<android.provider.MediaStore$Audio$Genres$Members: android.net.Uri getContentUri(java.lang.String,long)>;FILE_INFORMATION;SOURCE
<android.provider.MediaStore$Audio$Genres: android.net.Uri getContentUri(java.lang.String)>;FILE_INFORMATION;SOURCE
<android.provider.MediaStore$Audio$Genres: android.net.Uri getContentUriForAudioId(java.lang.String,int)>;FILE_INFORMATION;SOURCE
<android.provider.MediaStore$Audio$Media: android.net.Uri getContentUri(java.lang.String)>;FILE_INFORMATION;SOURCE
<android.provider.MediaStore$Audio$Media: android.net.Uri getContentUriForPath(java.lang.String)>;FILE_INFORMATION;SOURCE
<android.provider.MediaStore$Audio$Playlists$Members: android.net.Uri getContentUri(java.lang.String,long)>;FILE_INFORMATION;SOURCE
<android.provider.MediaStore$Audio$Playlists: android.net.Uri getContentUri(java.lang.String)>;FILE_INFORMATION;SOURCE
<android.provider.MediaStore$Files: android.net.Uri getContentUri(java.lang.String)>;FILE_INFORMATION;SOURCE
<android.provider.MediaStore$Files: android.net.Uri getContentUri(java.lang.String,long)>;FILE_INFORMATION;SOURCE
<android.provider.MediaStore$Files: android.net.Uri getMtpObjectsUri(java.lang.String)>;FILE_INFORMATION;SOURCE
<android.provider.MediaStore$Files: android.net.Uri getMtpObjectsUri(java.lang.String,long)>;FILE_INFORMATION;SOURCE
<android.provider.MediaStore$Files: android.net.Uri getMtpReferencesUri(java.lang.String,long)>;FILE_INFORMATION;SOURCE
<android.provider.MediaStore$Images$Media: android.net.Uri getContentUri(java.lang.String)>;FILE_INFORMATION;SOURCE
<android.provider.MediaStore$Images$Thumbnails: android.net.Uri getContentUri(java.lang.String)>;FILE_INFORMATION;SOURCE
<android.provider.MediaStore$Video$Media: android.net.Uri getContentUri(java.lang.String)>;FILE_INFORMATION;SOURCE
<android.provider.MediaStore$Video$Thumbnails: android.net.Uri getContentUri(java.lang.String)>;FILE_INFORMATION;SOURCE
<android.provider.MediaStore: android.net.Uri getMediaScannerUri()>;FILE_INFORMATION;SOURCE
<android.provider.Settings$NameValueTable: android.net.Uri getUriFor(android.net.Uri,java.lang.String)>;FILE_INFORMATION;SOURCE
<android.provider.Settings$Secure: android.net.Uri getUriFor(java.lang.String)>;FILE_INFORMATION;SOURCE
<android.provider.Settings$System: android.net.Uri getUriFor(java.lang.String)>;FILE_INFORMATION;SOURCE
<android.provider.SyncStateContract$Helpers: android.util.Pair getWithUri(android.content.ContentProviderClient,android.net.Uri,android.accounts.Account)>;FILE_INFORMATION;SOURCE
<android.provider.Telephony$Mms: android.database.Cursor query(android.content.ContentResolver,java.lang.String[])>;SMS_MMS;SOURCE
<android.provider.Telephony$Mms: android.database.Cursor query(android.content.ContentResolver,java.lang.String[],java.lang.String,java.lang.String)>;SMS_MMS;SOURCE
<android.provider.Telephony$Sms$Intents: android.telephony.SmsMessage[] getMessagesFromIntent(android.content.Intent)>;NETWORK_INFORMATION;SOURCE
<android.provider.Telephony$Sms: android.database.Cursor query(android.content.ContentResolver,java.lang.String[])>;NETWORK_INFORMATION;SOURCE
<android.provider.Telephony$Sms: android.database.Cursor query(android.content.ContentResolver,java.lang.String[],java.lang.String,java.lang.String)>;NETWORK_INFORMATION;SOURCE
<android.renderscript.Allocation: android.renderscript.Allocation createCubemapFromBitmap(android.renderscript.RenderScript,android.graphics.Bitmap)>;LOCATION_INFORMATION;SOURCE
<android.renderscript.Allocation: android.renderscript.Allocation createCubemapFromCubeFaces(android.renderscript.RenderScript,android.graphics.Bitmap,android.graphics.Bitmap,android.graphics.Bitmap,android.graphics.Bitmap,android.graphics.Bitmap,android.graphics.Bitmap)>;LOCATION_INFORMATION;SOURCE
<android.renderscript.Allocation: android.renderscript.Allocation createFromBitmap(android.renderscript.RenderScript,android.graphics.Bitmap)>;LOCATION_INFORMATION;SOURCE
<android.renderscript.Allocation: android.renderscript.Allocation createFromBitmapResource(android.renderscript.RenderScript,android.content.res.Resources,int)>;LOCATION_INFORMATION;SOURCE
<android.renderscript.Allocation: android.renderscript.Allocation createFromString(android.renderscript.RenderScript,java.lang.String,int)>;LOCATION_INFORMATION;SOURCE
<android.renderscript.Allocation: android.renderscript.Allocation createSized(android.renderscript.RenderScript,android.renderscript.Element,int)>;LOCATION_INFORMATION;SOURCE
<android.renderscript.Allocation: android.renderscript.Allocation createSized(android.renderscript.RenderScript,android.renderscript.Element,int,int)>;LOCATION_INFORMATION;SOURCE
<android.renderscript.Allocation: android.renderscript.Allocation createTyped(android.renderscript.RenderScript,android.renderscript.Type)>;LOCATION_INFORMATION;SOURCE
<android.renderscript.Allocation: android.renderscript.Allocation createTyped(android.renderscript.RenderScript,android.renderscript.Type,int)>;LOCATION_INFORMATION;SOURCE
<android.renderscript.Allocation: android.renderscript.Type getType()>;LOCATION_INFORMATION;SOURCE
<android.renderscript.Mesh$AllocationBuilder: int getCurrentIndexSetIndex()>;LOCATION_INFORMATION;SOURCE
<android.renderscript.Mesh$AllocationBuilder: int getCurrentVertexTypeIndex()>;LOCATION_INFORMATION;SOURCE
<android.security.IKeyChainService$Stub$Proxy: byte[] getCertificate(java.lang.String)>;NETWORK_INFORMATION;SOURCE
<android.security.IKeyChainService$Stub$Proxy: java.lang.String getInterfaceDescriptor()>;NETWORK_INFORMATION;SOURCE
<android.security.IKeyChainService$Stub: android.os.IBinder asBinder()>;NETWORK_INFORMATION;SOURCE
<android.speech.IRecognitionService$Stub$Proxy: java.lang.String getInterfaceDescriptor()>;NETWORK_INFORMATION;SOURCE
<android.speech.IRecognitionService$Stub: android.os.IBinder asBinder()>;NETWORK_INFORMATION;SOURCE
<android.speech.tts.ITextToSpeechService$Stub$Proxy: int isLanguageAvailable(java.lang.String,java.lang.String,java.lang.String)>;NETWORK_INFORMATION;SOURCE
<android.speech.tts.ITextToSpeechService$Stub$Proxy: java.lang.String getInterfaceDescriptor()>;NETWORK_INFORMATION;SOURCE
<android.speech.tts.ITextToSpeechService$Stub$Proxy: java.lang.String[] getFeaturesForLanguage(java.lang.String,java.lang.String,java.lang.String)>;NETWORK_INFORMATION;SOURCE
<android.speech.tts.ITextToSpeechService$Stub$Proxy: java.lang.String[] getLanguage()>;NETWORK_INFORMATION;SOURCE
<android.speech.tts.ITextToSpeechService$Stub: android.os.IBinder asBinder()>;NETWORK_INFORMATION;SOURCE
<android.support.v4.net.ConnectivityManagerCompat: android.net.NetworkInfo getNetworkInfoFromBroadcast(android.net.ConnectivityManager,android.content.Intent)>;NETWORK_INFORMATION;SOURCE
<android.telephony.CellLocation: android.telephony.CellLocation getEmpty()>;LOCATION_INFORMATION;SOURCE
<android.telephony.NeighboringCellInfo: int getCid()>;NETWORK_INFORMATION;SOURCE
<android.telephony.NeighboringCellInfo: int getLac()>;NETWORK_INFORMATION;SOURCE
<android.telephony.NeighboringCellInfo: int getNetworkType()>;NETWORK_INFORMATION;SOURCE
<android.telephony.NeighboringCellInfo: int getPsc()>;NETWORK_INFORMATION;SOURCE
<android.telephony.NeighboringCellInfo: int getRssi()>;NETWORK_INFORMATION;SOURCE
<android.telephony.NeighboringCellInfo: java.lang.String toString()>;NETWORK_INFORMATION;SOURCE
<android.telephony.PhoneNumberUtils: byte[] networkPortionToCalledPartyBCD(java.lang.String)>;NETWORK_INFORMATION;SOURCE
<android.telephony.PhoneNumberUtils: byte[] networkPortionToCalledPartyBCDWithLength(java.lang.String)>;NETWORK_INFORMATION;SOURCE
<android.telephony.PhoneNumberUtils: byte[] numberToCalledPartyBCD(java.lang.String)>;UNIQUE_IDENTIFIER;SOURCE
<android.telephony.PhoneNumberUtils: int getFormatTypeForLocale(java.util.Locale)>;NETWORK_INFORMATION;SOURCE
<android.telephony.PhoneNumberUtils: java.lang.String getNumberFromIntent(android.content.Intent,android.content.Context)>;UNIQUE_IDENTIFIER;SOURCE
<android.telephony.PhoneNumberUtils: java.lang.String getStrippedReversed(java.lang.String)>;UNIQUE_IDENTIFIER;SOURCE
<android.telephony.PhoneNumberUtils: java.lang.String getUsernameFromUriNumber(java.lang.String)>;UNIQUE_IDENTIFIER;SOURCE
<android.telephony.ServiceState: boolean getIsManualSelection()>;NETWORK_INFORMATION;SOURCE
<android.telephony.ServiceState: boolean getRoaming()>;NETWORK_INFORMATION;SOURCE
<android.telephony.ServiceState: int getCdmaDefaultRoamingIndicator()>;NETWORK_INFORMATION;SOURCE
<android.telephony.ServiceState: int getCdmaEriIconIndex()>;NETWORK_INFORMATION;SOURCE
<android.telephony.ServiceState: int getCdmaEriIconMode()>;NETWORK_INFORMATION;SOURCE
<android.telephony.ServiceState: int getCdmaRoamingIndicator()>;NETWORK_INFORMATION;SOURCE
<android.telephony.ServiceState: int getCssIndicator()>;NETWORK_INFORMATION;SOURCE
<android.telephony.ServiceState: int getNetworkId()>;NETWORK_INFORMATION;SOURCE
<android.telephony.ServiceState: int getRadioTechnology()>;NETWORK_INFORMATION;SOURCE
<android.telephony.ServiceState: int getState()>;NETWORK_INFORMATION;SOURCE
<android.telephony.ServiceState: int getSystemId()>;NETWORK_INFORMATION;SOURCE
<android.telephony.ServiceState: java.lang.String getOperatorAlphaLong()>;NETWORK_INFORMATION;SOURCE
<android.telephony.ServiceState: java.lang.String getOperatorAlphaShort()>;NETWORK_INFORMATION;SOURCE
<android.telephony.ServiceState: java.lang.String getOperatorNumeric()>;NETWORK_INFORMATION;SOURCE
<android.telephony.ServiceState: java.lang.String toString()>;NETWORK_INFORMATION;SOURCE
<android.telephony.SignalStrength: int getAsuLevel()>;NETWORK_INFORMATION;SOURCE
<android.telephony.SignalStrength: int getCdmaAsuLevel()>;NETWORK_INFORMATION;SOURCE
<android.telephony.SignalStrength: int getCdmaDbm()>;NETWORK_INFORMATION;SOURCE
<android.telephony.SignalStrength: int getCdmaEcio()>;NETWORK_INFORMATION;SOURCE
<android.telephony.SignalStrength: int getCdmaLevel()>;NETWORK_INFORMATION;SOURCE
<android.telephony.SignalStrength: int getDbm()>;NETWORK_INFORMATION;SOURCE
<android.telephony.SignalStrength: int getEvdoAsuLevel()>;NETWORK_INFORMATION;SOURCE
<android.telephony.SignalStrength: int getEvdoDbm()>;NETWORK_INFORMATION;SOURCE
<android.telephony.SignalStrength: int getEvdoEcio()>;NETWORK_INFORMATION;SOURCE
<android.telephony.SignalStrength: int getEvdoLevel()>;NETWORK_INFORMATION;SOURCE
<android.telephony.SignalStrength: int getEvdoSnr()>;NETWORK_INFORMATION;SOURCE
<android.telephony.SignalStrength: int getGsmAsuLevel()>;NETWORK_INFORMATION;SOURCE
<android.telephony.SignalStrength: int getGsmBitErrorRate()>;NETWORK_INFORMATION;SOURCE
<android.telephony.SignalStrength: int getGsmDbm()>;NETWORK_INFORMATION;SOURCE
<android.telephony.SignalStrength: int getGsmLevel()>;NETWORK_INFORMATION;SOURCE
<android.telephony.SignalStrength: int getGsmSignalStrength()>;NETWORK_INFORMATION;SOURCE
<android.telephony.SignalStrength: int getLevel()>;NETWORK_INFORMATION;SOURCE
<android.telephony.SignalStrength: int getLteAsuLevel()>;NETWORK_INFORMATION;SOURCE
<android.telephony.SignalStrength: int getLteDbm()>;NETWORK_INFORMATION;SOURCE
<android.telephony.SignalStrength: int getLteLevel()>;NETWORK_INFORMATION;SOURCE
<android.telephony.SignalStrength: java.lang.String toString()>;NETWORK_INFORMATION;SOURCE
<android.telephony.SmsManager: java.util.ArrayList divideMessage(java.lang.String)>;NETWORK_INFORMATION;SOURCE
<android.telephony.SmsManager: java.util.ArrayList getAllMessagesFromIcc()>;NETWORK_INFORMATION;SOURCE
<android.telephony.SmsMessage: android.telephony.SmsMessage createFromEfRecord(int,byte[])>;NETWORK_INFORMATION;SOURCE
<android.telephony.SmsMessage: android.telephony.SmsMessage createFromPdu(byte[])>;NETWORK_INFORMATION;SOURCE
<android.telephony.SmsMessage: android.telephony.SmsMessage createFromPdu(byte[],java.lang.String)>;NETWORK_INFORMATION;SOURCE
<android.telephony.SmsMessage: byte[] getPdu()>;NETWORK_INFORMATION;SOURCE
<android.telephony.SmsMessage: byte[] getUserData()>;NETWORK_INFORMATION;SOURCE
<android.telephony.SmsMessage: int getIndexOnIcc()>;NETWORK_INFORMATION;SOURCE
<android.telephony.SmsMessage: int getIndexOnSim()>;NETWORK_INFORMATION;SOURCE
<android.telephony.SmsMessage: int getProtocolIdentifier()>;NETWORK_INFORMATION;SOURCE
<android.telephony.SmsMessage: int getStatus()>;NETWORK_INFORMATION;SOURCE
<android.telephony.SmsMessage: int getStatusOnIcc()>;NETWORK_INFORMATION;SOURCE
<android.telephony.SmsMessage: int getStatusOnSim()>;NETWORK_INFORMATION;SOURCE
<android.telephony.SmsMessage: int getTPLayerLengthForPDU(java.lang.String)>;NETWORK_INFORMATION;SOURCE
<android.telephony.SmsMessage: java.lang.String getDisplayMessageBody()>;NETWORK_INFORMATION;SOURCE
<android.telephony.SmsMessage: java.lang.String getDisplayOriginatingAddress()>;NETWORK_INFORMATION;SOURCE
<android.telephony.SmsMessage: java.lang.String getEmailBody()>;NETWORK_INFORMATION;SOURCE
<android.telephony.SmsMessage: java.lang.String getEmailFrom()>;NETWORK_INFORMATION;SOURCE
<android.telephony.SmsMessage: java.lang.String getMessageBody()>;NETWORK_INFORMATION;SOURCE
<android.telephony.SmsMessage: java.lang.String getOriginatingAddress()>;NETWORK_INFORMATION;SOURCE
<android.telephony.SmsMessage: java.lang.String getPseudoSubject()>;NETWORK_INFORMATION;SOURCE
<android.telephony.SmsMessage: java.lang.String getServiceCenterAddress()>;NETWORK_INFORMATION;SOURCE
<android.telephony.SmsMessage: long getTimestampMillis()>;NETWORK_INFORMATION;SOURCE
<android.telephony.TelephonyManager: android.telephony.CellLocation getCellLocation()>;LOCATION_INFORMATION;SOURCE
<android.telephony.TelephonyManager: android.telephony.TelephonyManager getDefault()>;NETWORK_INFORMATION;SOURCE
<android.telephony.TelephonyManager: int getCallState()>;NETWORK_INFORMATION;SOURCE
<android.telephony.TelephonyManager: int getCdmaEriIconIndex()>;NETWORK_INFORMATION;SOURCE
<android.telephony.TelephonyManager: int getCdmaEriIconMode()>;NETWORK_INFORMATION;SOURCE
<android.telephony.TelephonyManager: int getCurrentPhoneType()>;NETWORK_INFORMATION;SOURCE
<android.telephony.TelephonyManager: int getDataActivity()>;NETWORK_INFORMATION;SOURCE
<android.telephony.TelephonyManager: int getDataState()>;NETWORK_INFORMATION;SOURCE
<android.telephony.TelephonyManager: int getLteOnCdmaMode()>;NETWORK_INFORMATION;SOURCE
<android.telephony.TelephonyManager: int getNetworkClass(int)>;NETWORK_INFORMATION;SOURCE
<android.telephony.TelephonyManager: int getNetworkType()>;NETWORK_INFORMATION;SOURCE
<android.telephony.TelephonyManager: int getPhoneType()>;NETWORK_INFORMATION;SOURCE
<android.telephony.TelephonyManager: int getSimState()>;NETWORK_INFORMATION;SOURCE
<android.telephony.TelephonyManager: int getVoiceMessageCount()>;NETWORK_INFORMATION;SOURCE
<android.telephony.TelephonyManager: java.lang.String getCdmaEriText()>;NETWORK_INFORMATION;SOURCE
<android.telephony.TelephonyManager: java.lang.String getCompleteVoiceMailNumber()>;UNIQUE_IDENTIFIER;SOURCE
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>;UNIQUE_IDENTIFIER;SOURCE
<android.telephony.TelephonyManager: java.lang.String getDeviceSoftwareVersion()>;UNIQUE_IDENTIFIER;SOURCE
<android.telephony.TelephonyManager: java.lang.String getIsimDomain()>;UNIQUE_IDENTIFIER;SOURCE
<android.telephony.TelephonyManager: java.lang.String getIsimImpi()>;UNIQUE_IDENTIFIER;SOURCE
<android.telephony.TelephonyManager: java.lang.String getLine1AlphaTag()>;UNIQUE_IDENTIFIER;SOURCE
<android.telephony.TelephonyManager: java.lang.String getLine1Number()>;UNIQUE_IDENTIFIER;SOURCE
<android.telephony.TelephonyManager: java.lang.String getMsisdn()>;UNIQUE_IDENTIFIER;SOURCE
<android.telephony.TelephonyManager: java.lang.String getNetworkCountryIso()>;NETWORK_INFORMATION;SOURCE
<android.telephony.TelephonyManager: java.lang.String getNetworkOperator()>;NETWORK_INFORMATION;SOURCE
<android.telephony.TelephonyManager: java.lang.String getNetworkOperatorName()>;NETWORK_INFORMATION;SOURCE
<android.telephony.TelephonyManager: java.lang.String getNetworkTypeName()>;NETWORK_INFORMATION;SOURCE
<android.telephony.TelephonyManager: java.lang.String getNetworkTypeName(int)>;NETWORK_INFORMATION;SOURCE
<android.telephony.TelephonyManager: java.lang.String getSimCountryIso()>;NETWORK_INFORMATION;SOURCE
<android.telephony.TelephonyManager: java.lang.String getSimOperator()>;NETWORK_INFORMATION;SOURCE
<android.telephony.TelephonyManager: java.lang.String getSimOperatorName()>;NETWORK_INFORMATION;SOURCE
<android.telephony.TelephonyManager: java.lang.String getSimSerialNumber()>;UNIQUE_IDENTIFIER;SOURCE
<android.telephony.TelephonyManager: java.lang.String getSubscriberId()>;UNIQUE_IDENTIFIER;SOURCE
<android.telephony.TelephonyManager: java.lang.String getVoiceMailAlphaTag()>;UNIQUE_IDENTIFIER;SOURCE
<android.telephony.TelephonyManager: java.lang.String getVoiceMailNumber()>;UNIQUE_IDENTIFIER;SOURCE
<android.telephony.TelephonyManager: java.lang.String[] getIsimImpu()>;NETWORK_INFORMATION;SOURCE
<android.telephony.TelephonyManager: java.util.List getNeighboringCellInfo()>;NETWORK_INFORMATION;SOURCE
<android.telephony.cdma.CdmaCellLocation: int getBaseStationId()>;LOCATION_INFORMATION;SOURCE
<android.telephony.cdma.CdmaCellLocation: int getBaseStationLatitude()>;LOCATION_INFORMATION;SOURCE
<android.telephony.cdma.CdmaCellLocation: int getBaseStationLongitude()>;LOCATION_INFORMATION;SOURCE
<android.telephony.cdma.CdmaCellLocation: int getNetworkId()>;LOCATION_INFORMATION;SOURCE
<android.telephony.cdma.CdmaCellLocation: int getSystemId()>;LOCATION_INFORMATION;SOURCE
<android.telephony.gsm.GsmCellLocation: int getCid()>;LOCATION_INFORMATION;SOURCE
<android.telephony.gsm.GsmCellLocation: int getLac()>;LOCATION_INFORMATION;SOURCE
<android.telephony.gsm.GsmCellLocation: int getPsc()>;LOCATION_INFORMATION;SOURCE
<android.test.IsolatedContext$MockAccountManager: android.accounts.Account[] getAccounts()>;ACCOUNT_INFORMATION;SOURCE
<android.test.mock.MockContentResolver: android.content.SyncInfo getCurrentSync()>;SYNCHRONIZATION_DATA;SOURCE
<android.test.mock.MockContentResolver: android.content.SyncStatusInfo getSyncStatus(android.accounts.Account,java.lang.String)>;SYNCHRONIZATION_DATA;SOURCE
<android.test.mock.MockContentResolver: boolean getSyncAutomatically(android.accounts.Account,java.lang.String)>;SYNCHRONIZATION_DATA;SOURCE
<android.test.mock.MockContentResolver: int getIsSyncable(android.accounts.Account,java.lang.String)>;SYNCHRONIZATION_DATA;SOURCE
<android.test.mock.MockContentResolver: java.util.List getPeriodicSyncs(android.accounts.Account,java.lang.String)>;SYNCHRONIZATION_DATA;SOURCE
<android.text.Layout: android.text.TextDirectionHeuristic getTextDirectionHeuristic()>;FILE_INFORMATION;SOURCE
<android.view.textservice.SpellCheckerInfo: android.content.ComponentName getComponent()>;NETWORK_INFORMATION;SOURCE
<android.view.textservice.SpellCheckerInfo: android.content.pm.ServiceInfo getServiceInfo()>;NETWORK_INFORMATION;SOURCE
<android.view.textservice.SpellCheckerInfo: android.view.textservice.SpellCheckerSubtype getSubtypeAt(int)>;NETWORK_INFORMATION;SOURCE
<android.view.textservice.SpellCheckerInfo: int getSubtypeCount()>;NETWORK_INFORMATION;SOURCE
<android.view.textservice.SpellCheckerInfo: java.lang.String getPackageName()>;NETWORK_INFORMATION;SOURCE
<android.view.textservice.SpellCheckerInfo: java.lang.String getSettingsActivity()>;NETWORK_INFORMATION;SOURCE
<android.view.textservice.SpellCheckerSession: android.view.textservice.SpellCheckerInfo getSpellChecker()>;NETWORK_INFORMATION;SOURCE
<android.view.textservice.SpellCheckerSession: com.android.internal.textservice.ISpellCheckerSessionListener getSpellCheckerSessionListener()>;NETWORK_INFORMATION;SOURCE
<android.view.textservice.SpellCheckerSession: com.android.internal.textservice.ITextServicesSessionListener getTextServicesSessionListener()>;NETWORK_INFORMATION;SOURCE
<android.view.textservice.SpellCheckerSubtype: java.lang.CharSequence getDisplayName(android.content.Context,java.lang.String,android.content.pm.ApplicationInfo)>;NETWORK_INFORMATION;SOURCE
<android.view.textservice.SpellCheckerSubtype: java.lang.String getExtraValue()>;NETWORK_INFORMATION;SOURCE
<android.view.textservice.SpellCheckerSubtype: java.lang.String getLocale()>;NETWORK_INFORMATION;SOURCE
<android.view.textservice.SuggestionsInfo: int getCookie()>;NETWORK_INFORMATION;SOURCE
<android.view.textservice.SuggestionsInfo: int getSequence()>;NETWORK_INFORMATION;SOURCE
<android.view.textservice.SuggestionsInfo: int getSuggestionsAttributes()>;NETWORK_INFORMATION;SOURCE
<android.view.textservice.SuggestionsInfo: int getSuggestionsCount()>;NETWORK_INFORMATION;SOURCE
<android.view.textservice.SuggestionsInfo: java.lang.String getSuggestionAt(int)>;NETWORK_INFORMATION;SOURCE
<android.view.textservice.TextInfo: int getCookie()>;NETWORK_INFORMATION;SOURCE
<android.view.textservice.TextInfo: int getSequence()>;NETWORK_INFORMATION;SOURCE
<android.view.textservice.TextInfo: java.lang.String getText()>;NETWORK_INFORMATION;SOURCE
<android.view.textservice.TextServicesManager: android.view.textservice.SpellCheckerInfo getCurrentSpellChecker()>;NETWORK_INFORMATION;SOURCE
<android.view.textservice.TextServicesManager: android.view.textservice.SpellCheckerInfo[] getEnabledSpellCheckers()>;NETWORK_INFORMATION;SOURCE
<android.view.textservice.TextServicesManager: android.view.textservice.SpellCheckerSubtype getCurrentSpellCheckerSubtype(boolean)>;NETWORK_INFORMATION;SOURCE
<android.view.textservice.TextServicesManager: android.view.textservice.TextServicesManager getInstance()>;NETWORK_INFORMATION;SOURCE
<android.webkit.BrowserFrame: android.webkit.CallbackProxy getCallbackProxy()>;BROWSER_INFORMATION;SOURCE
<android.webkit.BrowserFrame: boolean getShouldStartScrolledRight()>;BROWSER_INFORMATION;SOURCE
<android.webkit.BrowserFrame: java.lang.String getRawResFilename(int,android.content.Context)>;BROWSER_INFORMATION;SOURCE
<android.webkit.BrowserFrame: java.lang.String getUserAgentString()>;BROWSER_INFORMATION;SOURCE
<android.webkit.GeolocationPermissions: android.webkit.GeolocationPermissions getInstance()>;LOCATION_INFORMATION;SOURCE
<android.webkit.HTML5VideoView: boolean getPauseDuringPreparing()>;FILE_INFORMATION;SOURCE
<android.webkit.SslCertLookupTable: android.webkit.SslCertLookupTable getInstance()>;NETWORK_INFORMATION;SOURCE
<android.webkit.SslClientCertLookupTable: android.webkit.SslClientCertLookupTable getInstance()>;NETWORK_INFORMATION;SOURCE
<android.webkit.WebSettings: boolean getDatabaseEnabled()>;SYSTEM_SETTINGS;SOURCE
<android.webkit.WebSettings: boolean getDomStorageEnabled()>;SYSTEM_SETTINGS;SOURCE
<android.webkit.WebSettings: boolean getJavaScriptEnabled()>;SYSTEM_SETTINGS;SOURCE
<android.webkit.WebSettings: boolean getLightTouchEnabled()>;SYSTEM_SETTINGS;SOURCE
<android.webkit.WebSettings: boolean getPluginsEnabled()>;SYSTEM_SETTINGS;SOURCE
<android.webkit.WebSettings: boolean getSavePassword()>;SYSTEM_SETTINGS;SOURCE
<android.widget.CalendarView$WeekView: int getMonthOfFirstWeekDay()>;CALENDAR_INFORMATION;SOURCE
<android.widget.CalendarView$WeekView: int getMonthOfLastWeekDay()>;CALENDAR_INFORMATION;SOURCE
<android.widget.CalendarView$WeekView: java.util.Calendar getFirstDay()>;CALENDAR_INFORMATION;SOURCE
<android.widget.CalendarView$WeeksAdapter: int getCount()>;CALENDAR_INFORMATION;SOURCE
<android.widget.CalendarView$WeeksAdapter: java.lang.Object getItem(int)>;CALENDAR_INFORMATION;SOURCE
<android.widget.CalendarView$WeeksAdapter: java.util.Calendar getSelectedDay()>;CALENDAR_INFORMATION;SOURCE
<android.widget.CalendarView$WeeksAdapter: long getItemId(int)>;CALENDAR_INFORMATION;SOURCE
<android.widget.CalendarView: boolean getShowWeekNumber()>;CALENDAR_INFORMATION;SOURCE
<android.widget.CalendarView: int getFirstDayOfWeek()>;CALENDAR_INFORMATION;SOURCE
<android.widget.CalendarView: long getDate()>;CALENDAR_INFORMATION;SOURCE
<android.widget.CalendarView: long getMaxDate()>;CALENDAR_INFORMATION;SOURCE
<android.widget.CalendarView: long getMinDate()>;CALENDAR_INFORMATION;SOURCE
<android.widget.FrameLayout: boolean getConsiderGoneChildrenWhenMeasuring()>;FILE_INFORMATION;SOURCE
<android.widget.Gallery: int getChildDrawingOrder(int,int)>;IMAGE;SOURCE
<android.widget.Gallery: int getChildHeight(android.view.View)>;IMAGE;SOURCE
<android.widget.Gallery: int getLimitedMotionScrollAmount(boolean,int)>;IMAGE;SOURCE
<android.widget.RemoteViewsAdapter$RemoteViewsAdapterServiceConnection: com.android.internal.widget.IRemoteViewsFactory getRemoteViewsFactory()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: java.lang.String getInterfaceDescriptor()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.appwidget.IAppWidgetService$Stub: android.os.IBinder asBinder()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.os.IDropBoxManagerService$Stub$Proxy: java.lang.String getInterfaceDescriptor()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.os.IDropBoxManagerService$Stub: android.os.IBinder asBinder()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.statusbar.IStatusBarService$Stub$Proxy: java.lang.String getInterfaceDescriptor()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.statusbar.IStatusBarService$Stub: android.os.IBinder asBinder()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.ATResponseParser: java.lang.String nextString()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.AdnRecord: byte[] buildAdnString(int)>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.AdnRecord: java.lang.String getAlphaTag()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.AdnRecord: java.lang.String getNumber()>;UNIQUE_IDENTIFIER;SOURCE
<com.android.internal.telephony.AdnRecord: java.lang.String toString()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.AdnRecord: java.lang.String[] getEmails()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.AdnRecordCache: java.util.ArrayList getRecordsIfLoaded(int)>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.ApnContext: boolean getDependencyMet()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.ApnContext: com.android.internal.telephony.ApnSetting getApnSetting()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.ApnContext: com.android.internal.telephony.ApnSetting getNextWaitingApn()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.ApnContext: com.android.internal.telephony.DataConnection getDataConnection()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.ApnContext: com.android.internal.telephony.DataConnectionAc getDataConnectionAc()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.ApnContext: int getWaitingApnsPermFailCount()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.ApnContext: java.lang.String getApnType()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.ApnContext: java.lang.String getReason()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.ApnContext: java.util.ArrayList getWaitingApns()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.ApnSetting: java.lang.String toString()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.BaseCommands: int getLteOnCdmaMode()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.Call: com.android.internal.telephony.Connection getEarliestConnection()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.Call: com.android.internal.telephony.Connection getLatestConnection()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.Call: long getEarliestConnectTime()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.Call: long getEarliestCreateTime()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.CallForwardInfo: java.lang.String toString()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.CallTracker: android.os.Message obtainNoPollCompleteMessage(int)>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.CallerInfo: com.android.internal.telephony.CallerInfo getCallerInfo(android.content.Context,android.net.Uri)>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.CallerInfo: com.android.internal.telephony.CallerInfo getCallerInfo(android.content.Context,android.net.Uri,android.database.Cursor)>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.CallerInfo: com.android.internal.telephony.CallerInfo getCallerInfo(android.content.Context,java.lang.String)>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.CallerInfo: com.android.internal.telephony.CallerInfo markAsEmergency(android.content.Context)>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.CallerInfo: com.android.internal.telephony.CallerInfo markAsVoiceMail()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.CallerInfo: java.lang.String getCallerId(android.content.Context,java.lang.String)>;UNIQUE_IDENTIFIER;SOURCE
<com.android.internal.telephony.CallerInfo: java.lang.String toString()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.Connection: int getCnapNamePresentation()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.Connection: java.lang.Object getUserData()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.Connection: java.lang.String getCnapName()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.Connection: java.lang.String getOrigDialString()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.Connection: java.lang.String toString()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.DataConnection$CallSetupException: int getRetryOverride()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.DataConnection$FailCause: int getErrorCode()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.DataConnection: boolean isRetryForever()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.DataConnection: boolean isRetryNeeded()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.DataConnection: int getDataConnectionId()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.DataConnection: int getRetryCount()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.DataConnection: int getRetryTimer()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.DataConnectionAc: android.app.PendingIntent getReconnectIntentSync()>;SYNCHRONIZATION_DATA;SOURCE
<com.android.internal.telephony.DataConnectionAc: android.net.LinkCapabilities getLinkCapabilitiesSync()>;SYNCHRONIZATION_DATA;SOURCE
<com.android.internal.telephony.DataConnectionAc: android.net.LinkProperties getLinkPropertiesSync()>;SYNCHRONIZATION_DATA;SOURCE
<com.android.internal.telephony.DataConnectionAc: com.android.internal.telephony.ApnSetting getApnSettingSync()>;SYNCHRONIZATION_DATA;SOURCE
<com.android.internal.telephony.DataConnectionAc: int getCidSync()>;SYNCHRONIZATION_DATA;SOURCE
<com.android.internal.telephony.DataConnectionAc: int getRefCountSync()>;SYNCHRONIZATION_DATA;SOURCE
<com.android.internal.telephony.DataConnectionAc: java.util.Collection getApnListSync()>;SYNCHRONIZATION_DATA;SOURCE
<com.android.internal.telephony.DataConnectionTracker$TxRxSum: java.lang.String toString()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.DataConnectionTracker: android.net.LinkCapabilities getLinkCapabilities(java.lang.String)>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.DataConnectionTracker: android.net.LinkProperties getLinkProperties(java.lang.String)>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.DataConnectionTracker: boolean getAnyDataEnabled()>;SYSTEM_SETTINGS;SOURCE
<com.android.internal.telephony.DataConnectionTracker: boolean getDataOnRoamingEnabled()>;SYSTEM_SETTINGS;SOURCE
<com.android.internal.telephony.DataConnectionTracker: com.android.internal.telephony.ApnSetting fetchDunApn()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.DataConnectionTracker: int disableApnType(java.lang.String)>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.DataConnectionTracker: int enableApnType(java.lang.String)>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.DataConnectionTracker: java.lang.String apnIdToType(int)>;UNIQUE_IDENTIFIER;SOURCE
<com.android.internal.telephony.DataConnectionTracker: java.lang.String getActiveApnString(java.lang.String)>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.DataConnectionTracker: java.lang.String getReryConfig(boolean)>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.DataConnectionTracker: java.lang.String[] getActiveApnTypes()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.DriverCall: java.lang.String toString()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.GsmAlphabet: byte[] stringToGsm7BitPacked(java.lang.String)>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.GsmAlphabet: byte[] stringToGsm7BitPacked(java.lang.String,int,boolean,int,int)>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.GsmAlphabet: byte[] stringToGsm7BitPacked(java.lang.String,int,int)>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.GsmAlphabet: byte[] stringToGsm7BitPackedWithHeader(java.lang.String,byte[])>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.GsmAlphabet: byte[] stringToGsm7BitPackedWithHeader(java.lang.String,byte[],int,int)>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.GsmAlphabet: byte[] stringToGsm8BitPacked(java.lang.String)>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.GsmAlphabet: int[] getEnabledLockingShiftTables()>;SYSTEM_SETTINGS;SOURCE
<com.android.internal.telephony.GsmAlphabet: int[] getEnabledSingleShiftTables()>;SYSTEM_SETTINGS;SOURCE
<com.android.internal.telephony.IIccPhoneBook$Stub$Proxy: int[] getAdnRecordsSize(int)>;CONTACT_INFORMATION;SOURCE
<com.android.internal.telephony.IIccPhoneBook$Stub$Proxy: java.lang.String getInterfaceDescriptor()>;UNIQUE_IDENTIFIER;SOURCE
<com.android.internal.telephony.IIccPhoneBook$Stub$Proxy: java.util.List getAdnRecordsInEf(int)>;CONTACT_INFORMATION;SOURCE
<com.android.internal.telephony.IIccPhoneBook$Stub: android.os.IBinder asBinder()>;CONTACT_INFORMATION;SOURCE
<com.android.internal.telephony.IIccPhoneBook$Stub: com.android.internal.telephony.IIccPhoneBook asInterface(android.os.IBinder)>;CONTACT_INFORMATION;SOURCE
<com.android.internal.telephony.IPhoneStateListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()>;UNIQUE_IDENTIFIER;SOURCE
<com.android.internal.telephony.IPhoneStateListener$Stub: android.os.IBinder asBinder()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.IPhoneStateListener$Stub: com.android.internal.telephony.IPhoneStateListener asInterface(android.os.IBinder)>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getCompleteVoiceMailNumber()>;UNIQUE_IDENTIFIER;SOURCE
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getDeviceId()>;UNIQUE_IDENTIFIER;SOURCE
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getDeviceSvn()>;UNIQUE_IDENTIFIER;SOURCE
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getIccSerialNumber()>;UNIQUE_IDENTIFIER;SOURCE
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getInterfaceDescriptor()>;UNIQUE_IDENTIFIER;SOURCE
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getIsimDomain()>;UNIQUE_IDENTIFIER;SOURCE
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getIsimImpi()>;UNIQUE_IDENTIFIER;SOURCE
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getLine1AlphaTag()>;UNIQUE_IDENTIFIER;SOURCE
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getLine1Number()>;UNIQUE_IDENTIFIER;SOURCE
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getMsisdn()>;UNIQUE_IDENTIFIER;SOURCE
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getSubscriberId()>;UNIQUE_IDENTIFIER;SOURCE
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getVoiceMailAlphaTag()>;UNIQUE_IDENTIFIER;SOURCE
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getVoiceMailNumber()>;UNIQUE_IDENTIFIER;SOURCE
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String[] getIsimImpu()>;UNIQUE_IDENTIFIER;SOURCE
<com.android.internal.telephony.IPhoneSubInfo$Stub: android.os.IBinder asBinder()>;UNIQUE_IDENTIFIER;SOURCE
<com.android.internal.telephony.IPhoneSubInfo$Stub: com.android.internal.telephony.IPhoneSubInfo asInterface(android.os.IBinder)>;UNIQUE_IDENTIFIER;SOURCE
<com.android.internal.telephony.ISms$Stub$Proxy: java.lang.String getInterfaceDescriptor()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.ISms$Stub$Proxy: java.util.List getAllMessagesFromIccEf()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.ISms$Stub: android.os.IBinder asBinder()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.ISms$Stub: com.android.internal.telephony.ISms asInterface(android.os.IBinder)>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.ITelephony$Stub$Proxy: android.os.Bundle getCellLocation()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.ITelephony$Stub$Proxy: int getActivePhoneType()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.ITelephony$Stub$Proxy: int getCallState()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.ITelephony$Stub$Proxy: int getCdmaEriIconIndex()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.ITelephony$Stub$Proxy: int getCdmaEriIconMode()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.ITelephony$Stub$Proxy: int getDataActivity()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.ITelephony$Stub$Proxy: int getDataState()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.ITelephony$Stub$Proxy: int getLteOnCdmaMode()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.ITelephony$Stub$Proxy: int getNetworkType()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.ITelephony$Stub$Proxy: int getVoiceMessageCount()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.ITelephony$Stub$Proxy: java.lang.String getCdmaEriText()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.ITelephony$Stub$Proxy: java.lang.String getInterfaceDescriptor()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.ITelephony$Stub$Proxy: java.util.List getNeighboringCellInfo()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.ITelephony$Stub: android.os.IBinder asBinder()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.ITelephony$Stub: com.android.internal.telephony.ITelephony asInterface(android.os.IBinder)>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: java.lang.String getInterfaceDescriptor()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.ITelephonyRegistry$Stub: android.os.IBinder asBinder()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.ITelephonyRegistry$Stub: com.android.internal.telephony.ITelephonyRegistry asInterface(android.os.IBinder)>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.IWapPushManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.IWapPushManager$Stub: android.os.IBinder asBinder()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.IWapPushManager$Stub: com.android.internal.telephony.IWapPushManager asInterface(android.os.IBinder)>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.IccFileHandler: java.lang.String getCommonIccEFPath(int)>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.IccFileHandler: void getEFLinearRecordSize(int,android.os.Message)>;SYSTEM_SETTINGS;SOURCE
<com.android.internal.telephony.IccIoResult: com.android.internal.telephony.IccException getException()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.IccIoResult: java.lang.String toString()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.IccPhoneBookInterfaceManager: java.util.List getAdnRecordsInEf(int)>;CONTACT_INFORMATION;SOURCE
<com.android.internal.telephony.IccPhoneBookInterfaceManagerProxy: int[] getAdnRecordsSize(int)>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.IccPhoneBookInterfaceManagerProxy: java.util.List getAdnRecordsInEf(int)>;CONTACT_INFORMATION;SOURCE
<com.android.internal.telephony.IccRecords: boolean getRecordsLoaded()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.IccRecords: boolean getVoiceCallForwardingFlag()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.IccRecords: boolean getVoiceMessageWaiting()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.IccRecords: com.android.internal.telephony.AdnRecordCache getAdnCache()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.IccRecords: com.android.internal.telephony.gsm.UsimServiceTable getUsimServiceTable()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.IccRecords: com.android.internal.telephony.ims.IsimRecords getIsimRecords()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.IccRecords: int getVoiceMessageCount()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.IccRecords: java.lang.String getIMSI()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.IccRecords: java.lang.String getMsisdnAlphaTag()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.IccRecords: java.lang.String getMsisdnNumber()>;UNIQUE_IDENTIFIER;SOURCE
<com.android.internal.telephony.IccRecords: java.lang.String getOperatorNumeric()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.IccRecords: java.lang.String getServiceProviderName()>;UNIQUE_IDENTIFIER;SOURCE
<com.android.internal.telephony.IccRecords: java.lang.String getVoiceMailAlphaTag()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.IccRecords: java.lang.String getVoiceMailNumber()>;UNIQUE_IDENTIFIER;SOURCE
<com.android.internal.telephony.IccSmsInterfaceManager: byte[] makeSmsRecordData(int,byte[])>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.IccSmsInterfaceManager: java.util.ArrayList buildValidRawData(java.util.ArrayList)>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.IccSmsInterfaceManagerProxy: java.util.List getAllMessagesFromIccEf()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.IccUtils: android.graphics.Bitmap parseToBnW(byte[],int)>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.IccUtils: android.graphics.Bitmap parseToRGB(byte[],int,boolean)>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.IccUtils: byte[] hexStringToBytes(java.lang.String)>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.IntRangeManager: boolean isEmpty()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.OperatorInfo: java.lang.String getOperatorAlphaLong()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.OperatorInfo: java.lang.String getOperatorAlphaShort()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.OperatorInfo: java.lang.String getOperatorNumeric()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.OperatorInfo: java.lang.String toString()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.PhoneBase: android.content.Context getContext()>;SYSTEM_SETTINGS;SOURCE
<com.android.internal.telephony.PhoneBase: android.net.LinkCapabilities getLinkCapabilities(java.lang.String)>;SYSTEM_SETTINGS;SOURCE
<com.android.internal.telephony.PhoneBase: android.net.LinkProperties getLinkProperties(java.lang.String)>;SYSTEM_SETTINGS;SOURCE
<com.android.internal.telephony.PhoneBase: android.os.Handler getHandler()>;SYSTEM_SETTINGS;SOURCE
<com.android.internal.telephony.PhoneBase: boolean getCallForwardingIndicator()>;SYSTEM_SETTINGS;SOURCE
<com.android.internal.telephony.PhoneBase: boolean getIccRecordsLoaded()>;SYSTEM_SETTINGS;SOURCE
<com.android.internal.telephony.PhoneBase: boolean getMessageWaitingIndicator()>;SYSTEM_SETTINGS;SOURCE
<com.android.internal.telephony.PhoneBase: boolean getUnitTestMode()>;SYSTEM_SETTINGS;SOURCE
<com.android.internal.telephony.PhoneBase: boolean isDataConnectivityPossible()>;SYSTEM_SETTINGS;SOURCE
<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.CallTracker getCallTracker()>;SYSTEM_SETTINGS;SOURCE
<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.IccCard getIccCard()>;SYSTEM_SETTINGS;SOURCE
<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.IccFileHandler getIccFileHandler()>;SYSTEM_SETTINGS;SOURCE
<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.ServiceStateTracker getServiceStateTracker()>;SYSTEM_SETTINGS;SOURCE
<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.gsm.UsimServiceTable getUsimServiceTable()>;SYSTEM_SETTINGS;SOURCE
<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.ims.IsimRecords getIsimRecords()>;SYSTEM_SETTINGS;SOURCE
<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.test.SimulatedRadioControl getSimulatedRadioControl()>;SYSTEM_SETTINGS;SOURCE
<com.android.internal.telephony.PhoneBase: int getCdmaEriIconIndex()>;SYSTEM_SETTINGS;SOURCE
<com.android.internal.telephony.PhoneBase: int getCdmaEriIconMode()>;SYSTEM_SETTINGS;SOURCE
<com.android.internal.telephony.PhoneBase: int getLteOnCdmaMode()>;SYSTEM_SETTINGS;SOURCE
<com.android.internal.telephony.PhoneBase: int getVoiceMessageCount()>;SYSTEM_SETTINGS;SOURCE
<com.android.internal.telephony.PhoneBase: java.lang.String getActiveApnHost(java.lang.String)>;UNIQUE_IDENTIFIER;SOURCE
<com.android.internal.telephony.PhoneBase: java.lang.String getCdmaEriText()>;UNIQUE_IDENTIFIER;SOURCE
<com.android.internal.telephony.PhoneBase: java.lang.String getCdmaMin()>;UNIQUE_IDENTIFIER;SOURCE
<com.android.internal.telephony.PhoneBase: java.lang.String getCdmaPrlVersion()>;UNIQUE_IDENTIFIER;SOURCE
<com.android.internal.telephony.PhoneBase: java.lang.String getIccSerialNumber()>;UNIQUE_IDENTIFIER;SOURCE
<com.android.internal.telephony.PhoneBase: java.lang.String getMsisdn()>;UNIQUE_IDENTIFIER;SOURCE
<com.android.internal.telephony.PhoneBase: java.lang.String[] getActiveApnTypes()>;SYSTEM_SETTINGS;SOURCE
<com.android.internal.telephony.PhoneBase: void getEnhancedVoicePrivacy(android.os.Message)>;SYSTEM_SETTINGS;SOURCE
<com.android.internal.telephony.PhoneBase: void getPreferredNetworkType(android.os.Message)>;LOCATION_INFORMATION;SOURCE
<com.android.internal.telephony.PhoneBase: void getSmscAddress(android.os.Message)>;SYSTEM_SETTINGS;SOURCE
<com.android.internal.telephony.PhoneFactory: com.android.internal.telephony.Phone getCdmaPhone()>;CONTACT_INFORMATION;SOURCE
<com.android.internal.telephony.PhoneFactory: com.android.internal.telephony.Phone getDefaultPhone()>;SYSTEM_SETTINGS;SOURCE
<com.android.internal.telephony.PhoneFactory: com.android.internal.telephony.Phone getGsmPhone()>;CONTACT_INFORMATION;SOURCE
<com.android.internal.telephony.PhoneProxy: android.content.Context getContext()>;SYSTEM_SETTINGS;SOURCE
<com.android.internal.telephony.PhoneProxy: android.net.LinkCapabilities getLinkCapabilities(java.lang.String)>;SYSTEM_SETTINGS;SOURCE
<com.android.internal.telephony.PhoneProxy: android.net.LinkProperties getLinkProperties(java.lang.String)>;SYSTEM_SETTINGS;SOURCE
<com.android.internal.telephony.PhoneProxy: android.telephony.CellLocation getCellLocation()>;LOCATION_INFORMATION;SOURCE
<com.android.internal.telephony.PhoneProxy: android.telephony.ServiceState getServiceState()>;SYSTEM_SETTINGS;SOURCE
<com.android.internal.telephony.PhoneProxy: android.telephony.SignalStrength getSignalStrength()>;SYSTEM_SETTINGS;SOURCE
<com.android.internal.telephony.PhoneProxy: boolean getCallForwardingIndicator()>;SYSTEM_SETTINGS;SOURCE
<com.android.internal.telephony.PhoneProxy: boolean getDataRoamingEnabled()>;SYSTEM_SETTINGS;SOURCE
<com.android.internal.telephony.PhoneProxy: boolean getIccRecordsLoaded()>;CONTACT_INFORMATION;SOURCE
<com.android.internal.telephony.PhoneProxy: boolean getMessageWaitingIndicator()>;SYSTEM_SETTINGS;SOURCE
<com.android.internal.telephony.PhoneProxy: boolean getMute()>;SYSTEM_SETTINGS;SOURCE
<com.android.internal.telephony.PhoneProxy: boolean getUnitTestMode()>;SYSTEM_SETTINGS;SOURCE
<com.android.internal.telephony.PhoneProxy: com.android.internal.telephony.Call getBackgroundCall()>;SYSTEM_SETTINGS;SOURCE
<com.android.internal.telephony.PhoneProxy: com.android.internal.telephony.Call getForegroundCall()>;SYSTEM_SETTINGS;SOURCE
<com.android.internal.telephony.PhoneProxy: com.android.internal.telephony.Call getRingingCall()>;SYSTEM_SETTINGS;SOURCE
<com.android.internal.telephony.PhoneProxy: com.android.internal.telephony.IccCard getIccCard()>;SYSTEM_SETTINGS;SOURCE
<com.android.internal.telephony.PhoneProxy: com.android.internal.telephony.IccPhoneBookInterfaceManager getIccPhoneBookInterfaceManager()>;CONTACT_INFORMATION;SOURCE
<com.android.internal.telephony.PhoneProxy: com.android.internal.telephony.IccSmsInterfaceManager getIccSmsInterfaceManager()>;CONTACT_INFORMATION;SOURCE
<com.android.internal.telephony.PhoneProxy: com.android.internal.telephony.Phone getActivePhone()>;SYSTEM_SETTINGS;SOURCE
<com.android.internal.telephony.PhoneProxy: com.android.internal.telephony.PhoneSubInfo getPhoneSubInfo()>;SYSTEM_SETTINGS;SOURCE
<com.android.internal.telephony.PhoneProxy: com.android.internal.telephony.gsm.UsimServiceTable getUsimServiceTable()>;SYSTEM_SETTINGS;SOURCE
<com.android.internal.telephony.PhoneProxy: com.android.internal.telephony.ims.IsimRecords getIsimRecords()>;SYSTEM_SETTINGS;SOURCE
<com.android.internal.telephony.PhoneProxy: com.android.internal.telephony.test.SimulatedRadioControl getSimulatedRadioControl()>;SYSTEM_SETTINGS;SOURCE
<com.android.internal.telephony.PhoneProxy: int getCdmaEriIconIndex()>;SYSTEM_SETTINGS;SOURCE
<com.android.internal.telephony.PhoneProxy: int getCdmaEriIconMode()>;SYSTEM_SETTINGS;SOURCE
<com.android.internal.telephony.PhoneProxy: int getLteOnCdmaMode()>;SYSTEM_SETTINGS;SOURCE
<com.android.internal.telephony.PhoneProxy: int getPhoneType()>;SYSTEM_SETTINGS;SOURCE
<com.android.internal.telephony.PhoneProxy: int getVoiceMessageCount()>;SYSTEM_SETTINGS;SOURCE
<com.android.internal.telephony.PhoneProxy: java.lang.String getActiveApnHost(java.lang.String)>;UNIQUE_IDENTIFIER;SOURCE
<com.android.internal.telephony.PhoneProxy: java.lang.String getCdmaEriText()>;UNIQUE_IDENTIFIER;SOURCE
<com.android.internal.telephony.PhoneProxy: java.lang.String getCdmaMin()>;UNIQUE_IDENTIFIER;SOURCE
<com.android.internal.telephony.PhoneProxy: java.lang.String getCdmaPrlVersion()>;UNIQUE_IDENTIFIER;SOURCE
<com.android.internal.telephony.PhoneProxy: java.lang.String getDeviceId()>;UNIQUE_IDENTIFIER;SOURCE
<com.android.internal.telephony.PhoneProxy: java.lang.String getDeviceSvn()>;UNIQUE_IDENTIFIER;SOURCE
<com.android.internal.telephony.PhoneProxy: java.lang.String getEsn()>;UNIQUE_IDENTIFIER;SOURCE
<com.android.internal.telephony.PhoneProxy: java.lang.String getIccSerialNumber()>;UNIQUE_IDENTIFIER;SOURCE
<com.android.internal.telephony.PhoneProxy: java.lang.String getImei()>;UNIQUE_IDENTIFIER;SOURCE
<com.android.internal.telephony.PhoneProxy: java.lang.String getLine1AlphaTag()>;UNIQUE_IDENTIFIER;SOURCE
<com.android.internal.telephony.PhoneProxy: java.lang.String getLine1Number()>;UNIQUE_IDENTIFIER;SOURCE
<com.android.internal.telephony.PhoneProxy: java.lang.String getMeid()>;UNIQUE_IDENTIFIER;SOURCE
<com.android.internal.telephony.PhoneProxy: java.lang.String getMsisdn()>;UNIQUE_IDENTIFIER;SOURCE
<com.android.internal.telephony.PhoneProxy: java.lang.String getPhoneName()>;UNIQUE_IDENTIFIER;SOURCE
<com.android.internal.telephony.PhoneProxy: java.lang.String getSubscriberId()>;UNIQUE_IDENTIFIER;SOURCE
<com.android.internal.telephony.PhoneProxy: java.lang.String getVoiceMailAlphaTag()>;UNIQUE_IDENTIFIER;SOURCE
<com.android.internal.telephony.PhoneProxy: java.lang.String getVoiceMailNumber()>;UNIQUE_IDENTIFIER;SOURCE
<com.android.internal.telephony.PhoneProxy: java.lang.String[] getActiveApnTypes()>;SYSTEM_SETTINGS;SOURCE
<com.android.internal.telephony.PhoneProxy: java.util.List getPendingMmiCodes()>;SYSTEM_SETTINGS;SOURCE
<com.android.internal.telephony.PhoneProxy: void getAvailableNetworks(android.os.Message)>;SYSTEM_SETTINGS;SOURCE
<com.android.internal.telephony.PhoneProxy: void getCallForwardingOption(int,android.os.Message)>;SYSTEM_SETTINGS;SOURCE
<com.android.internal.telephony.PhoneProxy: void getCallWaiting(android.os.Message)>;SYSTEM_SETTINGS;SOURCE
<com.android.internal.telephony.PhoneProxy: void getCellBroadcastSmsConfig(android.os.Message)>;SYSTEM_SETTINGS;SOURCE
<com.android.internal.telephony.PhoneProxy: void getDataCallList(android.os.Message)>;SYSTEM_SETTINGS;SOURCE
<com.android.internal.telephony.PhoneProxy: void getEnhancedVoicePrivacy(android.os.Message)>;SYSTEM_SETTINGS;SOURCE
<com.android.internal.telephony.PhoneProxy: void getNeighboringCids(android.os.Message)>;SYSTEM_SETTINGS;SOURCE
<com.android.internal.telephony.PhoneProxy: void getOutgoingCallerIdDisplay(android.os.Message)>;SYSTEM_SETTINGS;SOURCE
<com.android.internal.telephony.PhoneProxy: void getPreferredNetworkType(android.os.Message)>;LOCATION_INFORMATION;SOURCE
<com.android.internal.telephony.PhoneProxy: void getSmscAddress(android.os.Message)>;SYSTEM_SETTINGS;SOURCE
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getCompleteVoiceMailNumber()>;UNIQUE_IDENTIFIER;SOURCE
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getDeviceId()>;UNIQUE_IDENTIFIER;SOURCE
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getDeviceSvn()>;UNIQUE_IDENTIFIER;SOURCE
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getIccSerialNumber()>;UNIQUE_IDENTIFIER;SOURCE
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getIsimDomain()>;UNIQUE_IDENTIFIER;SOURCE
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getIsimImpi()>;UNIQUE_IDENTIFIER;SOURCE
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getLine1AlphaTag()>;UNIQUE_IDENTIFIER;SOURCE
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getLine1Number()>;UNIQUE_IDENTIFIER;SOURCE
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getMsisdn()>;UNIQUE_IDENTIFIER;SOURCE
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getSubscriberId()>;UNIQUE_IDENTIFIER;SOURCE
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getVoiceMailAlphaTag()>;UNIQUE_IDENTIFIER;SOURCE
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getVoiceMailNumber()>;UNIQUE_IDENTIFIER;SOURCE
<com.android.internal.telephony.PhoneSubInfo: java.lang.String[] getIsimImpu()>;SYSTEM_SETTINGS;SOURCE
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String getCompleteVoiceMailNumber()>;UNIQUE_IDENTIFIER;SOURCE
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String getDeviceId()>;UNIQUE_IDENTIFIER;SOURCE
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String getDeviceSvn()>;UNIQUE_IDENTIFIER;SOURCE
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String getIccSerialNumber()>;UNIQUE_IDENTIFIER;SOURCE
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String getIsimDomain()>;UNIQUE_IDENTIFIER;SOURCE
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String getIsimImpi()>;UNIQUE_IDENTIFIER;SOURCE
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String getLine1AlphaTag()>;UNIQUE_IDENTIFIER;SOURCE
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String getLine1Number()>;UNIQUE_IDENTIFIER;SOURCE
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String getMsisdn()>;UNIQUE_IDENTIFIER;SOURCE
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String getSubscriberId()>;UNIQUE_IDENTIFIER;SOURCE
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String getVoiceMailAlphaTag()>;UNIQUE_IDENTIFIER;SOURCE
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String getVoiceMailNumber()>;UNIQUE_IDENTIFIER;SOURCE
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String[] getIsimImpu()>;SYSTEM_SETTINGS;SOURCE
<com.android.internal.telephony.RIL: void getSmscAddress(android.os.Message)>;SYSTEM_SETTINGS;SOURCE
<com.android.internal.telephony.RILRequest: com.android.internal.telephony.RILRequest obtain(int,android.os.Message)>;SYSTEM_SETTINGS;SOURCE
<com.android.internal.telephony.RestrictedState: java.lang.String toString()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.RetryManager: int getRetryCount()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.RetryManager: int getRetryTimer()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.SMSDispatcher: int getNextConcatenatedRef()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.ServiceStateTracker: boolean getDesiredPowerState()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.SmsAddress: java.lang.String getAddressString()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.SmsHeader: java.lang.String toString()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.SmsMessageBase: byte[] getPdu()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.SmsMessageBase: byte[] getUserData()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.SmsMessageBase: com.android.internal.telephony.SmsHeader getUserDataHeader()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.SmsMessageBase: int getIndexOnIcc()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.SmsMessageBase: int getStatusOnIcc()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.SmsMessageBase: java.lang.String getDisplayMessageBody()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.SmsMessageBase: java.lang.String getDisplayOriginatingAddress()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.SmsMessageBase: java.lang.String getEmailBody()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.SmsMessageBase: java.lang.String getEmailFrom()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.SmsMessageBase: java.lang.String getMessageBody()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.SmsMessageBase: java.lang.String getOriginatingAddress()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.SmsMessageBase: java.lang.String getPseudoSubject()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.SmsMessageBase: java.lang.String getServiceCenterAddress()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.SmsMessageBase: long getTimestampMillis()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.SmsRawData: byte[] getBytes()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.SmsResponse: java.lang.String toString()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.UUSInfo: byte[] getUserData()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.UUSInfo: int getDcs()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.UUSInfo: int getType()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.WapPushOverSms$WapPushConnection: com.android.internal.telephony.IWapPushManager getWapPushManager()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.WspTypeDecoder: int getDecodedDataLength()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.WspTypeDecoder: java.lang.String getValueString()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.WspTypeDecoder: java.util.HashMap getContentParameters()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.WspTypeDecoder: long getValue32()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.cat.BerTlv: int getTag()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.cat.BerTlv: java.util.List getComprehensionTlvs()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.cat.CatCmdMessage: com.android.internal.telephony.cat.Menu getMenu()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.cat.CatCmdMessage: com.android.internal.telephony.cat.ToneSettings getToneSettings()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.cat.CatResponseMessage: com.android.internal.telephony.cat.CommandDetails getCmdDetails()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.cat.CatService: com.android.internal.telephony.cat.AppInterface getInstance()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.cat.CommandDetails: com.android.internal.telephony.cat.ComprehensionTlvTag getTag()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.cat.CommandParamsFactory: com.android.internal.telephony.cat.CommandParamsFactory getInstance(com.android.internal.telephony.cat.RilMessageDecoder,com.android.internal.telephony.IccFileHandler)>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.cat.ComprehensionTlv: byte[] getRawValue()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.cat.ComprehensionTlv: int getLength()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.cat.ComprehensionTlv: int getTag()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.cat.ComprehensionTlv: int getValueIndex()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.cat.DeviceIdentities: com.android.internal.telephony.cat.ComprehensionTlvTag getTag()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.cat.IconId: com.android.internal.telephony.cat.ComprehensionTlvTag getTag()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.cat.IconLoader: android.graphics.Bitmap parseToBnW(byte[],int)>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.cat.IconLoader: android.graphics.Bitmap parseToRGB(byte[],int,boolean,byte[])>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.cat.IconLoader: com.android.internal.telephony.cat.IconLoader getInstance(android.os.Handler,com.android.internal.telephony.IccFileHandler)>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.cat.ItemsIconId: com.android.internal.telephony.cat.ComprehensionTlvTag getTag()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.cat.RilMessageDecoder: com.android.internal.telephony.cat.RilMessageDecoder getInstance(android.os.Handler,com.android.internal.telephony.IccFileHandler)>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.cdma.CDMALTEPhone: com.android.internal.telephony.ims.IsimRecords getIsimRecords()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.cdma.CDMALTEPhone: java.lang.String getDeviceSvn()>;UNIQUE_IDENTIFIER;SOURCE
<com.android.internal.telephony.cdma.CDMALTEPhone: java.lang.String getImei()>;UNIQUE_IDENTIFIER;SOURCE
<com.android.internal.telephony.cdma.CDMALTEPhone: java.lang.String getMsisdn()>;UNIQUE_IDENTIFIER;SOURCE
<com.android.internal.telephony.cdma.CDMALTEPhone: java.lang.String getSubscriberId()>;UNIQUE_IDENTIFIER;SOURCE
<com.android.internal.telephony.cdma.CDMALTEPhone: void getAvailableNetworks(android.os.Message)>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.cdma.CDMALTEPhone: void getEnhancedVoicePrivacy(android.os.Message)>;SYSTEM_SETTINGS;SOURCE
<com.android.internal.telephony.cdma.CDMALTEPhone: void getPreferredNetworkType(android.os.Message)>;LOCATION_INFORMATION;SOURCE
<com.android.internal.telephony.cdma.CDMALTEPhone: void getSmscAddress(android.os.Message)>;SYSTEM_SETTINGS;SOURCE
<com.android.internal.telephony.cdma.CDMAPhone: android.telephony.CellLocation getCellLocation()>;LOCATION_INFORMATION;SOURCE
<com.android.internal.telephony.cdma.CDMAPhone: android.telephony.ServiceState getServiceState()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.cdma.CDMAPhone: boolean getCallForwardingIndicator()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.cdma.CDMAPhone: boolean getDataRoamingEnabled()>;SYSTEM_SETTINGS;SOURCE
<com.android.internal.telephony.cdma.CDMAPhone: boolean getMessageWaitingIndicator()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.cdma.CDMAPhone: boolean getMute()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.cdma.CDMAPhone: com.android.internal.telephony.CallTracker getCallTracker()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.cdma.CDMAPhone: com.android.internal.telephony.IccPhoneBookInterfaceManager getIccPhoneBookInterfaceManager()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.cdma.CDMAPhone: com.android.internal.telephony.IccSmsInterfaceManager getIccSmsInterfaceManager()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.cdma.CDMAPhone: com.android.internal.telephony.PhoneSubInfo getPhoneSubInfo()>;SYSTEM_SETTINGS;SOURCE
<com.android.internal.telephony.cdma.CDMAPhone: com.android.internal.telephony.ServiceStateTracker getServiceStateTracker()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.cdma.CDMAPhone: int getCdmaEriIconIndex()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.cdma.CDMAPhone: int getCdmaEriIconMode()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.cdma.CDMAPhone: int getPhoneType()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.cdma.CDMAPhone: int getVoiceMessageCount()>;SYSTEM_SETTINGS;SOURCE
<com.android.internal.telephony.cdma.CDMAPhone: java.lang.String getCdmaEriText()>;UNIQUE_IDENTIFIER;SOURCE
<com.android.internal.telephony.cdma.CDMAPhone: java.lang.String getCdmaMin()>;UNIQUE_IDENTIFIER;SOURCE
<com.android.internal.telephony.cdma.CDMAPhone: java.lang.String getCdmaPrlVersion()>;UNIQUE_IDENTIFIER;SOURCE
<com.android.internal.telephony.cdma.CDMAPhone: java.lang.String getDeviceId()>;UNIQUE_IDENTIFIER;SOURCE
<com.android.internal.telephony.cdma.CDMAPhone: java.lang.String getDeviceSvn()>;UNIQUE_IDENTIFIER;SOURCE
<com.android.internal.telephony.cdma.CDMAPhone: java.lang.String getEsn()>;UNIQUE_IDENTIFIER;SOURCE
<com.android.internal.telephony.cdma.CDMAPhone: java.lang.String getImei()>;UNIQUE_IDENTIFIER;SOURCE
<com.android.internal.telephony.cdma.CDMAPhone: java.lang.String getLine1AlphaTag()>;UNIQUE_IDENTIFIER;SOURCE
<com.android.internal.telephony.cdma.CDMAPhone: java.lang.String getLine1Number()>;UNIQUE_IDENTIFIER;SOURCE
<com.android.internal.telephony.cdma.CDMAPhone: java.lang.String getMeid()>;UNIQUE_IDENTIFIER;SOURCE
<com.android.internal.telephony.cdma.CDMAPhone: java.lang.String getPhoneName()>;UNIQUE_IDENTIFIER;SOURCE
<com.android.internal.telephony.cdma.CDMAPhone: java.lang.String getSubscriberId()>;UNIQUE_IDENTIFIER;SOURCE
<com.android.internal.telephony.cdma.CDMAPhone: java.lang.String getVoiceMailAlphaTag()>;UNIQUE_IDENTIFIER;SOURCE
<com.android.internal.telephony.cdma.CDMAPhone: java.lang.String getVoiceMailNumber()>;UNIQUE_IDENTIFIER;SOURCE
<com.android.internal.telephony.cdma.CDMAPhone: java.util.List getPendingMmiCodes()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.cdma.CDMAPhone: void getCallWaiting(android.os.Message)>;SYSTEM_SETTINGS;SOURCE
<com.android.internal.telephony.cdma.CDMAPhone: void getDataCallList(android.os.Message)>;SYSTEM_SETTINGS;SOURCE
<com.android.internal.telephony.cdma.CDMAPhone: void getEnhancedVoicePrivacy(android.os.Message)>;SYSTEM_SETTINGS;SOURCE
<com.android.internal.telephony.cdma.CDMAPhone: void getPreferredNetworkType(android.os.Message)>;LOCATION_INFORMATION;SOURCE
<com.android.internal.telephony.cdma.CDMAPhone: void getSmscAddress(android.os.Message)>;SYSTEM_SETTINGS;SOURCE
<com.android.internal.telephony.cdma.CdmaCall: com.android.internal.telephony.Phone getPhone()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.cdma.CdmaCall: java.util.List getConnections()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.cdma.CdmaCallTracker: boolean getMute()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.cdma.CdmaCallTracker: com.android.internal.telephony.cdma.CdmaConnection getConnectionByIndex(com.android.internal.telephony.cdma.CdmaCall,int)>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.cdma.CdmaConnection: com.android.internal.telephony.UUSInfo getUUSInfo()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.cdma.CdmaConnection: int getCDMAIndex()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.cdma.CdmaConnection: int getNumberPresentation()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.cdma.CdmaConnection: java.lang.String getAddress()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.cdma.CdmaConnection: java.lang.String getOrigDialString()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.cdma.CdmaConnection: java.lang.String getRemainingPostDialString()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.cdma.CdmaConnection: long getConnectTime()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.cdma.CdmaConnection: long getCreateTime()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.cdma.CdmaConnection: long getDisconnectTime()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.cdma.CdmaConnection: long getDurationMillis()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.cdma.CdmaConnection: long getHoldDurationMillis()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: java.lang.String getActionIntentDataStallAlarm()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: java.lang.String getActionIntentReconnectAlarm()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.cdma.CdmaMmiCode: java.lang.CharSequence getMessage()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: java.lang.String getFormat()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: com.android.internal.telephony.Phone getPhone()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: int getCurrentDataConnectionState()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: int getOtasp()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: java.lang.String getCdmaMin()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: java.lang.String getImsi()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: java.lang.String getMdnNumber()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: java.lang.String getPrlVersion()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.cdma.EriManager: int getCdmaEriIconIndex(int,int)>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.cdma.EriManager: int getCdmaEriIconMode(int,int)>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.cdma.EriManager: int getEriFileType()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.cdma.EriManager: int getEriFileVersion()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.cdma.EriManager: int getEriNumberOfEntries()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.cdma.EriManager: java.lang.String getCdmaEriText(int,int)>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.cdma.RuimFileHandler: java.lang.String getEFPath(int)>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.cdma.RuimPhoneBookInterfaceManager: int[] getAdnRecordsSize(int)>;CONTACT_INFORMATION;SOURCE
<com.android.internal.telephony.cdma.RuimPhoneBookInterfaceManager: java.util.List getAdnRecordsInEf(int)>;CONTACT_INFORMATION;SOURCE
<com.android.internal.telephony.cdma.RuimRecords: int getDisplayRule(java.lang.String)>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.cdma.RuimRecords: java.lang.String getCdmaMin()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.cdma.RuimRecords: java.lang.String getIMSI()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.cdma.RuimRecords: java.lang.String getMdnNumber()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.cdma.RuimRecords: java.lang.String getPrlVersion()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.cdma.RuimRecords: java.lang.String getRUIMOperatorNumeric()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.cdma.RuimSmsInterfaceManager: java.util.List getAllMessagesFromIccEf()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.cdma.SmsMessage: byte[] getIncomingSmsFingerprint()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.cdma.SmsMessage: int getMessageType()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.cdma.SmsMessage: int getNextMessageId()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.cdma.SmsMessage: int getNumOfVoicemails()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.cdma.SmsMessage: int getProtocolIdentifier()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.cdma.SmsMessage: int getStatus()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.cdma.SmsMessage: int getTeleService()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.gsm.GSMPhone: android.telephony.CellLocation getCellLocation()>;LOCATION_INFORMATION;SOURCE
<com.android.internal.telephony.gsm.GSMPhone: android.telephony.ServiceState getServiceState()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.gsm.GSMPhone: boolean getDataRoamingEnabled()>;SYSTEM_SETTINGS;SOURCE
<com.android.internal.telephony.gsm.GSMPhone: boolean getMute()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.gsm.GSMPhone: com.android.internal.telephony.CallTracker getCallTracker()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.gsm.GSMPhone: com.android.internal.telephony.IccPhoneBookInterfaceManager getIccPhoneBookInterfaceManager()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.gsm.GSMPhone: com.android.internal.telephony.IccSmsInterfaceManager getIccSmsInterfaceManager()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.gsm.GSMPhone: com.android.internal.telephony.PhoneSubInfo getPhoneSubInfo()>;SYSTEM_SETTINGS;SOURCE
<com.android.internal.telephony.gsm.GSMPhone: com.android.internal.telephony.ServiceStateTracker getServiceStateTracker()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.gsm.GSMPhone: int getPhoneType()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.gsm.GSMPhone: java.lang.String getDeviceId()>;UNIQUE_IDENTIFIER;SOURCE
<com.android.internal.telephony.gsm.GSMPhone: java.lang.String getDeviceSvn()>;UNIQUE_IDENTIFIER;SOURCE
<com.android.internal.telephony.gsm.GSMPhone: java.lang.String getEsn()>;UNIQUE_IDENTIFIER;SOURCE
<com.android.internal.telephony.gsm.GSMPhone: java.lang.String getImei()>;UNIQUE_IDENTIFIER;SOURCE
<com.android.internal.telephony.gsm.GSMPhone: java.lang.String getLine1AlphaTag()>;UNIQUE_IDENTIFIER;SOURCE
<com.android.internal.telephony.gsm.GSMPhone: java.lang.String getLine1Number()>;UNIQUE_IDENTIFIER;SOURCE
<com.android.internal.telephony.gsm.GSMPhone: java.lang.String getMeid()>;UNIQUE_IDENTIFIER;SOURCE
<com.android.internal.telephony.gsm.GSMPhone: java.lang.String getMsisdn()>;UNIQUE_IDENTIFIER;SOURCE
<com.android.internal.telephony.gsm.GSMPhone: java.lang.String getPhoneName()>;UNIQUE_IDENTIFIER;SOURCE
<com.android.internal.telephony.gsm.GSMPhone: java.lang.String getSubscriberId()>;UNIQUE_IDENTIFIER;SOURCE
<com.android.internal.telephony.gsm.GSMPhone: java.lang.String getVoiceMailAlphaTag()>;UNIQUE_IDENTIFIER;SOURCE
<com.android.internal.telephony.gsm.GSMPhone: java.lang.String getVoiceMailNumber()>;UNIQUE_IDENTIFIER;SOURCE
<com.android.internal.telephony.gsm.GSMPhone: java.util.List getPendingMmiCodes()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.gsm.GSMPhone: void getAvailableNetworks(android.os.Message)>;SYSTEM_SETTINGS;SOURCE
<com.android.internal.telephony.gsm.GSMPhone: void getCallForwardingOption(int,android.os.Message)>;SYSTEM_SETTINGS;SOURCE
<com.android.internal.telephony.gsm.GSMPhone: void getCallWaiting(android.os.Message)>;SYSTEM_SETTINGS;SOURCE
<com.android.internal.telephony.gsm.GSMPhone: void getDataCallList(android.os.Message)>;SYSTEM_SETTINGS;SOURCE
<com.android.internal.telephony.gsm.GSMPhone: void getNeighboringCids(android.os.Message)>;SYSTEM_SETTINGS;SOURCE
<com.android.internal.telephony.gsm.GSMPhone: void getPreferredNetworkType(android.os.Message)>;LOCATION_INFORMATION;SOURCE
<com.android.internal.telephony.gsm.GSMPhone: void getSmscAddress(android.os.Message)>;SYSTEM_SETTINGS;SOURCE
<com.android.internal.telephony.gsm.GsmCall: com.android.internal.telephony.Phone getPhone()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.gsm.GsmCall: java.util.List getConnections()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.gsm.GsmCallTracker: boolean getMute()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.gsm.GsmCallTracker: com.android.internal.telephony.gsm.GsmConnection getConnectionByIndex(com.android.internal.telephony.gsm.GsmCall,int)>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.gsm.GsmConnection: com.android.internal.telephony.UUSInfo getUUSInfo()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.gsm.GsmConnection: int getGSMIndex()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.gsm.GsmConnection: int getNumberPresentation()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.gsm.GsmConnection: java.lang.String getAddress()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.gsm.GsmConnection: java.lang.String getRemainingPostDialString()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.gsm.GsmConnection: long getConnectTime()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.gsm.GsmConnection: long getCreateTime()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.gsm.GsmConnection: long getDisconnectTime()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.gsm.GsmConnection: long getDurationMillis()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.gsm.GsmConnection: long getHoldDurationMillis()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.gsm.GsmDataConnection: int getProfileId()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: android.net.LinkCapabilities getLinkCapabilities(java.lang.String)>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: android.net.LinkProperties getLinkProperties(java.lang.String)>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: boolean getAnyDataEnabled()>;SYSTEM_SETTINGS;SOURCE
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: int getApnProfileID(java.lang.String)>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: java.lang.String getActionIntentDataStallAlarm()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: java.lang.String getActionIntentReconnectAlarm()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: java.lang.String getActiveApnString(java.lang.String)>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: java.lang.String[] getActiveApnTypes()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.gsm.GsmMmiCode: int getCLIRMode()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.gsm.GsmMmiCode: java.lang.CharSequence getMessage()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.gsm.GsmSMSDispatcher: java.lang.String getFormat()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.gsm.GsmServiceStateTracker: com.android.internal.telephony.Phone getPhone()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.gsm.GsmServiceStateTracker: int getCurrentDataConnectionState()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.gsm.GsmServiceStateTracker: int getCurrentGprsState()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.gsm.GsmSmsAddress: java.lang.String getAddressString()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.gsm.SIMFileHandler: java.lang.String getEFPath(int)>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.gsm.SIMRecords: boolean getVoiceCallForwardingFlag()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.gsm.SIMRecords: com.android.internal.telephony.gsm.UsimServiceTable getUsimServiceTable()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.gsm.SIMRecords: int getDisplayRule(java.lang.String)>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.gsm.SIMRecords: java.lang.String getIMSI()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.gsm.SIMRecords: java.lang.String getMsisdnAlphaTag()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.gsm.SIMRecords: java.lang.String getMsisdnNumber()>;UNIQUE_IDENTIFIER;SOURCE
<com.android.internal.telephony.gsm.SIMRecords: java.lang.String getOperatorNumeric()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.gsm.SIMRecords: java.lang.String getVoiceMailAlphaTag()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.gsm.SIMRecords: java.lang.String getVoiceMailNumber()>;UNIQUE_IDENTIFIER;SOURCE
<com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager: int[] getAdnRecordsSize(int)>;CONTACT_INFORMATION;SOURCE
<com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager: java.util.List getAdnRecordsInEf(int)>;CONTACT_INFORMATION;SOURCE
<com.android.internal.telephony.gsm.SimSmsInterfaceManager: java.util.List getAllMessagesFromIccEf()>;CONTACT_INFORMATION;SOURCE
<com.android.internal.telephony.gsm.SimTlv: byte[] getData()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.gsm.SimTlv: int getTag()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.gsm.SmsBroadcastConfigInfo: int getFromCodeScheme()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.gsm.SmsBroadcastConfigInfo: int getFromServiceId()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.gsm.SmsBroadcastConfigInfo: int getToCodeScheme()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.gsm.SmsBroadcastConfigInfo: int getToServiceId()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.gsm.SmsMessage$PduParser: byte[] getUserData()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.gsm.SmsMessage$PduParser: com.android.internal.telephony.SmsHeader getUserDataHeader()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.gsm.SmsMessage$PduParser: com.android.internal.telephony.gsm.GsmSmsAddress getAddress()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.gsm.SmsMessage$PduParser: int getByte()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.gsm.SmsMessage$PduParser: int getUserDataSeptetPadding()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.gsm.SmsMessage$PduParser: java.lang.String getSCAddress()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.gsm.SmsMessage$PduParser: java.lang.String getUserDataGSM7Bit(int,int,int)>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.gsm.SmsMessage$PduParser: java.lang.String getUserDataKSC5601(int)>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.gsm.SmsMessage$PduParser: java.lang.String getUserDataUCS2(int)>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.gsm.SmsMessage$PduParser: long getSCTimestampMillis()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.gsm.SmsMessage: int getDataCodingScheme()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.gsm.SmsMessage: int getProtocolIdentifier()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.gsm.SmsMessage: int getStatus()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.gsm.SmsMessage: int getTPLayerLengthForPDU(java.lang.String)>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.gsm.SpnOverride: java.lang.String getSpn(java.lang.String)>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.gsm.UsimPhoneBookManager: java.util.ArrayList loadEfFilesFromUsim()>;CONTACT_INFORMATION;SOURCE
<com.android.internal.telephony.gsm.UsimServiceTable: java.lang.Object[] getValues()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.gsm.UsimServiceTable: java.lang.String getTag()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.gsm.VoiceMailConstants: java.lang.String getCarrierName(java.lang.String)>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.gsm.VoiceMailConstants: java.lang.String getVoiceMailNumber(java.lang.String)>;UNIQUE_IDENTIFIER;SOURCE
<com.android.internal.telephony.gsm.VoiceMailConstants: java.lang.String getVoiceMailTag(java.lang.String)>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.ims.IsimUiccRecords$EfIsimDomainLoaded: java.lang.String getEfName()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.ims.IsimUiccRecords$EfIsimImpiLoaded: java.lang.String getEfName()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.ims.IsimUiccRecords$EfIsimImpuLoaded: java.lang.String getEfName()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.ims.IsimUiccRecords: java.lang.String getIsimDomain()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.ims.IsimUiccRecords: java.lang.String getIsimImpi()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.ims.IsimUiccRecords: java.lang.String[] getIsimImpu()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.sip.SipCallBase: java.util.List getConnections()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.sip.SipConnectionBase: com.android.internal.telephony.UUSInfo getUUSInfo()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.sip.SipConnectionBase: int getNumberPresentation()>;SYSTEM_SETTINGS;SOURCE
<com.android.internal.telephony.sip.SipConnectionBase: java.lang.String getRemainingPostDialString()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.sip.SipConnectionBase: long getConnectTime()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.sip.SipConnectionBase: long getCreateTime()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.sip.SipConnectionBase: long getDisconnectTime()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.sip.SipConnectionBase: long getDurationMillis()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.sip.SipConnectionBase: long getHoldDurationMillis()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.telephony.sip.SipPhone$SipCall: com.android.internal.telephony.Connection dial(java.lang.String)>;SYSTEM_SETTINGS;SOURCE
<com.android.internal.telephony.sip.SipPhone$SipCall: com.android.internal.telephony.Phone getPhone()>;SYSTEM_SETTINGS;SOURCE
<com.android.internal.telephony.sip.SipPhone$SipCall: java.util.List getConnections()>;SYSTEM_SETTINGS;SOURCE
<com.android.internal.telephony.sip.SipPhone$SipConnection: android.net.rtp.AudioGroup getAudioGroup()>;SYSTEM_SETTINGS;SOURCE
<com.android.internal.telephony.sip.SipPhone$SipConnection: boolean getMute()>;SYSTEM_SETTINGS;SOURCE
<com.android.internal.telephony.sip.SipPhone$SipConnection: com.android.internal.telephony.Phone getPhone()>;SYSTEM_SETTINGS;SOURCE
<com.android.internal.telephony.sip.SipPhone$SipConnection: int getNumberPresentation()>;SYSTEM_SETTINGS;SOURCE
<com.android.internal.telephony.sip.SipPhone$SipConnection: java.lang.String getAddress()>;UNIQUE_IDENTIFIER;SOURCE
<com.android.internal.telephony.sip.SipPhone$SipConnection: java.lang.String getCnapName()>;UNIQUE_IDENTIFIER;SOURCE
<com.android.internal.telephony.sip.SipPhone: android.net.LinkProperties getLinkProperties(java.lang.String)>;SYSTEM_SETTINGS;SOURCE
<com.android.internal.telephony.sip.SipPhone: android.telephony.CellLocation getCellLocation()>;LOCATION_INFORMATION;SOURCE
<com.android.internal.telephony.sip.SipPhone: android.telephony.ServiceState getServiceState()>;SYSTEM_SETTINGS;SOURCE
<com.android.internal.telephony.sip.SipPhone: android.telephony.SignalStrength getSignalStrength()>;SYSTEM_SETTINGS;SOURCE
<com.android.internal.telephony.sip.SipPhone: boolean getCallForwardingIndicator()>;SYSTEM_SETTINGS;SOURCE
<com.android.internal.telephony.sip.SipPhone: boolean getDataRoamingEnabled()>;SYSTEM_SETTINGS;SOURCE
<com.android.internal.telephony.sip.SipPhone: boolean getIccRecordsLoaded()>;SYSTEM_SETTINGS;SOURCE
<com.android.internal.telephony.sip.SipPhone: boolean getMessageWaitingIndicator()>;SYSTEM_SETTINGS;SOURCE
<com.android.internal.telephony.sip.SipPhone: boolean getMute()>;SYSTEM_SETTINGS;SOURCE
<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.Call getBackgroundCall()>;SYSTEM_SETTINGS;SOURCE
<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.Call getForegroundCall()>;SYSTEM_SETTINGS;SOURCE
<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.Call getRingingCall()>;SYSTEM_SETTINGS;SOURCE
<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.IccCard getIccCard()>;SYSTEM_SETTINGS;SOURCE
<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.IccFileHandler getIccFileHandler()>;SYSTEM_SETTINGS;SOURCE
<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.IccPhoneBookInterfaceManager getIccPhoneBookInterfaceManager()>;SYSTEM_SETTINGS;SOURCE
<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.IccSmsInterfaceManager getIccSmsInterfaceManager()>;SYSTEM_SETTINGS;SOURCE
<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.PhoneSubInfo getPhoneSubInfo()>;SYSTEM_SETTINGS;SOURCE
<com.android.internal.telephony.sip.SipPhone: int getPhoneType()>;SYSTEM_SETTINGS;SOURCE
<com.android.internal.telephony.sip.SipPhone: java.lang.String getDeviceId()>;UNIQUE_IDENTIFIER;SOURCE
<com.android.internal.telephony.sip.SipPhone: java.lang.String getDeviceSvn()>;UNIQUE_IDENTIFIER;SOURCE
<com.android.internal.telephony.sip.SipPhone: java.lang.String getEsn()>;UNIQUE_IDENTIFIER;SOURCE
<com.android.internal.telephony.sip.SipPhone: java.lang.String getIccSerialNumber()>;UNIQUE_IDENTIFIER;SOURCE
<com.android.internal.telephony.sip.SipPhone: java.lang.String getImei()>;UNIQUE_IDENTIFIER;SOURCE
<com.android.internal.telephony.sip.SipPhone: java.lang.String getLine1AlphaTag()>;UNIQUE_IDENTIFIER;SOURCE
<com.android.internal.telephony.sip.SipPhone: java.lang.String getLine1Number()>;UNIQUE_IDENTIFIER;SOURCE
<com.android.internal.telephony.sip.SipPhone: java.lang.String getMeid()>;UNIQUE_IDENTIFIER;SOURCE
<com.android.internal.telephony.sip.SipPhone: java.lang.String getPhoneName()>;UNIQUE_IDENTIFIER;SOURCE
<com.android.internal.telephony.sip.SipPhone: java.lang.String getSipUri()>;UNIQUE_IDENTIFIER;SOURCE
<com.android.internal.telephony.sip.SipPhone: java.lang.String getSubscriberId()>;UNIQUE_IDENTIFIER;SOURCE
<com.android.internal.telephony.sip.SipPhone: java.lang.String getVoiceMailAlphaTag()>;UNIQUE_IDENTIFIER;SOURCE
<com.android.internal.telephony.sip.SipPhone: java.lang.String getVoiceMailNumber()>;UNIQUE_IDENTIFIER;SOURCE
<com.android.internal.telephony.sip.SipPhone: java.util.List getCurrentDataConnectionList()>;SYSTEM_SETTINGS;SOURCE
<com.android.internal.telephony.sip.SipPhone: java.util.List getPendingMmiCodes()>;SYSTEM_SETTINGS;SOURCE
<com.android.internal.telephony.sip.SipPhone: void getPreferredNetworkType(android.os.Message)>;LOCATION_INFORMATION;SOURCE
<com.android.internal.telephony.sip.SipPhone: void getSmscAddress(android.os.Message)>;SYSTEM_SETTINGS;SOURCE
<com.android.internal.telephony.sip.SipPhoneBase: android.net.LinkProperties getLinkProperties(java.lang.String)>;SYSTEM_SETTINGS;SOURCE
<com.android.internal.telephony.sip.SipPhoneBase: android.telephony.CellLocation getCellLocation()>;LOCATION_INFORMATION;SOURCE
<com.android.internal.telephony.sip.SipPhoneBase: android.telephony.ServiceState getServiceState()>;SYSTEM_SETTINGS;SOURCE
<com.android.internal.telephony.sip.SipPhoneBase: android.telephony.SignalStrength getSignalStrength()>;SYSTEM_SETTINGS;SOURCE
<com.android.internal.telephony.sip.SipPhoneBase: boolean getCallForwardingIndicator()>;SYSTEM_SETTINGS;SOURCE
<com.android.internal.telephony.sip.SipPhoneBase: boolean getDataRoamingEnabled()>;SYSTEM_SETTINGS;SOURCE
<com.android.internal.telephony.sip.SipPhoneBase: boolean getIccRecordsLoaded()>;SYSTEM_SETTINGS;SOURCE
<com.android.internal.telephony.sip.SipPhoneBase: boolean getMessageWaitingIndicator()>;SYSTEM_SETTINGS;SOURCE
<com.android.internal.telephony.sip.SipPhoneBase: com.android.internal.telephony.IccCard getIccCard()>;SYSTEM_SETTINGS;SOURCE
<com.android.internal.telephony.sip.SipPhoneBase: com.android.internal.telephony.IccFileHandler getIccFileHandler()>;SYSTEM_SETTINGS;SOURCE
<com.android.internal.telephony.sip.SipPhoneBase: com.android.internal.telephony.IccPhoneBookInterfaceManager getIccPhoneBookInterfaceManager()>;SYSTEM_SETTINGS;SOURCE
<com.android.internal.telephony.sip.SipPhoneBase: com.android.internal.telephony.IccSmsInterfaceManager getIccSmsInterfaceManager()>;SYSTEM_SETTINGS;SOURCE
<com.android.internal.telephony.sip.SipPhoneBase: com.android.internal.telephony.PhoneSubInfo getPhoneSubInfo()>;SYSTEM_SETTINGS;SOURCE
<com.android.internal.telephony.sip.SipPhoneBase: int getPhoneType()>;SYSTEM_SETTINGS;SOURCE
<com.android.internal.telephony.sip.SipPhoneBase: java.lang.String getDeviceId()>;UNIQUE_IDENTIFIER;SOURCE
<com.android.internal.telephony.sip.SipPhoneBase: java.lang.String getDeviceSvn()>;UNIQUE_IDENTIFIER;SOURCE
<com.android.internal.telephony.sip.SipPhoneBase: java.lang.String getEsn()>;UNIQUE_IDENTIFIER;SOURCE
<com.android.internal.telephony.sip.SipPhoneBase: java.lang.String getIccSerialNumber()>;UNIQUE_IDENTIFIER;SOURCE
<com.android.internal.telephony.sip.SipPhoneBase: java.lang.String getImei()>;UNIQUE_IDENTIFIER;SOURCE
<com.android.internal.telephony.sip.SipPhoneBase: java.lang.String getLine1AlphaTag()>;UNIQUE_IDENTIFIER;SOURCE
<com.android.internal.telephony.sip.SipPhoneBase: java.lang.String getLine1Number()>;UNIQUE_IDENTIFIER;SOURCE
<com.android.internal.telephony.sip.SipPhoneBase: java.lang.String getMeid()>;UNIQUE_IDENTIFIER;SOURCE
<com.android.internal.telephony.sip.SipPhoneBase: java.lang.String getSubscriberId()>;UNIQUE_IDENTIFIER;SOURCE
<com.android.internal.telephony.sip.SipPhoneBase: java.lang.String getVoiceMailAlphaTag()>;UNIQUE_IDENTIFIER;SOURCE
<com.android.internal.telephony.sip.SipPhoneBase: java.lang.String getVoiceMailNumber()>;UNIQUE_IDENTIFIER;SOURCE
<com.android.internal.telephony.sip.SipPhoneBase: java.util.List getCurrentDataConnectionList()>;SYSTEM_SETTINGS;SOURCE
<com.android.internal.telephony.sip.SipPhoneBase: java.util.List getPendingMmiCodes()>;SYSTEM_SETTINGS;SOURCE
<com.android.internal.telephony.sip.SipPhoneBase: void getPreferredNetworkType(android.os.Message)>;LOCATION_INFORMATION;SOURCE
<com.android.internal.telephony.sip.SipPhoneBase: void getSmscAddress(android.os.Message)>;SYSTEM_SETTINGS;SOURCE
<com.android.internal.textservice.ISpellCheckerSession$Stub$Proxy: java.lang.String getInterfaceDescriptor()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.textservice.ISpellCheckerSession$Stub: android.os.IBinder asBinder()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.textservice.ISpellCheckerSessionListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.textservice.ISpellCheckerSessionListener$Stub: android.os.IBinder asBinder()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.textservice.ITextServicesManager$Stub$Proxy: android.view.textservice.SpellCheckerInfo getCurrentSpellChecker(java.lang.String)>;NETWORK_INFORMATION;SOURCE
<com.android.internal.textservice.ITextServicesManager$Stub$Proxy: android.view.textservice.SpellCheckerInfo[] getEnabledSpellCheckers()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.textservice.ITextServicesManager$Stub$Proxy: android.view.textservice.SpellCheckerSubtype getCurrentSpellCheckerSubtype(java.lang.String,boolean)>;NETWORK_INFORMATION;SOURCE
<com.android.internal.textservice.ITextServicesManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.textservice.ITextServicesManager$Stub$Proxy: void getSpellCheckerService(java.lang.String,java.lang.String,com.android.internal.textservice.ITextServicesSessionListener,com.android.internal.textservice.ISpellCheckerSessionListener,android.os.Bundle)>;NETWORK_INFORMATION;SOURCE
<com.android.internal.textservice.ITextServicesManager$Stub: android.os.IBinder asBinder()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.textservice.ITextServicesSessionListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.textservice.ITextServicesSessionListener$Stub: android.os.IBinder asBinder()>;NETWORK_INFORMATION;SOURCE
<com.android.internal.util.AsyncService: android.os.Handler getHandler()>;NETWORK_INFORMATION;SOURCE
<com.android.server.NetworkManagementSocketTagger: int getThreadSocketStatsTag()>;SYSTEM_SETTINGS;SOURCE
<dalvik.system.BaseDexClassLoader: java.lang.Package getPackage(java.lang.String)>;NETWORK_INFORMATION;SOURCE
<gov.nist.core.net.SslNetworkLayer: java.net.Socket createSocket(java.net.InetAddress,int,java.net.InetAddress,int)>;SYSTEM_SETTINGS;SOURCE
<gov.nist.core.net.SslNetworkLayer: javax.net.ssl.SSLServerSocket createSSLServerSocket(int,int,java.net.InetAddress)>;SYSTEM_SETTINGS;SOURCE
<gov.nist.core.net.SslNetworkLayer: javax.net.ssl.SSLSocket createSSLSocket(java.net.InetAddress,int)>;SYSTEM_SETTINGS;SOURCE
<gov.nist.core.net.SslNetworkLayer: javax.net.ssl.SSLSocket createSSLSocket(java.net.InetAddress,int,java.net.InetAddress)>;SYSTEM_SETTINGS;SOURCE
<gov.nist.javax.sip.SipStackImpl: java.lang.String[] getEnabledCipherSuites()>;SYSTEM_SETTINGS;SOURCE
<gov.nist.javax.sip.SipStackImpl: java.lang.String[] getEnabledProtocols()>;SYSTEM_SETTINGS;SOURCE
<gov.nist.javax.sip.address.AddressImpl: javax.sip.address.URI getURI()>;FILE_INFORMATION;SOURCE
<gov.nist.javax.sip.address.Authority: java.lang.String getPassword()>;SYSTEM_SETTINGS;SOURCE
<gov.nist.javax.sip.address.SipUri: java.lang.String getUserPassword()>;SYSTEM_SETTINGS;SOURCE
<gov.nist.javax.sip.address.UserInfo: java.lang.String getPassword()>;SYSTEM_SETTINGS;SOURCE
<gov.nist.javax.sip.header.AuthenticationHeader: javax.sip.address.URI getURI()>;FILE_INFORMATION;SOURCE
<gov.nist.javax.sip.header.Challenge: java.lang.String getURI()>;FILE_INFORMATION;SOURCE
<gov.nist.javax.sip.header.Contact: boolean getWildCardFlag()>;CONTACT_INFORMATION;SOURCE
<gov.nist.javax.sip.header.Contact: gov.nist.core.NameValueList getContactParms()>;CONTACT_INFORMATION;SOURCE
<gov.nist.javax.sip.header.Contact: gov.nist.javax.sip.header.ContactList getContactList()>;CONTACT_INFORMATION;SOURCE
<gov.nist.javax.sip.header.Contact: int getExpires()>;CONTACT_INFORMATION;SOURCE
<gov.nist.javax.sip.header.Contact: java.lang.String getPubGruuParam()>;CONTACT_INFORMATION;SOURCE
<gov.nist.javax.sip.header.Contact: java.lang.String getSipInstanceParam()>;CONTACT_INFORMATION;SOURCE
<gov.nist.javax.sip.header.Contact: java.lang.String getTempGruuParam()>;CONTACT_INFORMATION;SOURCE
<gov.nist.javax.sip.header.Contact: javax.sip.address.Address getAddress()>;CONTACT_INFORMATION;SOURCE
<gov.nist.javax.sip.header.ParametersHeader: gov.nist.javax.sip.address.GenericURI getParameterAsURI(java.lang.String)>;FILE_INFORMATION;SOURCE
<gov.nist.javax.sip.header.ProxyAuthenticate: javax.sip.address.URI getURI()>;FILE_INFORMATION;SOURCE
<gov.nist.javax.sip.header.RequestLine: gov.nist.javax.sip.address.GenericURI getUri()>;FILE_INFORMATION;SOURCE
<gov.nist.javax.sip.header.WWWAuthenticate: javax.sip.address.URI getURI()>;FILE_INFORMATION;SOURCE
<gov.nist.javax.sip.header.ims.PAccessNetworkInfo: java.lang.Object getExtensionAccessInfo()>;SYSTEM_SETTINGS;SOURCE
<gov.nist.javax.sip.header.ims.PAccessNetworkInfo: java.lang.String getAccessType()>;SYSTEM_SETTINGS;SOURCE
<gov.nist.javax.sip.header.ims.PAccessNetworkInfo: java.lang.String getCGI3GPP()>;SYSTEM_SETTINGS;SOURCE
<gov.nist.javax.sip.header.ims.PAccessNetworkInfo: java.lang.String getCI3GPP2()>;SYSTEM_SETTINGS;SOURCE
<gov.nist.javax.sip.header.ims.PAccessNetworkInfo: java.lang.String getDSLLocation()>;SYSTEM_SETTINGS;SOURCE
<gov.nist.javax.sip.header.ims.PAssertedService: java.lang.String encodeBody()>;NETWORK_INFORMATION;SOURCE
<gov.nist.javax.sip.header.ims.PAssociatedURI: javax.sip.address.URI getAssociatedURI()>;FILE_INFORMATION;SOURCE
<gov.nist.javax.sip.header.ims.PPreferredService: java.lang.String encodeBody()>;NETWORK_INFORMATION;SOURCE
<gov.nist.javax.sip.header.ims.SecurityAgree: java.lang.String getSecurityMechanism()>;FILE_INFORMATION;SOURCE
<gov.nist.javax.sip.message.SIPRequest: javax.sip.address.URI getRequestURI()>;FILE_INFORMATION;SOURCE
<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.javax.sip.stack.ServerRequestInterface newSIPServerRequest(gov.nist.javax.sip.message.SIPRequest,gov.nist.javax.sip.stack.MessageChannel)>;SYSTEM_SETTINGS;SOURCE
<java.lang.BootClassLoader: java.lang.BootClassLoader getInstance()>;NETWORK_INFORMATION;SOURCE
<java.lang.BootClassLoader: java.lang.Package getPackage(java.lang.String)>;NETWORK_INFORMATION;SOURCE
<java.lang.ClassLoader: java.io.InputStream getSystemResourceAsStream(java.lang.String)>;NETWORK_INFORMATION;SOURCE
<java.lang.ClassLoader: java.lang.Class defineClass(byte[],int,int)>;NETWORK_INFORMATION;SOURCE
<java.lang.ClassLoader: java.lang.Class defineClass(java.lang.String,byte[],int,int)>;NETWORK_INFORMATION;SOURCE
<java.lang.ClassLoader: java.lang.Class defineClass(java.lang.String,byte[],int,int,java.security.ProtectionDomain)>;NETWORK_INFORMATION;SOURCE
<java.lang.ClassLoader: java.lang.Class defineClass(java.lang.String,java.nio.ByteBuffer,java.security.ProtectionDomain)>;NETWORK_INFORMATION;SOURCE
<java.lang.ClassLoader: java.lang.Class findClass(java.lang.String)>;NETWORK_INFORMATION;SOURCE
<java.lang.ClassLoader: java.lang.Class findLoadedClass(java.lang.String)>;NETWORK_INFORMATION;SOURCE
<java.lang.ClassLoader: java.lang.Package getPackage(java.lang.String)>;NETWORK_INFORMATION;SOURCE
<java.lang.ClassLoader: java.lang.Package[] getPackages()>;NETWORK_INFORMATION;SOURCE
<java.lang.ClassLoader: java.lang.String findLibrary(java.lang.String)>;NETWORK_INFORMATION;SOURCE
<java.lang.ClassLoader: java.net.URL findResource(java.lang.String)>;NETWORK_INFORMATION;SOURCE
<java.lang.ClassLoader: java.net.URL getSystemResource(java.lang.String)>;NETWORK_INFORMATION;SOURCE
<java.lang.ClassLoader: java.util.Enumeration findResources(java.lang.String)>;NETWORK_INFORMATION;SOURCE
<java.lang.SecurityManager: java.lang.Object getSecurityContext()>;FILE_INFORMATION;SOURCE
<java.lang.VMClassLoader: java.net.URL getResource(java.lang.String)>;NETWORK_INFORMATION;SOURCE
<java.lang.VMClassLoader: java.util.List getResources(java.lang.String)>;NETWORK_INFORMATION;SOURCE
<java.net.URL: java.net.URLConnection openConnection()>;NETWORK;SOURCE
<java.security.Provider$Service: java.lang.String getAlgorithm()>;NETWORK_INFORMATION;SOURCE
<java.security.Provider$Service: java.lang.String getAttribute(java.lang.String)>;NETWORK_INFORMATION;SOURCE
<java.security.Provider$Service: java.lang.String getClassName()>;NETWORK_INFORMATION;SOURCE
<java.security.Provider$Service: java.lang.String getType()>;NETWORK_INFORMATION;SOURCE
<java.security.Provider$Service: java.util.List getAliases()>;NETWORK_INFORMATION;SOURCE
<java.util.Calendar: int get(int)>;CALENDAR_INFORMATION;SOURCE
<java.util.Calendar: int getActualMaximum(int)>;CALENDAR_INFORMATION;SOURCE
<java.util.Calendar: int getActualMinimum(int)>;CALENDAR_INFORMATION;SOURCE
<java.util.Calendar: int getFirstDayOfWeek()>;CALENDAR_INFORMATION;SOURCE
<java.util.Calendar: int getMinimalDaysInFirstWeek()>;CALENDAR_INFORMATION;SOURCE
<java.util.Calendar: java.lang.String getDisplayName(int,int,java.util.Locale)>;CALENDAR_INFORMATION;SOURCE
<java.util.Calendar: java.lang.String toString()>;CALENDAR_INFORMATION;SOURCE
<java.util.Calendar: java.util.Date getTime()>;CALENDAR_INFORMATION;SOURCE
<java.util.Calendar: java.util.Locale[] getAvailableLocales()>;CALENDAR_INFORMATION;SOURCE
<java.util.Calendar: java.util.Map getDisplayNames(int,int,java.util.Locale)>;CALENDAR_INFORMATION;SOURCE
<java.util.Calendar: java.util.TimeZone getTimeZone()>;CALENDAR_INFORMATION;SOURCE
<java.util.Calendar: long getTimeInMillis()>;CALENDAR_INFORMATION;SOURCE
<java.util.GregorianCalendar: int getActualMaximum(int)>;CALENDAR_INFORMATION;SOURCE
<java.util.GregorianCalendar: int getActualMinimum(int)>;CALENDAR_INFORMATION;SOURCE
<java.util.GregorianCalendar: int getGreatestMinimum(int)>;CALENDAR_INFORMATION;SOURCE
<java.util.GregorianCalendar: int getLeastMaximum(int)>;CALENDAR_INFORMATION;SOURCE
<java.util.GregorianCalendar: int getMaximum(int)>;CALENDAR_INFORMATION;SOURCE
<java.util.GregorianCalendar: int getMinimum(int)>;CALENDAR_INFORMATION;SOURCE
<java.util.GregorianCalendar: java.util.Date getGregorianChange()>;CALENDAR_INFORMATION;SOURCE
<javax.net.ssl.DefaultSSLServerSocketFactory: java.lang.String[] getDefaultCipherSuites()>;NETWORK_INFORMATION;SOURCE
<javax.net.ssl.DefaultSSLServerSocketFactory: java.lang.String[] getSupportedCipherSuites()>;NETWORK_INFORMATION;SOURCE
<javax.net.ssl.DefaultSSLSocketFactory: java.lang.String[] getDefaultCipherSuites()>;NETWORK_INFORMATION;SOURCE
<javax.net.ssl.DefaultSSLSocketFactory: java.lang.String[] getSupportedCipherSuites()>;NETWORK_INFORMATION;SOURCE
<javax.net.ssl.HandshakeCompletedEvent: java.lang.String getCipherSuite()>;NETWORK_INFORMATION;SOURCE
<javax.net.ssl.HandshakeCompletedEvent: java.security.Principal getLocalPrincipal()>;NETWORK_INFORMATION;SOURCE
<javax.net.ssl.HandshakeCompletedEvent: java.security.Principal getPeerPrincipal()>;NETWORK_INFORMATION;SOURCE
<javax.net.ssl.HandshakeCompletedEvent: java.security.cert.Certificate[] getLocalCertificates()>;NETWORK_INFORMATION;SOURCE
<javax.net.ssl.HandshakeCompletedEvent: java.security.cert.Certificate[] getPeerCertificates()>;NETWORK_INFORMATION;SOURCE
<javax.net.ssl.HandshakeCompletedEvent: javax.net.ssl.SSLSession getSession()>;NETWORK_INFORMATION;SOURCE
<javax.net.ssl.HandshakeCompletedEvent: javax.net.ssl.SSLSocket getSocket()>;NETWORK_INFORMATION;SOURCE
<javax.net.ssl.HandshakeCompletedEvent: javax.security.cert.X509Certificate[] getPeerCertificateChain()>;NETWORK_INFORMATION;SOURCE
<javax.net.ssl.HttpsURLConnection: java.security.Principal getLocalPrincipal()>;NETWORK_INFORMATION;SOURCE
<javax.net.ssl.HttpsURLConnection: java.security.Principal getPeerPrincipal()>;NETWORK_INFORMATION;SOURCE
<javax.net.ssl.HttpsURLConnection: javax.net.ssl.HostnameVerifier getDefaultHostnameVerifier()>;NETWORK_INFORMATION;SOURCE
<javax.net.ssl.HttpsURLConnection: javax.net.ssl.HostnameVerifier getHostnameVerifier()>;NETWORK_INFORMATION;SOURCE
<javax.net.ssl.HttpsURLConnection: javax.net.ssl.SSLSocketFactory getDefaultSSLSocketFactory()>;NETWORK_INFORMATION;SOURCE
<javax.net.ssl.HttpsURLConnection: javax.net.ssl.SSLSocketFactory getSSLSocketFactory()>;NETWORK_INFORMATION;SOURCE
<javax.net.ssl.KeyManagerFactory: java.lang.String getAlgorithm()>;NETWORK_INFORMATION;SOURCE
<javax.net.ssl.KeyManagerFactory: java.lang.String getDefaultAlgorithm()>;NETWORK_INFORMATION;SOURCE
<javax.net.ssl.KeyManagerFactory: java.security.Provider getProvider()>;NETWORK_INFORMATION;SOURCE
<javax.net.ssl.SSLContext: java.lang.String getProtocol()>;NETWORK_INFORMATION;SOURCE
<javax.net.ssl.SSLContext: java.security.Provider getProvider()>;NETWORK_INFORMATION;SOURCE
<javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getDefault()>;NETWORK_INFORMATION;SOURCE
<javax.net.ssl.SSLContext: javax.net.ssl.SSLParameters getDefaultSSLParameters()>;NETWORK_INFORMATION;SOURCE
<javax.net.ssl.SSLContext: javax.net.ssl.SSLParameters getSupportedSSLParameters()>;NETWORK_INFORMATION;SOURCE
<javax.net.ssl.SSLContext: javax.net.ssl.SSLServerSocketFactory getServerSocketFactory()>;NETWORK_INFORMATION;SOURCE
<javax.net.ssl.SSLContext: javax.net.ssl.SSLSessionContext getClientSessionContext()>;NETWORK_INFORMATION;SOURCE
<javax.net.ssl.SSLContext: javax.net.ssl.SSLSessionContext getServerSessionContext()>;NETWORK_INFORMATION;SOURCE
<javax.net.ssl.SSLContextSpi: javax.net.ssl.SSLParameters engineGetDefaultSSLParameters()>;NETWORK_INFORMATION;SOURCE
<javax.net.ssl.SSLContextSpi: javax.net.ssl.SSLParameters engineGetSupportedSSLParameters()>;NETWORK_INFORMATION;SOURCE
<javax.net.ssl.SSLEngine: int getPeerPort()>;NETWORK_INFORMATION;SOURCE
<javax.net.ssl.SSLEngine: java.lang.String getPeerHost()>;NETWORK_INFORMATION;SOURCE
<javax.net.ssl.SSLEngine: javax.net.ssl.SSLEngineResult unwrap(java.nio.ByteBuffer,java.nio.ByteBuffer)>;NETWORK_INFORMATION;SOURCE
<javax.net.ssl.SSLEngine: javax.net.ssl.SSLEngineResult unwrap(java.nio.ByteBuffer,java.nio.ByteBuffer[])>;NETWORK_INFORMATION;SOURCE
<javax.net.ssl.SSLEngine: javax.net.ssl.SSLEngineResult wrap(java.nio.ByteBuffer,java.nio.ByteBuffer)>;NETWORK_INFORMATION;SOURCE
<javax.net.ssl.SSLEngine: javax.net.ssl.SSLEngineResult wrap(java.nio.ByteBuffer[],java.nio.ByteBuffer)>;NETWORK_INFORMATION;SOURCE
<javax.net.ssl.SSLEngine: javax.net.ssl.SSLParameters getSSLParameters()>;NETWORK_INFORMATION;SOURCE
<javax.net.ssl.SSLParameters: boolean getNeedClientAuth()>;NETWORK_INFORMATION;SOURCE
<javax.net.ssl.SSLParameters: boolean getWantClientAuth()>;NETWORK_INFORMATION;SOURCE
<javax.net.ssl.SSLParameters: java.lang.String[] getCipherSuites()>;NETWORK_INFORMATION;SOURCE
<javax.net.ssl.SSLParameters: java.lang.String[] getProtocols()>;NETWORK_INFORMATION;SOURCE
<javax.net.ssl.SSLServerSocketFactory: javax.net.ServerSocketFactory getDefault()>;NETWORK_INFORMATION;SOURCE
<javax.net.ssl.SSLSessionBindingEvent: java.lang.String getName()>;NETWORK_INFORMATION;SOURCE
<javax.net.ssl.SSLSessionBindingEvent: javax.net.ssl.SSLSession getSession()>;NETWORK_INFORMATION;SOURCE
<javax.net.ssl.SSLSocket: javax.net.ssl.SSLParameters getSSLParameters()>;NETWORK_INFORMATION;SOURCE
<javax.net.ssl.TrustManagerFactory: java.lang.String getAlgorithm()>;NETWORK_INFORMATION;SOURCE
<javax.net.ssl.TrustManagerFactory: java.security.Provider getProvider()>;NETWORK_INFORMATION;SOURCE
<javax.net.ssl.X509ExtendedKeyManager: java.lang.String chooseEngineClientAlias(java.lang.String[],java.security.Principal[],javax.net.ssl.SSLEngine)>;NETWORK_INFORMATION;SOURCE
<javax.net.ssl.X509ExtendedKeyManager: java.lang.String chooseEngineServerAlias(java.lang.String,java.security.Principal[],javax.net.ssl.SSLEngine)>;NETWORK_INFORMATION;SOURCE
<libcore.net.http.RequestHeaders: java.lang.String getConnection()>;NETWORK_INFORMATION;SOURCE
<libcore.net.http.RequestHeaders: java.net.URI getUri()>;FILE_INFORMATION;SOURCE
<libcore.net.http.ResponseHeaders: java.lang.String getConnection()>;NETWORK_INFORMATION;SOURCE
<libcore.net.http.ResponseHeaders: java.net.URI getUri()>;FILE_INFORMATION;SOURCE
<org.apache.harmony.xml.ExpatAttributes: int getIndex(java.lang.String)>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xml.ExpatAttributes: int getIndex(java.lang.String,java.lang.String)>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xml.ExpatAttributes: java.lang.String getLocalName(int)>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xml.ExpatAttributes: java.lang.String getQName(int)>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xml.ExpatAttributes: java.lang.String getType(int)>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xml.ExpatAttributes: java.lang.String getType(java.lang.String)>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xml.ExpatAttributes: java.lang.String getType(java.lang.String,java.lang.String)>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xml.ExpatAttributes: java.lang.String getURI(int)>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xml.ExpatAttributes: java.lang.String getValue(int)>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xml.ExpatAttributes: java.lang.String getValue(java.lang.String)>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xml.ExpatAttributes: java.lang.String getValue(java.lang.String,java.lang.String)>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xml.ExpatParser$ClonedAttributes: int getLength()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xml.ExpatParser$ClonedAttributes: int getParserPointer()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xml.ExpatParser$ClonedAttributes: int getPointer()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xml.ExpatParser$CurrentAttributes: int getLength()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xml.ExpatParser$CurrentAttributes: int getParserPointer()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xml.ExpatParser$CurrentAttributes: int getPointer()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xml.ExpatParser$ExpatLocator: int getColumnNumber()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xml.ExpatParser$ExpatLocator: int getLineNumber()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xml.ExpatReader: java.lang.Object getProperty(java.lang.String)>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xml.ExpatReader: org.xml.sax.ContentHandler getContentHandler()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xml.ExpatReader: org.xml.sax.DTDHandler getDTDHandler()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xml.ExpatReader: org.xml.sax.EntityResolver getEntityResolver()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xml.ExpatReader: org.xml.sax.ErrorHandler getErrorHandler()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xml.ExpatReader: org.xml.sax.ext.LexicalHandler getLexicalHandler()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xml.dom.AttrImpl: boolean getSpecified()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xml.dom.AttrImpl: java.lang.String getLocalName()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xml.dom.AttrImpl: java.lang.String getName()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xml.dom.AttrImpl: java.lang.String getNamespaceURI()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xml.dom.AttrImpl: java.lang.String getNodeName()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xml.dom.AttrImpl: java.lang.String getNodeValue()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xml.dom.AttrImpl: java.lang.String getPrefix()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xml.dom.AttrImpl: java.lang.String getValue()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xml.dom.AttrImpl: org.w3c.dom.Element getOwnerElement()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xml.dom.AttrImpl: org.w3c.dom.TypeInfo getSchemaTypeInfo()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xml.dom.AttrImpl: short getNodeType()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xml.dom.CDATASectionImpl: java.lang.String getNodeName()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xml.dom.CDATASectionImpl: short getNodeType()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xml.dom.CharacterDataImpl: int getLength()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xml.dom.CharacterDataImpl: java.lang.String getData()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xml.dom.CharacterDataImpl: java.lang.String getNodeValue()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xml.dom.CommentImpl: java.lang.String getNodeName()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xml.dom.CommentImpl: short getNodeType()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xml.dom.DOMConfigurationImpl$10: java.lang.Object get(org.apache.harmony.xml.dom.DOMConfigurationImpl)>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xml.dom.DOMConfigurationImpl$11: java.lang.Object get(org.apache.harmony.xml.dom.DOMConfigurationImpl)>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xml.dom.DOMConfigurationImpl$12: java.lang.Object get(org.apache.harmony.xml.dom.DOMConfigurationImpl)>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xml.dom.DOMConfigurationImpl$2: java.lang.Object get(org.apache.harmony.xml.dom.DOMConfigurationImpl)>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xml.dom.DOMConfigurationImpl$3: java.lang.Object get(org.apache.harmony.xml.dom.DOMConfigurationImpl)>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xml.dom.DOMConfigurationImpl$4: java.lang.Object get(org.apache.harmony.xml.dom.DOMConfigurationImpl)>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xml.dom.DOMConfigurationImpl$5: java.lang.Object get(org.apache.harmony.xml.dom.DOMConfigurationImpl)>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xml.dom.DOMConfigurationImpl$6: java.lang.Object get(org.apache.harmony.xml.dom.DOMConfigurationImpl)>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xml.dom.DOMConfigurationImpl$7: java.lang.Object get(org.apache.harmony.xml.dom.DOMConfigurationImpl)>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xml.dom.DOMConfigurationImpl$8: java.lang.Object get(org.apache.harmony.xml.dom.DOMConfigurationImpl)>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xml.dom.DOMConfigurationImpl$9: java.lang.Object get(org.apache.harmony.xml.dom.DOMConfigurationImpl)>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xml.dom.DOMConfigurationImpl$FixedParameter: java.lang.Object get(org.apache.harmony.xml.dom.DOMConfigurationImpl)>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xml.dom.DOMConfigurationImpl: java.lang.Object getParameter(java.lang.String)>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xml.dom.DOMConfigurationImpl: org.w3c.dom.DOMStringList getParameterNames()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xml.dom.DOMErrorImpl$1: java.lang.String getUri()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xml.dom.DOMErrorImpl$1: org.w3c.dom.Node getRelatedNode()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xml.dom.DOMErrorImpl: java.lang.Object getRelatedData()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xml.dom.DOMErrorImpl: java.lang.Object getRelatedException()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xml.dom.DOMErrorImpl: java.lang.String getMessage()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xml.dom.DOMErrorImpl: java.lang.String getType()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xml.dom.DOMErrorImpl: org.w3c.dom.DOMLocator getLocation()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xml.dom.DOMErrorImpl: short getSeverity()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xml.dom.DOMImplementationImpl: java.lang.Object getFeature(java.lang.String,java.lang.String)>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xml.dom.DOMImplementationImpl: org.apache.harmony.xml.dom.DOMImplementationImpl getInstance()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xml.dom.DocumentFragmentImpl: java.lang.String getNodeName()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xml.dom.DocumentFragmentImpl: short getNodeType()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xml.dom.DocumentImpl: boolean getStrictErrorChecking()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xml.dom.DocumentImpl: boolean getXmlStandalone()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xml.dom.DocumentImpl: java.lang.String getDocumentURI()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xml.dom.DocumentImpl: java.lang.String getInputEncoding()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xml.dom.DocumentImpl: java.lang.String getNodeName()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xml.dom.DocumentImpl: java.lang.String getTextContent()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xml.dom.DocumentImpl: java.lang.String getXmlEncoding()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xml.dom.DocumentImpl: java.lang.String getXmlVersion()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xml.dom.DocumentImpl: java.util.Map getUserDataMap(org.apache.harmony.xml.dom.NodeImpl)>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xml.dom.DocumentImpl: java.util.Map getUserDataMapForRead(org.apache.harmony.xml.dom.NodeImpl)>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xml.dom.DocumentImpl: org.w3c.dom.DOMConfiguration getDomConfig()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xml.dom.DocumentImpl: org.w3c.dom.DOMImplementation getImplementation()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xml.dom.DocumentImpl: org.w3c.dom.DocumentType getDoctype()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xml.dom.DocumentImpl: org.w3c.dom.Element getDocumentElement()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xml.dom.DocumentImpl: org.w3c.dom.NodeList getElementsByTagName(java.lang.String)>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xml.dom.DocumentImpl: org.w3c.dom.NodeList getElementsByTagNameNS(java.lang.String,java.lang.String)>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xml.dom.DocumentImpl: short getNodeType()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xml.dom.DocumentTypeImpl: java.lang.String getInternalSubset()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xml.dom.DocumentTypeImpl: java.lang.String getName()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xml.dom.DocumentTypeImpl: java.lang.String getNodeName()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xml.dom.DocumentTypeImpl: java.lang.String getTextContent()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xml.dom.DocumentTypeImpl: org.w3c.dom.NamedNodeMap getEntities()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xml.dom.DocumentTypeImpl: org.w3c.dom.NamedNodeMap getNotations()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xml.dom.DocumentTypeImpl: short getNodeType()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xml.dom.ElementImpl$ElementAttrNamedNodeMapImpl: int getLength()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xml.dom.ElementImpl$ElementAttrNamedNodeMapImpl: org.w3c.dom.Node getNamedItem(java.lang.String)>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xml.dom.ElementImpl$ElementAttrNamedNodeMapImpl: org.w3c.dom.Node getNamedItemNS(java.lang.String,java.lang.String)>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xml.dom.ElementImpl: java.lang.String getAttribute(java.lang.String)>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xml.dom.ElementImpl: java.lang.String getAttributeNS(java.lang.String,java.lang.String)>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xml.dom.ElementImpl: java.lang.String getLocalName()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xml.dom.ElementImpl: java.lang.String getNamespaceURI()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xml.dom.ElementImpl: java.lang.String getNodeName()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xml.dom.ElementImpl: java.lang.String getPrefix()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xml.dom.ElementImpl: java.lang.String getTagName()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xml.dom.ElementImpl: org.apache.harmony.xml.dom.AttrImpl getAttributeNode(java.lang.String)>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xml.dom.ElementImpl: org.apache.harmony.xml.dom.AttrImpl getAttributeNodeNS(java.lang.String,java.lang.String)>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xml.dom.ElementImpl: org.w3c.dom.NamedNodeMap getAttributes()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xml.dom.ElementImpl: org.w3c.dom.NodeList getElementsByTagName(java.lang.String)>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xml.dom.ElementImpl: org.w3c.dom.NodeList getElementsByTagNameNS(java.lang.String,java.lang.String)>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xml.dom.ElementImpl: org.w3c.dom.TypeInfo getSchemaTypeInfo()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xml.dom.ElementImpl: short getNodeType()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xml.dom.EntityReferenceImpl: java.lang.String getNodeName()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xml.dom.EntityReferenceImpl: short getNodeType()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xml.dom.InnerNodeImpl: java.lang.String getTextContent()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xml.dom.InnerNodeImpl: org.w3c.dom.Node getFirstChild()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xml.dom.InnerNodeImpl: org.w3c.dom.Node getLastChild()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xml.dom.InnerNodeImpl: org.w3c.dom.Node getNextSibling()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xml.dom.InnerNodeImpl: org.w3c.dom.Node insertChildAt(org.w3c.dom.Node,int)>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xml.dom.InnerNodeImpl: org.w3c.dom.NodeList getChildNodes()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xml.dom.InnerNodeImpl: void getElementsByTagName(org.apache.harmony.xml.dom.NodeListImpl,java.lang.String)>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xml.dom.InnerNodeImpl: void getElementsByTagNameNS(org.apache.harmony.xml.dom.NodeListImpl,java.lang.String,java.lang.String)>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xml.dom.InnerNodeImpl: void getTextContent(java.lang.StringBuilder)>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xml.dom.LeafNodeImpl: org.w3c.dom.Node getNextSibling()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xml.dom.LeafNodeImpl: org.w3c.dom.Node getParentNode()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xml.dom.LeafNodeImpl: org.w3c.dom.Node getPreviousSibling()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xml.dom.NodeImpl$1: java.lang.String getTypeName()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xml.dom.NodeImpl$1: java.lang.String getTypeNamespace()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xml.dom.NodeImpl: java.lang.Object getFeature(java.lang.String,java.lang.String)>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xml.dom.NodeImpl: java.lang.Object getUserData(java.lang.String)>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xml.dom.NodeImpl: java.lang.String getBaseURI()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xml.dom.NodeImpl: java.lang.String getLocalName()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xml.dom.NodeImpl: java.lang.String getNamespaceURI()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xml.dom.NodeImpl: java.lang.String getNodeName()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xml.dom.NodeImpl: java.lang.String getNodeValue()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xml.dom.NodeImpl: java.lang.String getPrefix()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xml.dom.NodeImpl: java.lang.String getTextContent()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xml.dom.NodeImpl: org.w3c.dom.Document getOwnerDocument()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xml.dom.NodeImpl: org.w3c.dom.NamedNodeMap getAttributes()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xml.dom.NodeImpl: org.w3c.dom.Node getFirstChild()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xml.dom.NodeImpl: org.w3c.dom.Node getLastChild()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xml.dom.NodeImpl: org.w3c.dom.Node getNextSibling()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xml.dom.NodeImpl: org.w3c.dom.Node getParentNode()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xml.dom.NodeImpl: org.w3c.dom.Node getPreviousSibling()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xml.dom.NodeImpl: org.w3c.dom.NodeList getChildNodes()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xml.dom.NodeImpl: void getTextContent(java.lang.StringBuilder)>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xml.dom.NodeListImpl: int getLength()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xml.dom.ProcessingInstructionImpl: java.lang.String getData()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xml.dom.ProcessingInstructionImpl: java.lang.String getNodeName()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xml.dom.ProcessingInstructionImpl: java.lang.String getNodeValue()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xml.dom.ProcessingInstructionImpl: java.lang.String getTarget()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xml.dom.ProcessingInstructionImpl: short getNodeType()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xml.dom.TextImpl: java.lang.String getNodeName()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xml.dom.TextImpl: java.lang.String getWholeText()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xml.dom.TextImpl: short getNodeType()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xml.parsers.DocumentBuilderFactoryImpl: boolean getFeature(java.lang.String)>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xml.parsers.DocumentBuilderFactoryImpl: java.lang.Object getAttribute(java.lang.String)>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xml.parsers.DocumentBuilderImpl: org.w3c.dom.DOMImplementation getDOMImplementation()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xml.parsers.DocumentBuilderImpl: org.w3c.dom.Document newDocument()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xnet.provider.jsse.DefaultSSLContextImpl: javax.net.ssl.KeyManager[] getKeyManagers()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xnet.provider.jsse.DefaultSSLContextImpl: javax.net.ssl.TrustManager[] getTrustManagers()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketFactoryImpl: java.lang.String[] getDefaultCipherSuites()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketFactoryImpl: java.lang.String[] getSupportedCipherSuites()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl: boolean getEnableSessionCreation()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl: boolean getNeedClientAuth()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl: boolean getUseClientMode()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl: boolean getWantClientAuth()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl: java.lang.String[] getEnabledCipherSuites()>;SYSTEM_SETTINGS;SOURCE
<org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl: java.lang.String[] getEnabledProtocols()>;SYSTEM_SETTINGS;SOURCE
<org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl: java.lang.String[] getSupportedCipherSuites()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl: java.lang.String[] getSupportedProtocols()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: byte[] getEncoded()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: byte[] getId()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: int getApplicationBufferSize()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: int getPacketBufferSize()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: int getPeerPort()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: java.lang.Object getValue(java.lang.String)>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: java.lang.String getCipherSuite()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: java.lang.String getPeerHost()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: java.lang.String getProtocol()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: java.lang.String[] getValueNames()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: java.security.Principal getLocalPrincipal()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: java.security.Principal getPeerPrincipal()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: java.security.cert.Certificate[] getLocalCertificates()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: java.security.cert.Certificate[] getPeerCertificates()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: javax.net.ssl.SSLSessionContext getSessionContext()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: javax.security.cert.X509Certificate[] getPeerCertificateChain()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: long getCreationTime()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: long getLastAccessedTime()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketFactoryImpl: java.lang.String[] getDefaultCipherSuites()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketFactoryImpl: java.lang.String[] getSupportedCipherSuites()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl: boolean getEnableSessionCreation()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl: boolean getNeedClientAuth()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl: boolean getUseClientMode()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl: boolean getWantClientAuth()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl: int getSoTimeout()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl: java.io.FileDescriptor getFileDescriptor$()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl: java.io.InputStream getInputStream()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl: java.io.OutputStream getOutputStream()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl: java.lang.String[] getEnabledCipherSuites()>;SYSTEM_SETTINGS;SOURCE
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl: java.lang.String[] getEnabledProtocols()>;SYSTEM_SETTINGS;SOURCE
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl: java.lang.String[] getSupportedCipherSuites()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl: java.lang.String[] getSupportedProtocols()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl: javax.net.ssl.SSLSession getSession()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: boolean getKeepAlive()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: boolean getOOBInline()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: boolean getReuseAddress()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: boolean getTcpNoDelay()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: int getLocalPort()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: int getPort()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: int getReceiveBufferSize()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: int getSendBufferSize()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: int getSoLinger()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: int getSoTimeout()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: int getTrafficClass()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: java.net.InetAddress getInetAddress()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: java.net.InetAddress getLocalAddress()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: java.net.SocketAddress getLocalSocketAddress()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: java.net.SocketAddress getRemoteSocketAddress()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xnet.provider.jsse.SSLEngineDataStream: byte[] getData(int)>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: boolean getEnableSessionCreation()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: boolean getNeedClientAuth()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: boolean getUseClientMode()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: boolean getWantClientAuth()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: java.lang.Runnable getDelegatedTask()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: java.lang.String[] getEnabledCipherSuites()>;SYSTEM_SETTINGS;SOURCE
<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: java.lang.String[] getEnabledProtocols()>;SYSTEM_SETTINGS;SOURCE
<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: java.lang.String[] getSupportedCipherSuites()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: java.lang.String[] getSupportedProtocols()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: javax.net.ssl.SSLSession getSession()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xnet.provider.jsse.SSLInputStream: byte[] read(int)>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xnet.provider.jsse.SSLInputStream: long readUint32()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xnet.provider.jsse.SSLInputStream: long readUint64()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xnet.provider.jsse.SSLParametersImpl: boolean getEnableSessionCreation()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xnet.provider.jsse.SSLParametersImpl: boolean getNeedClientAuth()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xnet.provider.jsse.SSLParametersImpl: boolean getUseClientMode()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xnet.provider.jsse.SSLParametersImpl: boolean getWantClientAuth()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xnet.provider.jsse.SSLParametersImpl: java.lang.String[] getEnabledCipherSuites()>;SYSTEM_SETTINGS;SOURCE
<org.apache.harmony.xnet.provider.jsse.SSLParametersImpl: java.lang.String[] getEnabledProtocols()>;SYSTEM_SETTINGS;SOURCE
<org.apache.harmony.xnet.provider.jsse.SSLParametersImpl: java.security.SecureRandom getSecureRandom()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xnet.provider.jsse.SSLParametersImpl: java.security.SecureRandom getSecureRandomMember()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xnet.provider.jsse.SSLParametersImpl: javax.net.ssl.X509KeyManager getKeyManager()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xnet.provider.jsse.SSLParametersImpl: javax.net.ssl.X509TrustManager getDefaultTrustManager()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xnet.provider.jsse.SSLParametersImpl: javax.net.ssl.X509TrustManager getTrustManager()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xnet.provider.jsse.SSLParametersImpl: org.apache.harmony.xnet.provider.jsse.CipherSuite[] getEnabledCipherSuitesMember()>;SYSTEM_SETTINGS;SOURCE
<org.apache.harmony.xnet.provider.jsse.SSLParametersImpl: org.apache.harmony.xnet.provider.jsse.ClientSessionContext getClientSessionContext()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xnet.provider.jsse.SSLParametersImpl: org.apache.harmony.xnet.provider.jsse.SSLParametersImpl getDefault()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xnet.provider.jsse.SSLParametersImpl: org.apache.harmony.xnet.provider.jsse.ServerSessionContext getServerSessionContext()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xnet.provider.jsse.SSLRecordProtocol: byte[] getChangeCipherSpecMesage(org.apache.harmony.xnet.provider.jsse.SSLSessionImpl)>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xnet.provider.jsse.SSLRecordProtocol: byte[] wrap(byte,org.apache.harmony.xnet.provider.jsse.DataStream)>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xnet.provider.jsse.SSLRecordProtocol: int getDataSize(int)>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xnet.provider.jsse.SSLRecordProtocol: int getMinRecordSize()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xnet.provider.jsse.SSLRecordProtocol: int getRecordSize(int)>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xnet.provider.jsse.SSLRecordProtocol: org.apache.harmony.xnet.provider.jsse.SSLSessionImpl getSession()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xnet.provider.jsse.SSLServerSocketFactoryImpl: java.lang.String[] getDefaultCipherSuites()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xnet.provider.jsse.SSLServerSocketFactoryImpl: java.lang.String[] getSupportedCipherSuites()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xnet.provider.jsse.SSLServerSocketImpl: boolean getEnableSessionCreation()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xnet.provider.jsse.SSLServerSocketImpl: boolean getNeedClientAuth()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xnet.provider.jsse.SSLServerSocketImpl: boolean getUseClientMode()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xnet.provider.jsse.SSLServerSocketImpl: boolean getWantClientAuth()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xnet.provider.jsse.SSLServerSocketImpl: java.lang.String[] getEnabledCipherSuites()>;SYSTEM_SETTINGS;SOURCE
<org.apache.harmony.xnet.provider.jsse.SSLServerSocketImpl: java.lang.String[] getEnabledProtocols()>;SYSTEM_SETTINGS;SOURCE
<org.apache.harmony.xnet.provider.jsse.SSLServerSocketImpl: java.lang.String[] getSupportedCipherSuites()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xnet.provider.jsse.SSLServerSocketImpl: java.lang.String[] getSupportedProtocols()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: byte[] getId()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: int getApplicationBufferSize()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: int getPacketBufferSize()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: int getPeerPort()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: java.lang.Object getValue(java.lang.String)>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: java.lang.String getCipherSuite()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: java.lang.String getPeerHost()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: java.lang.String getProtocol()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: java.lang.String[] getValueNames()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: java.security.Principal getLocalPrincipal()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: java.security.Principal getPeerPrincipal()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: java.security.cert.Certificate[] getLocalCertificates()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: java.security.cert.Certificate[] getPeerCertificates()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: javax.net.ssl.SSLSessionContext getSessionContext()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: javax.security.cert.X509Certificate[] getPeerCertificateChain()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: long getCreationTime()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: long getLastAccessedTime()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xnet.provider.jsse.SSLSocketFactoryImpl: java.lang.String[] getDefaultCipherSuites()>;SYSTEM_SETTINGS;SOURCE
<org.apache.harmony.xnet.provider.jsse.SSLSocketFactoryImpl: java.lang.String[] getSupportedCipherSuites()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xnet.provider.jsse.SSLSocketImpl: boolean getEnableSessionCreation()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xnet.provider.jsse.SSLSocketImpl: boolean getNeedClientAuth()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xnet.provider.jsse.SSLSocketImpl: boolean getUseClientMode()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xnet.provider.jsse.SSLSocketImpl: boolean getWantClientAuth()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xnet.provider.jsse.SSLSocketImpl: java.io.InputStream getInputStream()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xnet.provider.jsse.SSLSocketImpl: java.io.OutputStream getOutputStream()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xnet.provider.jsse.SSLSocketImpl: java.lang.String[] getEnabledCipherSuites()>;SYSTEM_SETTINGS;SOURCE
<org.apache.harmony.xnet.provider.jsse.SSLSocketImpl: java.lang.String[] getEnabledProtocols()>;SYSTEM_SETTINGS;SOURCE
<org.apache.harmony.xnet.provider.jsse.SSLSocketImpl: java.lang.String[] getSupportedCipherSuites()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xnet.provider.jsse.SSLSocketImpl: java.lang.String[] getSupportedProtocols()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xnet.provider.jsse.SSLSocketImpl: javax.net.ssl.SSLSession getSession()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper: boolean getKeepAlive()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper: boolean getOOBInline()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper: boolean getReuseAddress()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper: boolean getTcpNoDelay()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper: int getLocalPort()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper: int getPort()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper: int getReceiveBufferSize()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper: int getSendBufferSize()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper: int getSoLinger()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper: int getSoTimeout()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper: int getTrafficClass()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper: java.io.FileDescriptor getFileDescriptor$()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper: java.net.InetAddress getInetAddress()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper: java.net.InetAddress getLocalAddress()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper: java.net.SocketAddress getLocalSocketAddress()>;NETWORK_INFORMATION;SOURCE
<org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper: java.net.SocketAddress getRemoteSocketAddress()>;NETWORK_INFORMATION;SOURCE
<org.apache.http.HttpHost: java.lang.String getHostName()>;NETWORK_INFORMATION;SOURCE
<org.apache.http.auth.AuthScope: java.lang.String getHost()>;NETWORK_INFORMATION;SOURCE
<org.apache.http.client.HttpClient: java.lang.Object execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.client.ResponseHandler)>;NETWORK;SOURCE
<org.apache.http.client.HttpClient: java.lang.Object execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.client.ResponseHandler,org.apache.http.protocol.HttpContext)>;NETWORK;SOURCE
<org.apache.http.client.HttpClient: java.lang.Object execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.client.ResponseHandler)>;NETWORK;SOURCE
<org.apache.http.client.HttpClient: java.lang.Object execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.client.ResponseHandler,org.apache.http.protocol.HttpContext)>;NETWORK;SOURCE
<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest)>;NETWORK;SOURCE
<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>;NETWORK;SOURCE
<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)>;NETWORK;SOURCE
<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.protocol.HttpContext)>;NETWORK;SOURCE
<org.apache.http.client.methods.HttpRequestBase: java.net.URI getURI()>;FILE_INFORMATION;SOURCE
<org.apache.http.conn.ssl.AbstractVerifier: java.lang.String[] getCNs(java.security.cert.X509Certificate)>;NETWORK_INFORMATION;SOURCE
<org.apache.http.conn.ssl.AbstractVerifier: java.lang.String[] getDNSSubjectAlts(java.security.cert.X509Certificate)>;NETWORK_INFORMATION;SOURCE
<org.apache.http.conn.ssl.SSLSocketFactory: java.net.Socket createSocket()>;NETWORK_INFORMATION;SOURCE
<org.apache.http.conn.ssl.SSLSocketFactory: org.apache.http.conn.ssl.X509HostnameVerifier getHostnameVerifier()>;NETWORK_INFORMATION;SOURCE
<org.apache.http.cookie.CookieOrigin: java.lang.String getHost()>;NETWORK_INFORMATION;SOURCE
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.ConnectionReuseStrategy getConnectionReuseStrategy()>;NETWORK_INFORMATION;SOURCE
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest)>;NETWORK;SOURCE
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>;NETWORK;SOURCE
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)>;NETWORK;SOURCE
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.protocol.HttpContext)>;NETWORK;SOURCE
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.conn.ConnectionKeepAliveStrategy getConnectionKeepAliveStrategy()>;NETWORK_INFORMATION;SOURCE
<org.apache.http.impl.client.DefaultHttpClient: java.lang.Object execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.client.ResponseHandler)>;NETWORK;SOURCE
<org.apache.http.impl.client.DefaultHttpClient: java.lang.Object execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.client.ResponseHandler,org.apache.http.protocol.HttpContext)>;NETWORK;SOURCE
<org.apache.http.impl.client.DefaultHttpClient: java.lang.Object execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.client.ResponseHandler)>;NETWORK;SOURCE
<org.apache.http.impl.client.DefaultHttpClient: java.lang.Object execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.client.ResponseHandler,org.apache.http.protocol.HttpContext)>;NETWORK;SOURCE
<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest)>;NETWORK;SOURCE
<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>;NETWORK;SOURCE
<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)>;NETWORK;SOURCE
<org.apache.http.impl.client.RequestWrapper: java.net.URI getURI()>;FILE_INFORMATION;SOURCE
<org.apache.http.impl.conn.AbstractClientConnAdapter: org.apache.http.conn.OperatedClientConnection getWrappedConnection()>;NETWORK_INFORMATION;SOURCE
<org.apache.http.impl.conn.ProxySelectorRoutePlanner: java.lang.String getHost(java.net.InetSocketAddress)>;NETWORK_INFORMATION;SOURCE
<org.apache.http.impl.conn.SingleClientConnManager: org.apache.http.conn.ClientConnectionOperator createConnectionOperator(org.apache.http.conn.scheme.SchemeRegistry)>;NETWORK_INFORMATION;SOURCE
<org.apache.http.impl.conn.SingleClientConnManager: org.apache.http.conn.ManagedClientConnection getConnection(org.apache.http.conn.routing.HttpRoute,java.lang.Object)>;NETWORK_INFORMATION;SOURCE
<org.apache.http.impl.conn.tsccm.BasicPoolEntry: org.apache.http.conn.OperatedClientConnection getConnection()>;NETWORK_INFORMATION;SOURCE
<org.apache.http.impl.conn.tsccm.ConnPoolByRoute: int getConnectionsInPool(org.apache.http.conn.routing.HttpRoute)>;NETWORK_INFORMATION;SOURCE
<org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager$1: org.apache.http.conn.ManagedClientConnection getConnection(long,java.util.concurrent.TimeUnit)>;NETWORK_INFORMATION;SOURCE
<org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager: int getConnectionsInPool()>;NETWORK_INFORMATION;SOURCE
<org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager: int getConnectionsInPool(org.apache.http.conn.routing.HttpRoute)>;NETWORK_INFORMATION;SOURCE
<org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager: org.apache.http.conn.ClientConnectionOperator createConnectionOperator(org.apache.http.conn.scheme.SchemeRegistry)>;NETWORK_INFORMATION;SOURCE
<org.apache.http.impl.cookie.BrowserCompatSpec: int getVersion()>;BROWSER_INFORMATION;SOURCE
<org.apache.http.impl.cookie.BrowserCompatSpec: org.apache.http.Header getVersionHeader()>;BROWSER_INFORMATION;SOURCE
<org.apache.http.message.BasicRequestLine: java.lang.String getUri()>;FILE_INFORMATION;SOURCE
<org.ccil.cowan.tagsoup.AttributesImpl: java.lang.String getURI(int)>;FILE_INFORMATION;SOURCE
<org.ccil.cowan.tagsoup.Schema: java.lang.String getURI()>;FILE_INFORMATION;SOURCE
<org.kxml2.io.KXmlParser: java.lang.String getNamespaceUri(int)>;FILE_INFORMATION;SOURCE
<org.xml.sax.helpers.AttributesImpl: java.lang.String getURI(int)>;FILE_INFORMATION;SOURCE
<org.xml.sax.helpers.NamespaceSupport$Context: java.lang.String getURI(java.lang.String)>;FILE_INFORMATION;SOURCE
<org.xml.sax.helpers.NamespaceSupport: java.lang.String getURI(java.lang.String)>;FILE_INFORMATION;SOURCE
<org.xml.sax.helpers.ParserAdapter$AttributeListAdapter: java.lang.String getURI(int)>;FILE_INFORMATION;SOURCE
